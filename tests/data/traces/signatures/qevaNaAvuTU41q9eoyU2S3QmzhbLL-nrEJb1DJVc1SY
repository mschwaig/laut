{"signatures": ["eyJhbGciOiJFZERTQSIsImNydiI6IkVkMjU1MTkiLCJkZXRhY2hIYXNoIjoibml4LWNhLXBhdGgiLCJraWQiOiJidWlsZGVyQjpkOTc4MDE3OWQ3MjM5ZDUxIiwidHlwIjoiSldUIiwidHlwZSI6ImxhdXQiLCJ2IjoiMiJ9.{"in":{"rdrv_json":"qevaNaAvuTU41q9eoyU2S3QmzhbLL-nrEJb1DJVc1SY","rdrv_aterm_ca":"ha8zq4zn676av20pb8xb5a1vjw01m8b8","debug":{"drv_name":"xgcc-14.2.1.20250322","rdrv_path":"/nix/store/ha8zq4zn676av20pb8xb5a1vjw01m8b8-xgcc-14.2.1.20250322.drv","rdrv_json_preimage":"{\"args\":[\"-e\",\"/nix/store/vj1c3wf9c11a0qs6p3ymfvrnsdgsdcbq-source-stdenv.sh\",\"/nix/store/shkw4qm9qcw5sc5n1k5jznc83ny02r39-default-builder.sh\"],\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"env\":{\"CPATH\":\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev/include\",\"EXTRA_FLAGS_FOR_TARGET\":\"\",\"EXTRA_LDFLAGS_FOR_TARGET\":\"\",\"LIBRARY_PATH\":\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1/lib\",\"NIX_HARDENING_ENABLE\":\"bindnow fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs\",\"NIX_LDFLAGS\":\"\",\"NIX_NO_SELF_RPATH\":\"1\",\"__structuredAttrs\":\"\",\"buildFlags\":\"\",\"buildInputs\":\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev /nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev /nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 /nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38 /nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper- /nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 /nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\",\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"checksum\":\"/1mwi8wx04p2sbg96n3j7n7qil7yrwl7qfg98dsyghqkjki9hwqam\",\"cmakeFlags\":\"\",\"configureFlags\":\"--with-gmp-include=/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev/include --with-gmp-lib=/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0/lib --with-mpfr-include=/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev/include --with-mpfr-lib=/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1/lib --with-mpc=/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 --with-native-system-header-dir=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles/include --with-build-sysroot=/ --with-gxx-include-dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/include/c++/14.2.1.20250322/ --program-prefix= --disable-lto --disable-libstdcxx-pch --without-included-gettext --with-system-zlib --enable-static --enable-languages=c,c++ --disable-multilib --enable-plugin --disable-libcc1 --with-isl=/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 --disable-bootstrap --with-native-system-header-dir=/include --with-build-sysroot=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles --disable-nls --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=x86_64-unknown-linux-gnu\",\"configurePlatforms\":\"build host target\",\"crossMingw\":\"\",\"depsBuildBuild\":\"/nix/store/xgwl1m1j2gs51ravzj2v43faipz394wr-bootstrap-stage-xgcc-gcc-wrapper-\",\"depsBuildBuildPropagated\":\"\",\"depsBuildTarget\":\"/nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper- /nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\",\"depsBuildTargetPropagated\":\"\",\"depsHostHost\":\"\",\"depsHostHostPropagated\":\"\",\"depsTargetTarget\":\"\",\"depsTargetTargetPropagated\":\"\",\"doCheck\":\"\",\"doInstallCheck\":\"\",\"dontDisableStatic\":\"1\",\"enableMultilib\":\"\",\"enableParallelBuilding\":\"1\",\"enableParallelChecking\":\"1\",\"enableParallelInstalling\":\"\",\"enableShared\":\"1\",\"hardeningDisable\":\"format pie stackclashprotection\",\"info\":\"/1q29kf1a0nccw70c0b8a1mg10jr7b5lvv5m7v3jwdffnsy6nvxyy\",\"lib\":\"/0sra2y18lr3h6j58qjm0w46yv36h1wjmilb09n8aimdpivdymscx\",\"libc_dev\":\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\",\"libgcc\":\"/1asphndcd5djmh2xzc48rkbp9rlipz6aav02xbka98hb4fkm03pr\",\"man\":\"/13w3w5jxr32cwlhkkhgz7w65fffzgv7fkd48zi7ncz9ghqzhnqpw\",\"mesonFlags\":\"\",\"name\":\"xgcc-14.2.1.20250322\",\"nativeBuildInputs\":\"/nix/store/qhclfh92z2ks5bkgwh4inggz0ck4flas-texinfo-7.1.1 /nix/store/dpxzrakf1jkcv9zhwaq7pl9lv6m5b0f4-which-2.23 /nix/store/an6324ywg1g27pm5whyag18yxagi6mn1-gettext-0.22.5 /nix/store/vv9qpib096sd3y5pyk35l4fgvm1is59p-perl-5.40.0 /nix/store/1kdp0xcclxb294rnpgiaigf6p4xp5jhi-flex-2.6.4\",\"noSysDirs\":\"1\",\"out\":\"/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9\",\"outputHashAlgo\":\"sha256\",\"outputHashMode\":\"recursive\",\"outputs\":\"out man info lib libgcc checksum\",\"patches\":\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch /nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch /nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch /nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch /nix/store/3cj8qm3xjz1g5f7qnnxlc95i9imkicbk-cfi_startproc-reorder-label-14-1.diff\",\"pname\":\"xgcc\",\"postConfigure\":\"# Avoid store paths when embedding ./configure flags into gcc.\\n# Mangled arguments are still useful when reporting bugs upstream.\\nsed -e \\\"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\\\{32\\\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\\\" -i Makefile\\n\",\"postInstall\":\"# Clean up our compatibility symlinks (see above)\\nfor link in \\\"${compatibilitySymlinks[@]}\\\"; do\\n  echo \\\"Removing compatibility symlink: $link\\\"\\n  rm -f \\\"$link\\\"\\ndone\\n\\n# Move target runtime libraries to lib output.\\n# For non-cross, they're in $out/lib; for cross, they're in $out/$targetConfig/lib.\\ntargetLibDir=\\\"${targetConfig+$targetConfig/}lib\\\"\\n\\nmoveToOutput \\\"$targetLibDir/lib*.so*\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dylib\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dll\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"share/gcc-*/python\\\" \\\"${!outputLib}\\\"\\n\\nif [ -z \\\"$enableShared\\\" ]; then\\n    moveToOutput \\\"$targetLibDir/lib*.a\\\" \\\"${!outputLib}\\\"\\nfi\\n\\nfor i in \\\"${!outputLib}\\\"/$targetLibDir/*.py; do\\n    substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\ndone\\n\\n# Multilib and cross can't exist at the same time, so just use lib64 here\\nif [ -n \\\"$enableMultilib\\\" ]; then\\n    moveToOutput \\\"lib64/lib*.so*\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dylib\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dll\\\" \\\"${!outputLib}\\\"\\n\\n    for i in \\\"${!outputLib}\\\"/lib64/*.py; do\\n        substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\n    done\\nfi\\n\\n# Remove `fixincl' to prevent a retained dependency on the\\n# previous gcc.\\nrm -rf $out/libexec/gcc/*/*/install-tools\\nrm -rf $out/lib/gcc/*/*/install-tools\\n\\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\\nrm -rf $out/bin/gccbug\\n\\n# Remove .la files, they're not adjusted for the makeCompatibilitySymlink magic,\\n# which confuses libtool and leads to weird linking errors.\\n# Removing the files just makes libtool link .so files directly, which is usually\\n# what we want anyway.\\nfind $out -name '*.la' -delete\\n\\nif type \\\"install_name_tool\\\"; then\\n    for i in \\\"${!outputLib}\\\"/lib/*.*.dylib \\\"${!outputLib}\\\"/lib/*.so.[0-9]; do\\n        install_name_tool -id \\\"$i\\\" \\\"$i\\\" || true\\n        for old_path in $(otool -L \\\"$i\\\" | grep \\\"$out\\\" | awk '{print $1}'); do\\n          new_path=`echo \\\"$old_path\\\" | sed \\\"s,$out,${!outputLib},\\\"`\\n          install_name_tool -change \\\"$old_path\\\" \\\"$new_path\\\" \\\"$i\\\" || true\\n        done\\n    done\\nfi\\n\\n# Get rid of some \\\"fixed\\\" header files\\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h,pthread.h}\\n\\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\\nfor i in $out/bin/*-gcc*; do\\n    if cmp -s $out/bin/gcc $i; then\\n        ln -sfn gcc $i\\n    fi\\ndone\\n\\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\\n    if cmp -s $out/bin/g++ $i; then\\n        ln -sfn g++ $i\\n    fi\\ndone\\n\\n# Two identical man pages are shipped (moving and compressing is done later)\\nfor i in \\\"$out\\\"/share/man/man1/*g++.1; do\\n    if test -e \\\"$i\\\"; then\\n        man_prefix=`echo \\\"$i\\\" | sed \\\"s,.*/\\\\(.*\\\\)g++.1,\\\\1,\\\"`\\n        ln -sf \\\"$man_prefix\\\"gcc.1 \\\"$i\\\"\\n    fi\\ndone\\n\",\"postInstallSaveChecksumPhase\":\"mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\\ncat > gcc/build/genchecksum <<\\\\EOF\\n#!/nix/store/pfcxrqa84b7x8ks68swl4166daxmswwq-bash-5.2p37/bin/bash\\n/nix/store/0fwq8v3mvdh4j3ii5d4ndjlxy0y89il6-nuke-references/bin/nuke-refs $@\\nfor INPUT in \\\"$@\\\"; do install -Dt $INPUT $checksum/inputs/; done\\nexec build/.genchecksum-wrapped $@\\nEOF\\nchmod +x gcc/build/genchecksum\\nrm gcc/*-checksum.*\\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\\n\",\"postPatch\":\"configureScripts=$(find . -name configure)\\nfor configureScript in $configureScripts; do\\n  patchShebangs $configureScript\\ndone\\n\\n# Make sure nixpkgs versioning match upstream one\\n# to ease version-based comparisons.\\ngcc_base_version=$(< gcc/BASE-VER)\\nif [[ 14.2.1 != $gcc_base_version ]]; then\\n  echo \\\"Please update 'version' variable:\\\"\\n  echo \\\"  Expected: '$gcc_base_version'\\\"\\n  echo \\\"  Actual: '14.2.1.20250322'\\\"\\n  exit 1\\nfi\\necho \\\"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\\\"\\nfor header in \\\"gcc/config/\\\"*-gnu.h \\\"gcc/config/\\\"*\\\"/\\\"*.h\\ndo\\n  grep -q _DYNAMIC_LINKER \\\"$header\\\" || continue\\n  echo \\\"  fixing $header...\\\"\\n  sed -i \\\"$header\\\" \\\\\\n      -e 's|define[[:blank:]]*\\\\([UCG]\\\\+\\\\)LIBC_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define \\\\1LIBC_DYNAMIC_LINKER\\\\2 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\3\\\"|g' \\\\\\n      -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define MUSL_DYNAMIC_LINKER\\\\1 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\2\\\"|g'\\n  done\\n\",\"preConfigure\":\"ln -sf /nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38/include/crypt.h libsanitizer/sanitizer_common/crypt.h\\nif test -n \\\"$newlibSrc\\\"; then\\n    tar xvf \\\"$newlibSrc\\\" -C ..\\n    ln -s ../newlib-*/newlib newlib\\n    # Patch to get armvt5el working:\\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\\nfi\\n\\n# Bug - they packaged zlib\\nif test -d \\\"zlib\\\"; then\\n    # This breaks the build without-headers, which should build only\\n    # the target libgcc as target libraries.\\n    # See 'configure:5370'\\n    rm -Rf zlib\\nfi\\n\\nif test -n \\\"$crossMingw\\\" -a -n \\\"$withoutTargetLibc\\\"; then\\n    mkdir -p ../mingw\\n    # --with-build-sysroot expects that:\\n    cp -R $libcCross/include ../mingw\\n    appendToVar configureFlags \\\"--with-build-sysroot=`pwd`/..\\\"\\nfi\\n\\n# Perform the build in a different directory.\\nmkdir ../build\\ncd ../build\\nconfigureScript=../$sourceRoot/configure\\n\",\"preFixup\":\"# Populate most delicated lib/ part of stripDebugList{,Target}\\nupdateDebugListPaths() {\\n  local oldOpts\\n  oldOpts=\\\"$(shopt -p nullglob)\\\" || true\\n  shopt -s nullglob\\n\\n  pushd $out\\n  local -ar outHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\\n  )\\n  local -ar outTargetFiles=(\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\\n  )\\n  popd\\n\\n  pushd $lib\\n  local -ar libHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n  )\\n  local -ar libTargetFiles=(\\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\\n  )\\n  popd\\n\\n  eval \\\"$oldOpts\\\"\\n\\n  stripDebugList=\\\"$stripDebugList ${outHostFiles[*]} ${libHostFiles[*]}\\\"\\n  stripDebugListTarget=\\\"$stripDebugListTarget ${outTargetFiles[*]} ${libTargetFiles[*]}\\\"\\n}\\nupdateDebugListPaths\\n\",\"preFixupLibGccPhase\":\"# move libgcc from lib to its own output (libgcc)\\nmkdir -p $libgcc/lib\\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\\npatchelf --set-rpath \\\"\\\" $libgcc/lib/libgcc_s.so.1\\n\",\"preFixupPhases\":\"preFixupLibGccPhase postInstallSaveChecksumPhase preFixupXgccPhase\",\"preFixupXgccPhase\":\"find $lib/lib/ -name \\\\*.so\\\\* -exec patchelf --shrink-rpath {} \\\\; || true\\n\",\"preInstall\":\"declare -ga compatibilitySymlinks=()\\n\\nmakeCompatibilitySymlink() {\\n  declare -a outputsToLink=(\\\"$out\\\")\\n\\n  if [ -n \\\"$lib\\\" ]; then\\n    outputsToLink+=(\\\"$lib\\\")\\n  fi\\n\\n  for output in \\\"${outputsToLink[@]}\\\"; do\\n    local linkTarget=\\\"$1\\\"\\n    local linkName=\\\"$output/$2\\\"\\n\\n    echo \\\"Creating compatibility symlink: $linkTarget -> $linkName\\\"\\n\\n    mkdir -p \\\"$(dirname \\\"$linkName\\\")\\\"\\n    ln -s \\\"$linkTarget\\\" \\\"$linkName\\\"\\n    compatibilitySymlinks+=(\\\"$linkName\\\")\\n  done\\n}\\nmakeCompatibilitySymlink lib lib32\\nmakeCompatibilitySymlink lib lib64\\n\",\"preUnpack\":\"oldOpts=\\\"$(shopt -po nounset)\\\" || true\\nset -euo pipefail\\n\\nexport NIX_FIXINC_DUMMY=\\\"$NIX_BUILD_TOP/dummy\\\"\\nmkdir \\\"$NIX_FIXINC_DUMMY\\\"\\n\\nif test \\\"$staticCompiler\\\" = \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-static\\\"\\nelif test \\\"${NIX_DONT_SET_RPATH-}\\\" != \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-Wl,-rpath,${!outputLib}/lib\\\"\\nelse\\n    EXTRA_LDFLAGS=\\\"\\\"\\nfi\\n\\n# GCC interprets empty paths as \\\".\\\", which we don't want.\\nif test -z \\\"${CPATH-}\\\"; then unset CPATH; fi\\nif test -z \\\"${LIBRARY_PATH-}\\\"; then unset LIBRARY_PATH; fi\\necho \\\"\\\\$CPATH is \\\\`${CPATH-}'\\\"\\necho \\\"\\\\$LIBRARY_PATH is \\\\`${LIBRARY_PATH-}'\\\"\\n\\nif test \\\"$noSysDirs\\\" = \\\"1\\\"; then\\n\\n    declare -g \\\\\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\\\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\\n\\n    # Extract flags from Bintools Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curBintools=\\\"NIX_BINTOOLS${post}\\\"\\n\\n        declare -a extraLDFlags=()\\n        if [[ -e \\\"${!curBintools}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra flags when linking to pass to the gcc\\n            # compilers being generated to make sure that they use our libc.\\n            extraLDFlags=($(< \\\"${!curBintools}/nix-support/libc-ldflags\\\") $(< \\\"${!curBintools}/nix-support/libc-ldflags-before\\\" || true))\\n            if [ -e ${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\\n                extraLDFlags=-dynamic-linker=$(< ${!curBintools}/nix-support/dynamic-linker)\\n            fi\\n\\n            # The path to the Libc binaries such as `crti.o'.\\n            libc_libdir=\\\"$(< \\\"${!curBintools}/nix-support/orig-libc\\\")/lib\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraLDFlags=(\\\"-L/usr/lib64\\\" \\\"-L/usr/lib\\\")\\n            libc_libdir=\\\"/usr/lib\\\"\\n        fi\\n        declare -a prefixExtraLDFlags=()\\n        prefixExtraLDFlags=(\\\"-L$libc_libdir\\\")\\n        nixDontSetRpathVar=NIX_DONT_SET_RPATH${post}\\n        if test \\\"${!nixDontSetRpathVar-}\\\" != \\\"1\\\"; then\\n            prefixExtraLDFlags+=(\\\"-rpath\\\" \\\"$libc_libdir\\\")\\n        fi\\n        extraLDFlags=(\\\"${prefixExtraLDFlags[@]}\\\" \\\"${extraLDFlags[@]}\\\")\\n        for i in \\\"${extraLDFlags[@]}\\\"; do\\n            declare -g EXTRA_LDFLAGS${post}+=\\\" -Wl,$i\\\"\\n        done\\n    done\\n\\n    # Extract flags from CC Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curCC=\\\"NIX_CC${post}\\\"\\n        curFIXINC=\\\"NIX_FIXINC_DUMMY${post}\\\"\\n\\n        declare -a extraFlags=()\\n        if [[ -e \\\"${!curCC}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra compiling flags to pass to the gcc compilers\\n            # being generated to make sure that they use our libc.\\n            extraFlags=($(< \\\"${!curCC}/nix-support/libc-crt1-cflags\\\") $(< \\\"${!curCC}/nix-support/libc-cflags\\\"))\\n\\n            # The path to the Libc headers\\n            libc_devdir=\\\"$(< \\\"${!curCC}/nix-support/orig-libc-dev\\\")\\\"\\n\\n            # Use *real* header files, otherwise a limits.h is generated that\\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\\n            # which breaks the build).\\n            declare -g NIX_FIXINC_DUMMY${post}=\\\"$libc_devdir/include\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraFlags=(\\\"-isystem\\\" \\\"/usr/include\\\")\\n            declare -g NIX_FIXINC_DUMMY${post}=/usr/include\\n        fi\\n\\n        extraFlags=(\\\"-I${!curFIXINC}\\\" \\\"${extraFlags[@]}\\\")\\n\\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\\n        # sure to explictly add them so that files compiled with the bootstrap\\n        # compiler are optimized and (optionally) contain debugging information\\n        # (info \\\"(gccinstall) Building\\\").\\n        if test -n \\\"${dontStrip-}\\\"; then\\n            extraFlags=(\\\"-O2\\\" \\\"-g\\\" \\\"${extraFlags[@]}\\\")\\n        else\\n            # Don't pass `-g' at all; this saves space while building.\\n            extraFlags=(\\\"-O2\\\" \\\"${extraFlags[@]}\\\")\\n        fi\\n\\n        declare -g EXTRA_FLAGS${post}=\\\"${extraFlags[*]}\\\"\\n    done\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        # host = target, so the flags are the same\\n        EXTRA_FLAGS_FOR_TARGET=\\\"$EXTRA_FLAGS\\\"\\n        EXTRA_LDFLAGS_FOR_TARGET=\\\"$EXTRA_LDFLAGS\\\"\\n    fi\\n\\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\\n    # the startfiles.\\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\\n    # for the startfiles.\\n    makeFlagsArray+=(\\n        \\\"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\\\"\\n\\n        \\\"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        #\\\"LDFLAGS=$EXTRA_LDFLAGS\\\"\\n        \\\"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\\\"\\n\\n        \\\"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n\\n        # It seems there is a bug in GCC 5\\n        #\\\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n        #\\\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n\\n        \\\"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n    )\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        makeFlagsArray+=(\\n            \\\"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n            \\\"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        )\\n    fi\\n\\n    if test \\\"$withoutTargetLibc\\\" == 1; then\\n        # We don't want the gcc build to assume there will be a libc providing\\n        # limits.h in this stage\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=false'\\n        )\\n    else\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=true'\\n        )\\n    fi\\nfi\\n\\neval \\\"$oldOpts\\\"\\n\",\"propagatedBuildInputs\":\"\",\"propagatedNativeBuildInputs\":\"\",\"setOutputFlags\":\"\",\"src\":\"/nix/store/4w2r6m8y6bw50jrrcxfyhi5ax8cpmal4-gcc-14-20250322.tar.xz\",\"staticCompiler\":\"\",\"stdenv\":\"/nix/store/6p3dx1cz2n14av99x1m26frf6vighrkq-bootstrap-stage-xgcc-stdenv-linux\",\"strictDeps\":\"\",\"stripDebugList\":\"bin libexec\",\"stripDebugListTarget\":\"x86_64-unknown-linux-gnu\",\"system\":\"x86_64-linux\",\"version\":\"14.2.1\",\"withoutTargetLibc\":\"\"},\"inputDrvs\":{},\"inputSrcs\":[\"/nix/store/0fwq8v3mvdh4j3ii5d4ndjlxy0y89il6-nuke-references\",\"/nix/store/1kdp0xcclxb294rnpgiaigf6p4xp5jhi-flex-2.6.4\",\"/nix/store/3cj8qm3xjz1g5f7qnnxlc95i9imkicbk-cfi_startproc-reorder-label-14-1.diff\",\"/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1\",\"/nix/store/4w2r6m8y6bw50jrrcxfyhi5ax8cpmal4-gcc-14-20250322.tar.xz\",\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\",\"/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev\",\"/nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"/nix/store/6p3dx1cz2n14av99x1m26frf6vighrkq-bootstrap-stage-xgcc-stdenv-linux\",\"/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1\",\"/nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch\",\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch\",\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1\",\"/nix/store/an6324ywg1g27pm5whyag18yxagi6mn1-gettext-0.22.5\",\"/nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\",\"/nix/store/dpxzrakf1jkcv9zhwaq7pl9lv6m5b0f4-which-2.23\",\"/nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper-\",\"/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools\",\"/nix/store/pfcxrqa84b7x8ks68swl4166daxmswwq-bash-5.2p37\",\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\",\"/nix/store/qhclfh92z2ks5bkgwh4inggz0ck4flas-texinfo-7.1.1\",\"/nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38\",\"/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0\",\"/nix/store/shkw4qm9qcw5sc5n1k5jznc83ny02r39-default-builder.sh\",\"/nix/store/vj1c3wf9c11a0qs6p3ymfvrnsdgsdcbq-source-stdenv.sh\",\"/nix/store/vv9qpib096sd3y5pyk35l4fgvm1is59p-perl-5.40.0\",\"/nix/store/xgwl1m1j2gs51ravzj2v43faipz394wr-bootstrap-stage-xgcc-gcc-wrapper-\",\"/nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch\",\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev\"],\"name\":\"xgcc-14.2.1.20250322\",\"outputs\":{\"checksum\":{\"hashAlgo\":\"r:sha256\"},\"info\":{\"hashAlgo\":\"r:sha256\"},\"lib\":{\"hashAlgo\":\"r:sha256\"},\"libgcc\":{\"hashAlgo\":\"r:sha256\"},\"man\":{\"hashAlgo\":\"r:sha256\"},\"out\":{\"hashAlgo\":\"r:sha256\"}},\"system\":\"x86_64-linux\"}","rdrv_computed_path":"/nix/store/ha8zq4zn676av20pb8xb5a1vjw01m8b8-xgcc-14.2.1.20250322.drv","rdrv_aterm_ca_preimage":"Derive([(\"checksum\",\"\",\"r:sha256\",\"\"),(\"info\",\"\",\"r:sha256\",\"\"),(\"lib\",\"\",\"r:sha256\",\"\"),(\"libgcc\",\"\",\"r:sha256\",\"\"),(\"man\",\"\",\"r:sha256\",\"\"),(\"out\",\"\",\"r:sha256\",\"\")],[],[\"/nix/store/0fwq8v3mvdh4j3ii5d4ndjlxy0y89il6-nuke-references\",\"/nix/store/1kdp0xcclxb294rnpgiaigf6p4xp5jhi-flex-2.6.4\",\"/nix/store/3cj8qm3xjz1g5f7qnnxlc95i9imkicbk-cfi_startproc-reorder-label-14-1.diff\",\"/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1\",\"/nix/store/4w2r6m8y6bw50jrrcxfyhi5ax8cpmal4-gcc-14-20250322.tar.xz\",\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\",\"/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev\",\"/nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"/nix/store/6p3dx1cz2n14av99x1m26frf6vighrkq-bootstrap-stage-xgcc-stdenv-linux\",\"/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1\",\"/nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch\",\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch\",\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1\",\"/nix/store/an6324ywg1g27pm5whyag18yxagi6mn1-gettext-0.22.5\",\"/nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\",\"/nix/store/dpxzrakf1jkcv9zhwaq7pl9lv6m5b0f4-which-2.23\",\"/nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper-\",\"/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools\",\"/nix/store/pfcxrqa84b7x8ks68swl4166daxmswwq-bash-5.2p37\",\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\",\"/nix/store/qhclfh92z2ks5bkgwh4inggz0ck4flas-texinfo-7.1.1\",\"/nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38\",\"/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0\",\"/nix/store/shkw4qm9qcw5sc5n1k5jznc83ny02r39-default-builder.sh\",\"/nix/store/vj1c3wf9c11a0qs6p3ymfvrnsdgsdcbq-source-stdenv.sh\",\"/nix/store/vv9qpib096sd3y5pyk35l4fgvm1is59p-perl-5.40.0\",\"/nix/store/xgwl1m1j2gs51ravzj2v43faipz394wr-bootstrap-stage-xgcc-gcc-wrapper-\",\"/nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch\",\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev\"],\"x86_64-linux\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",[\"-e\",\"/nix/store/vj1c3wf9c11a0qs6p3ymfvrnsdgsdcbq-source-stdenv.sh\",\"/nix/store/shkw4qm9qcw5sc5n1k5jznc83ny02r39-default-builder.sh\"],[(\"CPATH\",\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev/include\"),(\"EXTRA_FLAGS_FOR_TARGET\",\"\"),(\"EXTRA_LDFLAGS_FOR_TARGET\",\"\"),(\"LIBRARY_PATH\",\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1/lib\"),(\"NIX_HARDENING_ENABLE\",\"bindnow fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs\"),(\"NIX_LDFLAGS\",\"\"),(\"NIX_NO_SELF_RPATH\",\"1\"),(\"__structuredAttrs\",\"\"),(\"buildFlags\",\"\"),(\"buildInputs\",\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev /nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev /nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 /nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38 /nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper- /nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 /nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\"),(\"builder\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\"),(\"checksum\",\"/1mwi8wx04p2sbg96n3j7n7qil7yrwl7qfg98dsyghqkjki9hwqam\"),(\"cmakeFlags\",\"\"),(\"configureFlags\",\"--with-gmp-include=/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev/include --with-gmp-lib=/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0/lib --with-mpfr-include=/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev/include --with-mpfr-lib=/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1/lib --with-mpc=/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 --with-native-system-header-dir=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles/include --with-build-sysroot=/ --with-gxx-include-dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/include/c++/14.2.1.20250322/ --program-prefix= --disable-lto --disable-libstdcxx-pch --without-included-gettext --with-system-zlib --enable-static --enable-languages=c,c++ --disable-multilib --enable-plugin --disable-libcc1 --with-isl=/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 --disable-bootstrap --with-native-system-header-dir=/include --with-build-sysroot=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles --disable-nls --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=x86_64-unknown-linux-gnu\"),(\"configurePlatforms\",\"build host target\"),(\"crossMingw\",\"\"),(\"depsBuildBuild\",\"/nix/store/xgwl1m1j2gs51ravzj2v43faipz394wr-bootstrap-stage-xgcc-gcc-wrapper-\"),(\"depsBuildBuildPropagated\",\"\"),(\"depsBuildTarget\",\"/nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper- /nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\"),(\"depsBuildTargetPropagated\",\"\"),(\"depsHostHost\",\"\"),(\"depsHostHostPropagated\",\"\"),(\"depsTargetTarget\",\"\"),(\"depsTargetTargetPropagated\",\"\"),(\"doCheck\",\"\"),(\"doInstallCheck\",\"\"),(\"dontDisableStatic\",\"1\"),(\"enableMultilib\",\"\"),(\"enableParallelBuilding\",\"1\"),(\"enableParallelChecking\",\"1\"),(\"enableParallelInstalling\",\"\"),(\"enableShared\",\"1\"),(\"hardeningDisable\",\"format pie stackclashprotection\"),(\"info\",\"/1q29kf1a0nccw70c0b8a1mg10jr7b5lvv5m7v3jwdffnsy6nvxyy\"),(\"lib\",\"/0sra2y18lr3h6j58qjm0w46yv36h1wjmilb09n8aimdpivdymscx\"),(\"libc_dev\",\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\"),(\"libgcc\",\"/1asphndcd5djmh2xzc48rkbp9rlipz6aav02xbka98hb4fkm03pr\"),(\"man\",\"/13w3w5jxr32cwlhkkhgz7w65fffzgv7fkd48zi7ncz9ghqzhnqpw\"),(\"mesonFlags\",\"\"),(\"name\",\"xgcc-14.2.1.20250322\"),(\"nativeBuildInputs\",\"/nix/store/qhclfh92z2ks5bkgwh4inggz0ck4flas-texinfo-7.1.1 /nix/store/dpxzrakf1jkcv9zhwaq7pl9lv6m5b0f4-which-2.23 /nix/store/an6324ywg1g27pm5whyag18yxagi6mn1-gettext-0.22.5 /nix/store/vv9qpib096sd3y5pyk35l4fgvm1is59p-perl-5.40.0 /nix/store/1kdp0xcclxb294rnpgiaigf6p4xp5jhi-flex-2.6.4\"),(\"noSysDirs\",\"1\"),(\"out\",\"/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9\"),(\"outputHashAlgo\",\"sha256\"),(\"outputHashMode\",\"recursive\"),(\"outputs\",\"out man info lib libgcc checksum\"),(\"patches\",\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch /nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch /nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch /nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch /nix/store/3cj8qm3xjz1g5f7qnnxlc95i9imkicbk-cfi_startproc-reorder-label-14-1.diff\"),(\"pname\",\"xgcc\"),(\"postConfigure\",\"# Avoid store paths when embedding ./configure flags into gcc.\\n# Mangled arguments are still useful when reporting bugs upstream.\\nsed -e \\\"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\\\{32\\\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\\\" -i Makefile\\n\"),(\"postInstall\",\"# Clean up our compatibility symlinks (see above)\\nfor link in \\\"${compatibilitySymlinks[@]}\\\"; do\\n  echo \\\"Removing compatibility symlink: $link\\\"\\n  rm -f \\\"$link\\\"\\ndone\\n\\n# Move target runtime libraries to lib output.\\n# For non-cross, they're in $out/lib; for cross, they're in $out/$targetConfig/lib.\\ntargetLibDir=\\\"${targetConfig+$targetConfig/}lib\\\"\\n\\nmoveToOutput \\\"$targetLibDir/lib*.so*\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dylib\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dll\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"share/gcc-*/python\\\" \\\"${!outputLib}\\\"\\n\\nif [ -z \\\"$enableShared\\\" ]; then\\n    moveToOutput \\\"$targetLibDir/lib*.a\\\" \\\"${!outputLib}\\\"\\nfi\\n\\nfor i in \\\"${!outputLib}\\\"/$targetLibDir/*.py; do\\n    substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\ndone\\n\\n# Multilib and cross can't exist at the same time, so just use lib64 here\\nif [ -n \\\"$enableMultilib\\\" ]; then\\n    moveToOutput \\\"lib64/lib*.so*\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dylib\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dll\\\" \\\"${!outputLib}\\\"\\n\\n    for i in \\\"${!outputLib}\\\"/lib64/*.py; do\\n        substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\n    done\\nfi\\n\\n# Remove `fixincl' to prevent a retained dependency on the\\n# previous gcc.\\nrm -rf $out/libexec/gcc/*/*/install-tools\\nrm -rf $out/lib/gcc/*/*/install-tools\\n\\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\\nrm -rf $out/bin/gccbug\\n\\n# Remove .la files, they're not adjusted for the makeCompatibilitySymlink magic,\\n# which confuses libtool and leads to weird linking errors.\\n# Removing the files just makes libtool link .so files directly, which is usually\\n# what we want anyway.\\nfind $out -name '*.la' -delete\\n\\nif type \\\"install_name_tool\\\"; then\\n    for i in \\\"${!outputLib}\\\"/lib/*.*.dylib \\\"${!outputLib}\\\"/lib/*.so.[0-9]; do\\n        install_name_tool -id \\\"$i\\\" \\\"$i\\\" || true\\n        for old_path in $(otool -L \\\"$i\\\" | grep \\\"$out\\\" | awk '{print $1}'); do\\n          new_path=`echo \\\"$old_path\\\" | sed \\\"s,$out,${!outputLib},\\\"`\\n          install_name_tool -change \\\"$old_path\\\" \\\"$new_path\\\" \\\"$i\\\" || true\\n        done\\n    done\\nfi\\n\\n# Get rid of some \\\"fixed\\\" header files\\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h,pthread.h}\\n\\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\\nfor i in $out/bin/*-gcc*; do\\n    if cmp -s $out/bin/gcc $i; then\\n        ln -sfn gcc $i\\n    fi\\ndone\\n\\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\\n    if cmp -s $out/bin/g++ $i; then\\n        ln -sfn g++ $i\\n    fi\\ndone\\n\\n# Two identical man pages are shipped (moving and compressing is done later)\\nfor i in \\\"$out\\\"/share/man/man1/*g++.1; do\\n    if test -e \\\"$i\\\"; then\\n        man_prefix=`echo \\\"$i\\\" | sed \\\"s,.*/\\\\(.*\\\\)g++.1,\\\\1,\\\"`\\n        ln -sf \\\"$man_prefix\\\"gcc.1 \\\"$i\\\"\\n    fi\\ndone\\n\"),(\"postInstallSaveChecksumPhase\",\"mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\\ncat > gcc/build/genchecksum <<\\\\EOF\\n#!/nix/store/pfcxrqa84b7x8ks68swl4166daxmswwq-bash-5.2p37/bin/bash\\n/nix/store/0fwq8v3mvdh4j3ii5d4ndjlxy0y89il6-nuke-references/bin/nuke-refs $@\\nfor INPUT in \\\"$@\\\"; do install -Dt $INPUT $checksum/inputs/; done\\nexec build/.genchecksum-wrapped $@\\nEOF\\nchmod +x gcc/build/genchecksum\\nrm gcc/*-checksum.*\\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\\n\"),(\"postPatch\",\"configureScripts=$(find . -name configure)\\nfor configureScript in $configureScripts; do\\n  patchShebangs $configureScript\\ndone\\n\\n# Make sure nixpkgs versioning match upstream one\\n# to ease version-based comparisons.\\ngcc_base_version=$(< gcc/BASE-VER)\\nif [[ 14.2.1 != $gcc_base_version ]]; then\\n  echo \\\"Please update 'version' variable:\\\"\\n  echo \\\"  Expected: '$gcc_base_version'\\\"\\n  echo \\\"  Actual: '14.2.1.20250322'\\\"\\n  exit 1\\nfi\\necho \\\"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\\\"\\nfor header in \\\"gcc/config/\\\"*-gnu.h \\\"gcc/config/\\\"*\\\"/\\\"*.h\\ndo\\n  grep -q _DYNAMIC_LINKER \\\"$header\\\" || continue\\n  echo \\\"  fixing $header...\\\"\\n  sed -i \\\"$header\\\" \\\\\\n      -e 's|define[[:blank:]]*\\\\([UCG]\\\\+\\\\)LIBC_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define \\\\1LIBC_DYNAMIC_LINKER\\\\2 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\3\\\"|g' \\\\\\n      -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define MUSL_DYNAMIC_LINKER\\\\1 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\2\\\"|g'\\n  done\\n\"),(\"preConfigure\",\"ln -sf /nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38/include/crypt.h libsanitizer/sanitizer_common/crypt.h\\nif test -n \\\"$newlibSrc\\\"; then\\n    tar xvf \\\"$newlibSrc\\\" -C ..\\n    ln -s ../newlib-*/newlib newlib\\n    # Patch to get armvt5el working:\\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\\nfi\\n\\n# Bug - they packaged zlib\\nif test -d \\\"zlib\\\"; then\\n    # This breaks the build without-headers, which should build only\\n    # the target libgcc as target libraries.\\n    # See 'configure:5370'\\n    rm -Rf zlib\\nfi\\n\\nif test -n \\\"$crossMingw\\\" -a -n \\\"$withoutTargetLibc\\\"; then\\n    mkdir -p ../mingw\\n    # --with-build-sysroot expects that:\\n    cp -R $libcCross/include ../mingw\\n    appendToVar configureFlags \\\"--with-build-sysroot=`pwd`/..\\\"\\nfi\\n\\n# Perform the build in a different directory.\\nmkdir ../build\\ncd ../build\\nconfigureScript=../$sourceRoot/configure\\n\"),(\"preFixup\",\"# Populate most delicated lib/ part of stripDebugList{,Target}\\nupdateDebugListPaths() {\\n  local oldOpts\\n  oldOpts=\\\"$(shopt -p nullglob)\\\" || true\\n  shopt -s nullglob\\n\\n  pushd $out\\n  local -ar outHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\\n  )\\n  local -ar outTargetFiles=(\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\\n  )\\n  popd\\n\\n  pushd $lib\\n  local -ar libHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n  )\\n  local -ar libTargetFiles=(\\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\\n  )\\n  popd\\n\\n  eval \\\"$oldOpts\\\"\\n\\n  stripDebugList=\\\"$stripDebugList ${outHostFiles[*]} ${libHostFiles[*]}\\\"\\n  stripDebugListTarget=\\\"$stripDebugListTarget ${outTargetFiles[*]} ${libTargetFiles[*]}\\\"\\n}\\nupdateDebugListPaths\\n\"),(\"preFixupLibGccPhase\",\"# move libgcc from lib to its own output (libgcc)\\nmkdir -p $libgcc/lib\\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\\npatchelf --set-rpath \\\"\\\" $libgcc/lib/libgcc_s.so.1\\n\"),(\"preFixupPhases\",\"preFixupLibGccPhase postInstallSaveChecksumPhase preFixupXgccPhase\"),(\"preFixupXgccPhase\",\"find $lib/lib/ -name \\\\*.so\\\\* -exec patchelf --shrink-rpath {} \\\\; || true\\n\"),(\"preInstall\",\"declare -ga compatibilitySymlinks=()\\n\\nmakeCompatibilitySymlink() {\\n  declare -a outputsToLink=(\\\"$out\\\")\\n\\n  if [ -n \\\"$lib\\\" ]; then\\n    outputsToLink+=(\\\"$lib\\\")\\n  fi\\n\\n  for output in \\\"${outputsToLink[@]}\\\"; do\\n    local linkTarget=\\\"$1\\\"\\n    local linkName=\\\"$output/$2\\\"\\n\\n    echo \\\"Creating compatibility symlink: $linkTarget -> $linkName\\\"\\n\\n    mkdir -p \\\"$(dirname \\\"$linkName\\\")\\\"\\n    ln -s \\\"$linkTarget\\\" \\\"$linkName\\\"\\n    compatibilitySymlinks+=(\\\"$linkName\\\")\\n  done\\n}\\nmakeCompatibilitySymlink lib lib32\\nmakeCompatibilitySymlink lib lib64\\n\"),(\"preUnpack\",\"oldOpts=\\\"$(shopt -po nounset)\\\" || true\\nset -euo pipefail\\n\\nexport NIX_FIXINC_DUMMY=\\\"$NIX_BUILD_TOP/dummy\\\"\\nmkdir \\\"$NIX_FIXINC_DUMMY\\\"\\n\\nif test \\\"$staticCompiler\\\" = \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-static\\\"\\nelif test \\\"${NIX_DONT_SET_RPATH-}\\\" != \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-Wl,-rpath,${!outputLib}/lib\\\"\\nelse\\n    EXTRA_LDFLAGS=\\\"\\\"\\nfi\\n\\n# GCC interprets empty paths as \\\".\\\", which we don't want.\\nif test -z \\\"${CPATH-}\\\"; then unset CPATH; fi\\nif test -z \\\"${LIBRARY_PATH-}\\\"; then unset LIBRARY_PATH; fi\\necho \\\"\\\\$CPATH is \\\\`${CPATH-}'\\\"\\necho \\\"\\\\$LIBRARY_PATH is \\\\`${LIBRARY_PATH-}'\\\"\\n\\nif test \\\"$noSysDirs\\\" = \\\"1\\\"; then\\n\\n    declare -g \\\\\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\\\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\\n\\n    # Extract flags from Bintools Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curBintools=\\\"NIX_BINTOOLS${post}\\\"\\n\\n        declare -a extraLDFlags=()\\n        if [[ -e \\\"${!curBintools}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra flags when linking to pass to the gcc\\n            # compilers being generated to make sure that they use our libc.\\n            extraLDFlags=($(< \\\"${!curBintools}/nix-support/libc-ldflags\\\") $(< \\\"${!curBintools}/nix-support/libc-ldflags-before\\\" || true))\\n            if [ -e ${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\\n                extraLDFlags=-dynamic-linker=$(< ${!curBintools}/nix-support/dynamic-linker)\\n            fi\\n\\n            # The path to the Libc binaries such as `crti.o'.\\n            libc_libdir=\\\"$(< \\\"${!curBintools}/nix-support/orig-libc\\\")/lib\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraLDFlags=(\\\"-L/usr/lib64\\\" \\\"-L/usr/lib\\\")\\n            libc_libdir=\\\"/usr/lib\\\"\\n        fi\\n        declare -a prefixExtraLDFlags=()\\n        prefixExtraLDFlags=(\\\"-L$libc_libdir\\\")\\n        nixDontSetRpathVar=NIX_DONT_SET_RPATH${post}\\n        if test \\\"${!nixDontSetRpathVar-}\\\" != \\\"1\\\"; then\\n            prefixExtraLDFlags+=(\\\"-rpath\\\" \\\"$libc_libdir\\\")\\n        fi\\n        extraLDFlags=(\\\"${prefixExtraLDFlags[@]}\\\" \\\"${extraLDFlags[@]}\\\")\\n        for i in \\\"${extraLDFlags[@]}\\\"; do\\n            declare -g EXTRA_LDFLAGS${post}+=\\\" -Wl,$i\\\"\\n        done\\n    done\\n\\n    # Extract flags from CC Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curCC=\\\"NIX_CC${post}\\\"\\n        curFIXINC=\\\"NIX_FIXINC_DUMMY${post}\\\"\\n\\n        declare -a extraFlags=()\\n        if [[ -e \\\"${!curCC}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra compiling flags to pass to the gcc compilers\\n            # being generated to make sure that they use our libc.\\n            extraFlags=($(< \\\"${!curCC}/nix-support/libc-crt1-cflags\\\") $(< \\\"${!curCC}/nix-support/libc-cflags\\\"))\\n\\n            # The path to the Libc headers\\n            libc_devdir=\\\"$(< \\\"${!curCC}/nix-support/orig-libc-dev\\\")\\\"\\n\\n            # Use *real* header files, otherwise a limits.h is generated that\\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\\n            # which breaks the build).\\n            declare -g NIX_FIXINC_DUMMY${post}=\\\"$libc_devdir/include\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraFlags=(\\\"-isystem\\\" \\\"/usr/include\\\")\\n            declare -g NIX_FIXINC_DUMMY${post}=/usr/include\\n        fi\\n\\n        extraFlags=(\\\"-I${!curFIXINC}\\\" \\\"${extraFlags[@]}\\\")\\n\\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\\n        # sure to explictly add them so that files compiled with the bootstrap\\n        # compiler are optimized and (optionally) contain debugging information\\n        # (info \\\"(gccinstall) Building\\\").\\n        if test -n \\\"${dontStrip-}\\\"; then\\n            extraFlags=(\\\"-O2\\\" \\\"-g\\\" \\\"${extraFlags[@]}\\\")\\n        else\\n            # Don't pass `-g' at all; this saves space while building.\\n            extraFlags=(\\\"-O2\\\" \\\"${extraFlags[@]}\\\")\\n        fi\\n\\n        declare -g EXTRA_FLAGS${post}=\\\"${extraFlags[*]}\\\"\\n    done\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        # host = target, so the flags are the same\\n        EXTRA_FLAGS_FOR_TARGET=\\\"$EXTRA_FLAGS\\\"\\n        EXTRA_LDFLAGS_FOR_TARGET=\\\"$EXTRA_LDFLAGS\\\"\\n    fi\\n\\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\\n    # the startfiles.\\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\\n    # for the startfiles.\\n    makeFlagsArray+=(\\n        \\\"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\\\"\\n\\n        \\\"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        #\\\"LDFLAGS=$EXTRA_LDFLAGS\\\"\\n        \\\"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\\\"\\n\\n        \\\"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n\\n        # It seems there is a bug in GCC 5\\n        #\\\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n        #\\\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n\\n        \\\"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n    )\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        makeFlagsArray+=(\\n            \\\"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n            \\\"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        )\\n    fi\\n\\n    if test \\\"$withoutTargetLibc\\\" == 1; then\\n        # We don't want the gcc build to assume there will be a libc providing\\n        # limits.h in this stage\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=false'\\n        )\\n    else\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=true'\\n        )\\n    fi\\nfi\\n\\neval \\\"$oldOpts\\\"\\n\"),(\"propagatedBuildInputs\",\"\"),(\"propagatedNativeBuildInputs\",\"\"),(\"setOutputFlags\",\"\"),(\"src\",\"/nix/store/4w2r6m8y6bw50jrrcxfyhi5ax8cpmal4-gcc-14-20250322.tar.xz\"),(\"staticCompiler\",\"\"),(\"stdenv\",\"/nix/store/6p3dx1cz2n14av99x1m26frf6vighrkq-bootstrap-stage-xgcc-stdenv-linux\"),(\"strictDeps\",\"\"),(\"stripDebugList\",\"bin libexec\"),(\"stripDebugListTarget\",\"x86_64-unknown-linux-gnu\"),(\"system\",\"x86_64-linux\"),(\"version\",\"14.2.1\"),(\"withoutTargetLibc\",\"\")])"}},"out":{"castore-entry":{"checksum":"CiQSIJouZtnotxxzn2Q3Kuz5EXKCdx3q0W2-RQ3P9ZI4m-cyGAY","info":"CiQSIBmmlKg0BlTNB5ZJNoHfHHuzg3lMkLrldi07ETolTGuAGBY","lib":"CiQSIMJyGmbFotYRP8osN2Ob97z9m5UJs2Qw6d-zIsbs9SLSGFw","libgcc":"CiQSIFLqrVNduLLm1hX1LNqbsFovpfC202RGUHt1hZuXDdlOGAY","man":"CiQSIHeGofiej6WLXkxCrFib8GQ7Pw5RwaLkXeNG6aWeypkeGBo","out":"CiUSIMtea1vBTEYDbo1PWY7GyakPgSE95Cg_7WuEdixJZZwRGLAZ"},"nix":{"checksum":{"hashAlgo":"r:sha256","path":"/nix/store/wgwv7gs0ifdc0yicm14gwq46p2l9zv6c-xgcc-14.2.1.20250322-checksum","hash":"sha256:1df2a4f80q4ls2p4kgfm55dzza33n1vlld136ndadx7gypy69cg2"},"info":{"hashAlgo":"r:sha256","path":"/nix/store/zh05wawid9mp14si9cjxfa2vqrar4g7q-xgcc-14.2.1.20250322-info","hash":"sha256:1w81mbi5z6q0xzvddmi7552kcc08678c9nawdln4j43sqds4bls3"},"lib":{"hashAlgo":"r:sha256","path":"/nix/store/g9bgsmyzxvfcc44pl166iq4nkxpms0q7-xgcc-14.2.1.20250322-lib","hash":"sha256:00q202x8yybs755sc98jxhzwvvd6mv5rvxdrcbl0hi36hkw28fdw"},"libgcc":{"hashAlgo":"r:sha256","path":"/nix/store/fzs8l990h0wwndz7c1l5czbc73wb6zpl-xgcc-14.2.1.20250322-libgcc","hash":"sha256:0bin9ga6qv22nrkhlxdrb1pgl28v3psap1acw70ki14i1q3vv2rq"},"man":{"hashAlgo":"r:sha256","path":"/nix/store/mbipa4lx7829kvj7169i6q2srhx586w9-xgcc-14.2.1.20250322-man","hash":"sha256:0y44dnjhqqq6nns85zznx5kj06859qrg6mv9xzh29yv81zdhm26g"},"out":{"hashAlgo":"r:sha256","path":"/nix/store/7ppbz81sy39mapy79rxdgjhpr3yfnpn9-xgcc-14.2.1.20250322","hash":"sha256:16cg7wspfym0y9qhzx4lvmc9dgf6na5cwgpy8k9h6da0ixpcdif7"}}},"builder":{"rebuild_id":2952279676,"store_root":"/nix/store"}}.ljGvDEigb28D6MFMftVoVRbEuhVFuf_KvuB7Jp6r1PIhFW26iE-g1HVVBPquuViS_paWIZUkQrJTxakYEJ3dAA", "eyJhbGciOiJFZERTQSIsImNydiI6IkVkMjU1MTkiLCJkZXRhY2hIYXNoIjoibml4LWNhLXBhdGgiLCJraWQiOiJidWlsZGVyQTpiY2RhOGQ1NDQ3MGZlYTNiIiwidHlwIjoiSldUIiwidHlwZSI6ImxhdXQiLCJ2IjoiMiJ9.{"in":{"rdrv_json":"qevaNaAvuTU41q9eoyU2S3QmzhbLL-nrEJb1DJVc1SY","rdrv_aterm_ca":"ha8zq4zn676av20pb8xb5a1vjw01m8b8","debug":{"drv_name":"xgcc-14.2.1.20250322","rdrv_path":"/nix/store/ha8zq4zn676av20pb8xb5a1vjw01m8b8-xgcc-14.2.1.20250322.drv","rdrv_json_preimage":"{\"args\":[\"-e\",\"/nix/store/vj1c3wf9c11a0qs6p3ymfvrnsdgsdcbq-source-stdenv.sh\",\"/nix/store/shkw4qm9qcw5sc5n1k5jznc83ny02r39-default-builder.sh\"],\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"env\":{\"CPATH\":\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev/include\",\"EXTRA_FLAGS_FOR_TARGET\":\"\",\"EXTRA_LDFLAGS_FOR_TARGET\":\"\",\"LIBRARY_PATH\":\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1/lib\",\"NIX_HARDENING_ENABLE\":\"bindnow fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs\",\"NIX_LDFLAGS\":\"\",\"NIX_NO_SELF_RPATH\":\"1\",\"__structuredAttrs\":\"\",\"buildFlags\":\"\",\"buildInputs\":\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev /nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev /nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 /nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38 /nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper- /nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 /nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\",\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"checksum\":\"/1mwi8wx04p2sbg96n3j7n7qil7yrwl7qfg98dsyghqkjki9hwqam\",\"cmakeFlags\":\"\",\"configureFlags\":\"--with-gmp-include=/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev/include --with-gmp-lib=/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0/lib --with-mpfr-include=/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev/include --with-mpfr-lib=/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1/lib --with-mpc=/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 --with-native-system-header-dir=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles/include --with-build-sysroot=/ --with-gxx-include-dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/include/c++/14.2.1.20250322/ --program-prefix= --disable-lto --disable-libstdcxx-pch --without-included-gettext --with-system-zlib --enable-static --enable-languages=c,c++ --disable-multilib --enable-plugin --disable-libcc1 --with-isl=/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 --disable-bootstrap --with-native-system-header-dir=/include --with-build-sysroot=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles --disable-nls --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=x86_64-unknown-linux-gnu\",\"configurePlatforms\":\"build host target\",\"crossMingw\":\"\",\"depsBuildBuild\":\"/nix/store/xgwl1m1j2gs51ravzj2v43faipz394wr-bootstrap-stage-xgcc-gcc-wrapper-\",\"depsBuildBuildPropagated\":\"\",\"depsBuildTarget\":\"/nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper- /nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\",\"depsBuildTargetPropagated\":\"\",\"depsHostHost\":\"\",\"depsHostHostPropagated\":\"\",\"depsTargetTarget\":\"\",\"depsTargetTargetPropagated\":\"\",\"doCheck\":\"\",\"doInstallCheck\":\"\",\"dontDisableStatic\":\"1\",\"enableMultilib\":\"\",\"enableParallelBuilding\":\"1\",\"enableParallelChecking\":\"1\",\"enableParallelInstalling\":\"\",\"enableShared\":\"1\",\"hardeningDisable\":\"format pie stackclashprotection\",\"info\":\"/1q29kf1a0nccw70c0b8a1mg10jr7b5lvv5m7v3jwdffnsy6nvxyy\",\"lib\":\"/0sra2y18lr3h6j58qjm0w46yv36h1wjmilb09n8aimdpivdymscx\",\"libc_dev\":\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\",\"libgcc\":\"/1asphndcd5djmh2xzc48rkbp9rlipz6aav02xbka98hb4fkm03pr\",\"man\":\"/13w3w5jxr32cwlhkkhgz7w65fffzgv7fkd48zi7ncz9ghqzhnqpw\",\"mesonFlags\":\"\",\"name\":\"xgcc-14.2.1.20250322\",\"nativeBuildInputs\":\"/nix/store/qhclfh92z2ks5bkgwh4inggz0ck4flas-texinfo-7.1.1 /nix/store/dpxzrakf1jkcv9zhwaq7pl9lv6m5b0f4-which-2.23 /nix/store/an6324ywg1g27pm5whyag18yxagi6mn1-gettext-0.22.5 /nix/store/vv9qpib096sd3y5pyk35l4fgvm1is59p-perl-5.40.0 /nix/store/1kdp0xcclxb294rnpgiaigf6p4xp5jhi-flex-2.6.4\",\"noSysDirs\":\"1\",\"out\":\"/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9\",\"outputHashAlgo\":\"sha256\",\"outputHashMode\":\"recursive\",\"outputs\":\"out man info lib libgcc checksum\",\"patches\":\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch /nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch /nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch /nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch /nix/store/3cj8qm3xjz1g5f7qnnxlc95i9imkicbk-cfi_startproc-reorder-label-14-1.diff\",\"pname\":\"xgcc\",\"postConfigure\":\"# Avoid store paths when embedding ./configure flags into gcc.\\n# Mangled arguments are still useful when reporting bugs upstream.\\nsed -e \\\"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\\\{32\\\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\\\" -i Makefile\\n\",\"postInstall\":\"# Clean up our compatibility symlinks (see above)\\nfor link in \\\"${compatibilitySymlinks[@]}\\\"; do\\n  echo \\\"Removing compatibility symlink: $link\\\"\\n  rm -f \\\"$link\\\"\\ndone\\n\\n# Move target runtime libraries to lib output.\\n# For non-cross, they're in $out/lib; for cross, they're in $out/$targetConfig/lib.\\ntargetLibDir=\\\"${targetConfig+$targetConfig/}lib\\\"\\n\\nmoveToOutput \\\"$targetLibDir/lib*.so*\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dylib\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dll\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"share/gcc-*/python\\\" \\\"${!outputLib}\\\"\\n\\nif [ -z \\\"$enableShared\\\" ]; then\\n    moveToOutput \\\"$targetLibDir/lib*.a\\\" \\\"${!outputLib}\\\"\\nfi\\n\\nfor i in \\\"${!outputLib}\\\"/$targetLibDir/*.py; do\\n    substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\ndone\\n\\n# Multilib and cross can't exist at the same time, so just use lib64 here\\nif [ -n \\\"$enableMultilib\\\" ]; then\\n    moveToOutput \\\"lib64/lib*.so*\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dylib\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dll\\\" \\\"${!outputLib}\\\"\\n\\n    for i in \\\"${!outputLib}\\\"/lib64/*.py; do\\n        substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\n    done\\nfi\\n\\n# Remove `fixincl' to prevent a retained dependency on the\\n# previous gcc.\\nrm -rf $out/libexec/gcc/*/*/install-tools\\nrm -rf $out/lib/gcc/*/*/install-tools\\n\\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\\nrm -rf $out/bin/gccbug\\n\\n# Remove .la files, they're not adjusted for the makeCompatibilitySymlink magic,\\n# which confuses libtool and leads to weird linking errors.\\n# Removing the files just makes libtool link .so files directly, which is usually\\n# what we want anyway.\\nfind $out -name '*.la' -delete\\n\\nif type \\\"install_name_tool\\\"; then\\n    for i in \\\"${!outputLib}\\\"/lib/*.*.dylib \\\"${!outputLib}\\\"/lib/*.so.[0-9]; do\\n        install_name_tool -id \\\"$i\\\" \\\"$i\\\" || true\\n        for old_path in $(otool -L \\\"$i\\\" | grep \\\"$out\\\" | awk '{print $1}'); do\\n          new_path=`echo \\\"$old_path\\\" | sed \\\"s,$out,${!outputLib},\\\"`\\n          install_name_tool -change \\\"$old_path\\\" \\\"$new_path\\\" \\\"$i\\\" || true\\n        done\\n    done\\nfi\\n\\n# Get rid of some \\\"fixed\\\" header files\\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h,pthread.h}\\n\\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\\nfor i in $out/bin/*-gcc*; do\\n    if cmp -s $out/bin/gcc $i; then\\n        ln -sfn gcc $i\\n    fi\\ndone\\n\\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\\n    if cmp -s $out/bin/g++ $i; then\\n        ln -sfn g++ $i\\n    fi\\ndone\\n\\n# Two identical man pages are shipped (moving and compressing is done later)\\nfor i in \\\"$out\\\"/share/man/man1/*g++.1; do\\n    if test -e \\\"$i\\\"; then\\n        man_prefix=`echo \\\"$i\\\" | sed \\\"s,.*/\\\\(.*\\\\)g++.1,\\\\1,\\\"`\\n        ln -sf \\\"$man_prefix\\\"gcc.1 \\\"$i\\\"\\n    fi\\ndone\\n\",\"postInstallSaveChecksumPhase\":\"mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\\ncat > gcc/build/genchecksum <<\\\\EOF\\n#!/nix/store/pfcxrqa84b7x8ks68swl4166daxmswwq-bash-5.2p37/bin/bash\\n/nix/store/0fwq8v3mvdh4j3ii5d4ndjlxy0y89il6-nuke-references/bin/nuke-refs $@\\nfor INPUT in \\\"$@\\\"; do install -Dt $INPUT $checksum/inputs/; done\\nexec build/.genchecksum-wrapped $@\\nEOF\\nchmod +x gcc/build/genchecksum\\nrm gcc/*-checksum.*\\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\\n\",\"postPatch\":\"configureScripts=$(find . -name configure)\\nfor configureScript in $configureScripts; do\\n  patchShebangs $configureScript\\ndone\\n\\n# Make sure nixpkgs versioning match upstream one\\n# to ease version-based comparisons.\\ngcc_base_version=$(< gcc/BASE-VER)\\nif [[ 14.2.1 != $gcc_base_version ]]; then\\n  echo \\\"Please update 'version' variable:\\\"\\n  echo \\\"  Expected: '$gcc_base_version'\\\"\\n  echo \\\"  Actual: '14.2.1.20250322'\\\"\\n  exit 1\\nfi\\necho \\\"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\\\"\\nfor header in \\\"gcc/config/\\\"*-gnu.h \\\"gcc/config/\\\"*\\\"/\\\"*.h\\ndo\\n  grep -q _DYNAMIC_LINKER \\\"$header\\\" || continue\\n  echo \\\"  fixing $header...\\\"\\n  sed -i \\\"$header\\\" \\\\\\n      -e 's|define[[:blank:]]*\\\\([UCG]\\\\+\\\\)LIBC_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define \\\\1LIBC_DYNAMIC_LINKER\\\\2 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\3\\\"|g' \\\\\\n      -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define MUSL_DYNAMIC_LINKER\\\\1 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\2\\\"|g'\\n  done\\n\",\"preConfigure\":\"ln -sf /nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38/include/crypt.h libsanitizer/sanitizer_common/crypt.h\\nif test -n \\\"$newlibSrc\\\"; then\\n    tar xvf \\\"$newlibSrc\\\" -C ..\\n    ln -s ../newlib-*/newlib newlib\\n    # Patch to get armvt5el working:\\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\\nfi\\n\\n# Bug - they packaged zlib\\nif test -d \\\"zlib\\\"; then\\n    # This breaks the build without-headers, which should build only\\n    # the target libgcc as target libraries.\\n    # See 'configure:5370'\\n    rm -Rf zlib\\nfi\\n\\nif test -n \\\"$crossMingw\\\" -a -n \\\"$withoutTargetLibc\\\"; then\\n    mkdir -p ../mingw\\n    # --with-build-sysroot expects that:\\n    cp -R $libcCross/include ../mingw\\n    appendToVar configureFlags \\\"--with-build-sysroot=`pwd`/..\\\"\\nfi\\n\\n# Perform the build in a different directory.\\nmkdir ../build\\ncd ../build\\nconfigureScript=../$sourceRoot/configure\\n\",\"preFixup\":\"# Populate most delicated lib/ part of stripDebugList{,Target}\\nupdateDebugListPaths() {\\n  local oldOpts\\n  oldOpts=\\\"$(shopt -p nullglob)\\\" || true\\n  shopt -s nullglob\\n\\n  pushd $out\\n  local -ar outHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\\n  )\\n  local -ar outTargetFiles=(\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\\n  )\\n  popd\\n\\n  pushd $lib\\n  local -ar libHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n  )\\n  local -ar libTargetFiles=(\\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\\n  )\\n  popd\\n\\n  eval \\\"$oldOpts\\\"\\n\\n  stripDebugList=\\\"$stripDebugList ${outHostFiles[*]} ${libHostFiles[*]}\\\"\\n  stripDebugListTarget=\\\"$stripDebugListTarget ${outTargetFiles[*]} ${libTargetFiles[*]}\\\"\\n}\\nupdateDebugListPaths\\n\",\"preFixupLibGccPhase\":\"# move libgcc from lib to its own output (libgcc)\\nmkdir -p $libgcc/lib\\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\\npatchelf --set-rpath \\\"\\\" $libgcc/lib/libgcc_s.so.1\\n\",\"preFixupPhases\":\"preFixupLibGccPhase postInstallSaveChecksumPhase preFixupXgccPhase\",\"preFixupXgccPhase\":\"find $lib/lib/ -name \\\\*.so\\\\* -exec patchelf --shrink-rpath {} \\\\; || true\\n\",\"preInstall\":\"declare -ga compatibilitySymlinks=()\\n\\nmakeCompatibilitySymlink() {\\n  declare -a outputsToLink=(\\\"$out\\\")\\n\\n  if [ -n \\\"$lib\\\" ]; then\\n    outputsToLink+=(\\\"$lib\\\")\\n  fi\\n\\n  for output in \\\"${outputsToLink[@]}\\\"; do\\n    local linkTarget=\\\"$1\\\"\\n    local linkName=\\\"$output/$2\\\"\\n\\n    echo \\\"Creating compatibility symlink: $linkTarget -> $linkName\\\"\\n\\n    mkdir -p \\\"$(dirname \\\"$linkName\\\")\\\"\\n    ln -s \\\"$linkTarget\\\" \\\"$linkName\\\"\\n    compatibilitySymlinks+=(\\\"$linkName\\\")\\n  done\\n}\\nmakeCompatibilitySymlink lib lib32\\nmakeCompatibilitySymlink lib lib64\\n\",\"preUnpack\":\"oldOpts=\\\"$(shopt -po nounset)\\\" || true\\nset -euo pipefail\\n\\nexport NIX_FIXINC_DUMMY=\\\"$NIX_BUILD_TOP/dummy\\\"\\nmkdir \\\"$NIX_FIXINC_DUMMY\\\"\\n\\nif test \\\"$staticCompiler\\\" = \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-static\\\"\\nelif test \\\"${NIX_DONT_SET_RPATH-}\\\" != \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-Wl,-rpath,${!outputLib}/lib\\\"\\nelse\\n    EXTRA_LDFLAGS=\\\"\\\"\\nfi\\n\\n# GCC interprets empty paths as \\\".\\\", which we don't want.\\nif test -z \\\"${CPATH-}\\\"; then unset CPATH; fi\\nif test -z \\\"${LIBRARY_PATH-}\\\"; then unset LIBRARY_PATH; fi\\necho \\\"\\\\$CPATH is \\\\`${CPATH-}'\\\"\\necho \\\"\\\\$LIBRARY_PATH is \\\\`${LIBRARY_PATH-}'\\\"\\n\\nif test \\\"$noSysDirs\\\" = \\\"1\\\"; then\\n\\n    declare -g \\\\\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\\\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\\n\\n    # Extract flags from Bintools Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curBintools=\\\"NIX_BINTOOLS${post}\\\"\\n\\n        declare -a extraLDFlags=()\\n        if [[ -e \\\"${!curBintools}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra flags when linking to pass to the gcc\\n            # compilers being generated to make sure that they use our libc.\\n            extraLDFlags=($(< \\\"${!curBintools}/nix-support/libc-ldflags\\\") $(< \\\"${!curBintools}/nix-support/libc-ldflags-before\\\" || true))\\n            if [ -e ${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\\n                extraLDFlags=-dynamic-linker=$(< ${!curBintools}/nix-support/dynamic-linker)\\n            fi\\n\\n            # The path to the Libc binaries such as `crti.o'.\\n            libc_libdir=\\\"$(< \\\"${!curBintools}/nix-support/orig-libc\\\")/lib\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraLDFlags=(\\\"-L/usr/lib64\\\" \\\"-L/usr/lib\\\")\\n            libc_libdir=\\\"/usr/lib\\\"\\n        fi\\n        declare -a prefixExtraLDFlags=()\\n        prefixExtraLDFlags=(\\\"-L$libc_libdir\\\")\\n        nixDontSetRpathVar=NIX_DONT_SET_RPATH${post}\\n        if test \\\"${!nixDontSetRpathVar-}\\\" != \\\"1\\\"; then\\n            prefixExtraLDFlags+=(\\\"-rpath\\\" \\\"$libc_libdir\\\")\\n        fi\\n        extraLDFlags=(\\\"${prefixExtraLDFlags[@]}\\\" \\\"${extraLDFlags[@]}\\\")\\n        for i in \\\"${extraLDFlags[@]}\\\"; do\\n            declare -g EXTRA_LDFLAGS${post}+=\\\" -Wl,$i\\\"\\n        done\\n    done\\n\\n    # Extract flags from CC Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curCC=\\\"NIX_CC${post}\\\"\\n        curFIXINC=\\\"NIX_FIXINC_DUMMY${post}\\\"\\n\\n        declare -a extraFlags=()\\n        if [[ -e \\\"${!curCC}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra compiling flags to pass to the gcc compilers\\n            # being generated to make sure that they use our libc.\\n            extraFlags=($(< \\\"${!curCC}/nix-support/libc-crt1-cflags\\\") $(< \\\"${!curCC}/nix-support/libc-cflags\\\"))\\n\\n            # The path to the Libc headers\\n            libc_devdir=\\\"$(< \\\"${!curCC}/nix-support/orig-libc-dev\\\")\\\"\\n\\n            # Use *real* header files, otherwise a limits.h is generated that\\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\\n            # which breaks the build).\\n            declare -g NIX_FIXINC_DUMMY${post}=\\\"$libc_devdir/include\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraFlags=(\\\"-isystem\\\" \\\"/usr/include\\\")\\n            declare -g NIX_FIXINC_DUMMY${post}=/usr/include\\n        fi\\n\\n        extraFlags=(\\\"-I${!curFIXINC}\\\" \\\"${extraFlags[@]}\\\")\\n\\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\\n        # sure to explictly add them so that files compiled with the bootstrap\\n        # compiler are optimized and (optionally) contain debugging information\\n        # (info \\\"(gccinstall) Building\\\").\\n        if test -n \\\"${dontStrip-}\\\"; then\\n            extraFlags=(\\\"-O2\\\" \\\"-g\\\" \\\"${extraFlags[@]}\\\")\\n        else\\n            # Don't pass `-g' at all; this saves space while building.\\n            extraFlags=(\\\"-O2\\\" \\\"${extraFlags[@]}\\\")\\n        fi\\n\\n        declare -g EXTRA_FLAGS${post}=\\\"${extraFlags[*]}\\\"\\n    done\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        # host = target, so the flags are the same\\n        EXTRA_FLAGS_FOR_TARGET=\\\"$EXTRA_FLAGS\\\"\\n        EXTRA_LDFLAGS_FOR_TARGET=\\\"$EXTRA_LDFLAGS\\\"\\n    fi\\n\\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\\n    # the startfiles.\\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\\n    # for the startfiles.\\n    makeFlagsArray+=(\\n        \\\"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\\\"\\n\\n        \\\"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        #\\\"LDFLAGS=$EXTRA_LDFLAGS\\\"\\n        \\\"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\\\"\\n\\n        \\\"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n\\n        # It seems there is a bug in GCC 5\\n        #\\\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n        #\\\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n\\n        \\\"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n    )\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        makeFlagsArray+=(\\n            \\\"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n            \\\"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        )\\n    fi\\n\\n    if test \\\"$withoutTargetLibc\\\" == 1; then\\n        # We don't want the gcc build to assume there will be a libc providing\\n        # limits.h in this stage\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=false'\\n        )\\n    else\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=true'\\n        )\\n    fi\\nfi\\n\\neval \\\"$oldOpts\\\"\\n\",\"propagatedBuildInputs\":\"\",\"propagatedNativeBuildInputs\":\"\",\"setOutputFlags\":\"\",\"src\":\"/nix/store/4w2r6m8y6bw50jrrcxfyhi5ax8cpmal4-gcc-14-20250322.tar.xz\",\"staticCompiler\":\"\",\"stdenv\":\"/nix/store/6p3dx1cz2n14av99x1m26frf6vighrkq-bootstrap-stage-xgcc-stdenv-linux\",\"strictDeps\":\"\",\"stripDebugList\":\"bin libexec\",\"stripDebugListTarget\":\"x86_64-unknown-linux-gnu\",\"system\":\"x86_64-linux\",\"version\":\"14.2.1\",\"withoutTargetLibc\":\"\"},\"inputDrvs\":{},\"inputSrcs\":[\"/nix/store/0fwq8v3mvdh4j3ii5d4ndjlxy0y89il6-nuke-references\",\"/nix/store/1kdp0xcclxb294rnpgiaigf6p4xp5jhi-flex-2.6.4\",\"/nix/store/3cj8qm3xjz1g5f7qnnxlc95i9imkicbk-cfi_startproc-reorder-label-14-1.diff\",\"/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1\",\"/nix/store/4w2r6m8y6bw50jrrcxfyhi5ax8cpmal4-gcc-14-20250322.tar.xz\",\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\",\"/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev\",\"/nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"/nix/store/6p3dx1cz2n14av99x1m26frf6vighrkq-bootstrap-stage-xgcc-stdenv-linux\",\"/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1\",\"/nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch\",\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch\",\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1\",\"/nix/store/an6324ywg1g27pm5whyag18yxagi6mn1-gettext-0.22.5\",\"/nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\",\"/nix/store/dpxzrakf1jkcv9zhwaq7pl9lv6m5b0f4-which-2.23\",\"/nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper-\",\"/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools\",\"/nix/store/pfcxrqa84b7x8ks68swl4166daxmswwq-bash-5.2p37\",\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\",\"/nix/store/qhclfh92z2ks5bkgwh4inggz0ck4flas-texinfo-7.1.1\",\"/nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38\",\"/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0\",\"/nix/store/shkw4qm9qcw5sc5n1k5jznc83ny02r39-default-builder.sh\",\"/nix/store/vj1c3wf9c11a0qs6p3ymfvrnsdgsdcbq-source-stdenv.sh\",\"/nix/store/vv9qpib096sd3y5pyk35l4fgvm1is59p-perl-5.40.0\",\"/nix/store/xgwl1m1j2gs51ravzj2v43faipz394wr-bootstrap-stage-xgcc-gcc-wrapper-\",\"/nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch\",\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev\"],\"name\":\"xgcc-14.2.1.20250322\",\"outputs\":{\"checksum\":{\"hashAlgo\":\"r:sha256\"},\"info\":{\"hashAlgo\":\"r:sha256\"},\"lib\":{\"hashAlgo\":\"r:sha256\"},\"libgcc\":{\"hashAlgo\":\"r:sha256\"},\"man\":{\"hashAlgo\":\"r:sha256\"},\"out\":{\"hashAlgo\":\"r:sha256\"}},\"system\":\"x86_64-linux\"}","rdrv_computed_path":"/nix/store/ha8zq4zn676av20pb8xb5a1vjw01m8b8-xgcc-14.2.1.20250322.drv","rdrv_aterm_ca_preimage":"Derive([(\"checksum\",\"\",\"r:sha256\",\"\"),(\"info\",\"\",\"r:sha256\",\"\"),(\"lib\",\"\",\"r:sha256\",\"\"),(\"libgcc\",\"\",\"r:sha256\",\"\"),(\"man\",\"\",\"r:sha256\",\"\"),(\"out\",\"\",\"r:sha256\",\"\")],[],[\"/nix/store/0fwq8v3mvdh4j3ii5d4ndjlxy0y89il6-nuke-references\",\"/nix/store/1kdp0xcclxb294rnpgiaigf6p4xp5jhi-flex-2.6.4\",\"/nix/store/3cj8qm3xjz1g5f7qnnxlc95i9imkicbk-cfi_startproc-reorder-label-14-1.diff\",\"/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1\",\"/nix/store/4w2r6m8y6bw50jrrcxfyhi5ax8cpmal4-gcc-14-20250322.tar.xz\",\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\",\"/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev\",\"/nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"/nix/store/6p3dx1cz2n14av99x1m26frf6vighrkq-bootstrap-stage-xgcc-stdenv-linux\",\"/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1\",\"/nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch\",\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch\",\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1\",\"/nix/store/an6324ywg1g27pm5whyag18yxagi6mn1-gettext-0.22.5\",\"/nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\",\"/nix/store/dpxzrakf1jkcv9zhwaq7pl9lv6m5b0f4-which-2.23\",\"/nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper-\",\"/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools\",\"/nix/store/pfcxrqa84b7x8ks68swl4166daxmswwq-bash-5.2p37\",\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\",\"/nix/store/qhclfh92z2ks5bkgwh4inggz0ck4flas-texinfo-7.1.1\",\"/nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38\",\"/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0\",\"/nix/store/shkw4qm9qcw5sc5n1k5jznc83ny02r39-default-builder.sh\",\"/nix/store/vj1c3wf9c11a0qs6p3ymfvrnsdgsdcbq-source-stdenv.sh\",\"/nix/store/vv9qpib096sd3y5pyk35l4fgvm1is59p-perl-5.40.0\",\"/nix/store/xgwl1m1j2gs51ravzj2v43faipz394wr-bootstrap-stage-xgcc-gcc-wrapper-\",\"/nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch\",\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev\"],\"x86_64-linux\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",[\"-e\",\"/nix/store/vj1c3wf9c11a0qs6p3ymfvrnsdgsdcbq-source-stdenv.sh\",\"/nix/store/shkw4qm9qcw5sc5n1k5jznc83ny02r39-default-builder.sh\"],[(\"CPATH\",\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev/include\"),(\"EXTRA_FLAGS_FOR_TARGET\",\"\"),(\"EXTRA_LDFLAGS_FOR_TARGET\",\"\"),(\"LIBRARY_PATH\",\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1/lib\"),(\"NIX_HARDENING_ENABLE\",\"bindnow fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs\"),(\"NIX_LDFLAGS\",\"\"),(\"NIX_NO_SELF_RPATH\",\"1\"),(\"__structuredAttrs\",\"\"),(\"buildFlags\",\"\"),(\"buildInputs\",\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev /nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev /nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 /nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38 /nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper- /nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 /nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\"),(\"builder\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\"),(\"checksum\",\"/1mwi8wx04p2sbg96n3j7n7qil7yrwl7qfg98dsyghqkjki9hwqam\"),(\"cmakeFlags\",\"\"),(\"configureFlags\",\"--with-gmp-include=/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev/include --with-gmp-lib=/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0/lib --with-mpfr-include=/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev/include --with-mpfr-lib=/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1/lib --with-mpc=/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 --with-native-system-header-dir=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles/include --with-build-sysroot=/ --with-gxx-include-dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/include/c++/14.2.1.20250322/ --program-prefix= --disable-lto --disable-libstdcxx-pch --without-included-gettext --with-system-zlib --enable-static --enable-languages=c,c++ --disable-multilib --enable-plugin --disable-libcc1 --with-isl=/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 --disable-bootstrap --with-native-system-header-dir=/include --with-build-sysroot=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles --disable-nls --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=x86_64-unknown-linux-gnu\"),(\"configurePlatforms\",\"build host target\"),(\"crossMingw\",\"\"),(\"depsBuildBuild\",\"/nix/store/xgwl1m1j2gs51ravzj2v43faipz394wr-bootstrap-stage-xgcc-gcc-wrapper-\"),(\"depsBuildBuildPropagated\",\"\"),(\"depsBuildTarget\",\"/nix/store/j87rlazyfsgd5xg9ppz1jhmagxbk46mn-bootstrap-stage0-binutils-wrapper- /nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\"),(\"depsBuildTargetPropagated\",\"\"),(\"depsHostHost\",\"\"),(\"depsHostHostPropagated\",\"\"),(\"depsTargetTarget\",\"\"),(\"depsTargetTargetPropagated\",\"\"),(\"doCheck\",\"\"),(\"doInstallCheck\",\"\"),(\"dontDisableStatic\",\"1\"),(\"enableMultilib\",\"\"),(\"enableParallelBuilding\",\"1\"),(\"enableParallelChecking\",\"1\"),(\"enableParallelInstalling\",\"\"),(\"enableShared\",\"1\"),(\"hardeningDisable\",\"format pie stackclashprotection\"),(\"info\",\"/1q29kf1a0nccw70c0b8a1mg10jr7b5lvv5m7v3jwdffnsy6nvxyy\"),(\"lib\",\"/0sra2y18lr3h6j58qjm0w46yv36h1wjmilb09n8aimdpivdymscx\"),(\"libc_dev\",\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\"),(\"libgcc\",\"/1asphndcd5djmh2xzc48rkbp9rlipz6aav02xbka98hb4fkm03pr\"),(\"man\",\"/13w3w5jxr32cwlhkkhgz7w65fffzgv7fkd48zi7ncz9ghqzhnqpw\"),(\"mesonFlags\",\"\"),(\"name\",\"xgcc-14.2.1.20250322\"),(\"nativeBuildInputs\",\"/nix/store/qhclfh92z2ks5bkgwh4inggz0ck4flas-texinfo-7.1.1 /nix/store/dpxzrakf1jkcv9zhwaq7pl9lv6m5b0f4-which-2.23 /nix/store/an6324ywg1g27pm5whyag18yxagi6mn1-gettext-0.22.5 /nix/store/vv9qpib096sd3y5pyk35l4fgvm1is59p-perl-5.40.0 /nix/store/1kdp0xcclxb294rnpgiaigf6p4xp5jhi-flex-2.6.4\"),(\"noSysDirs\",\"1\"),(\"out\",\"/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9\"),(\"outputHashAlgo\",\"sha256\"),(\"outputHashMode\",\"recursive\"),(\"outputs\",\"out man info lib libgcc checksum\"),(\"patches\",\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch /nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch /nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch /nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch /nix/store/3cj8qm3xjz1g5f7qnnxlc95i9imkicbk-cfi_startproc-reorder-label-14-1.diff\"),(\"pname\",\"xgcc\"),(\"postConfigure\",\"# Avoid store paths when embedding ./configure flags into gcc.\\n# Mangled arguments are still useful when reporting bugs upstream.\\nsed -e \\\"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\\\{32\\\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\\\" -i Makefile\\n\"),(\"postInstall\",\"# Clean up our compatibility symlinks (see above)\\nfor link in \\\"${compatibilitySymlinks[@]}\\\"; do\\n  echo \\\"Removing compatibility symlink: $link\\\"\\n  rm -f \\\"$link\\\"\\ndone\\n\\n# Move target runtime libraries to lib output.\\n# For non-cross, they're in $out/lib; for cross, they're in $out/$targetConfig/lib.\\ntargetLibDir=\\\"${targetConfig+$targetConfig/}lib\\\"\\n\\nmoveToOutput \\\"$targetLibDir/lib*.so*\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dylib\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"$targetLibDir/lib*.dll\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"share/gcc-*/python\\\" \\\"${!outputLib}\\\"\\n\\nif [ -z \\\"$enableShared\\\" ]; then\\n    moveToOutput \\\"$targetLibDir/lib*.a\\\" \\\"${!outputLib}\\\"\\nfi\\n\\nfor i in \\\"${!outputLib}\\\"/$targetLibDir/*.py; do\\n    substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\ndone\\n\\n# Multilib and cross can't exist at the same time, so just use lib64 here\\nif [ -n \\\"$enableMultilib\\\" ]; then\\n    moveToOutput \\\"lib64/lib*.so*\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dylib\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"lib64/lib*.dll\\\" \\\"${!outputLib}\\\"\\n\\n    for i in \\\"${!outputLib}\\\"/lib64/*.py; do\\n        substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\n    done\\nfi\\n\\n# Remove `fixincl' to prevent a retained dependency on the\\n# previous gcc.\\nrm -rf $out/libexec/gcc/*/*/install-tools\\nrm -rf $out/lib/gcc/*/*/install-tools\\n\\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\\nrm -rf $out/bin/gccbug\\n\\n# Remove .la files, they're not adjusted for the makeCompatibilitySymlink magic,\\n# which confuses libtool and leads to weird linking errors.\\n# Removing the files just makes libtool link .so files directly, which is usually\\n# what we want anyway.\\nfind $out -name '*.la' -delete\\n\\nif type \\\"install_name_tool\\\"; then\\n    for i in \\\"${!outputLib}\\\"/lib/*.*.dylib \\\"${!outputLib}\\\"/lib/*.so.[0-9]; do\\n        install_name_tool -id \\\"$i\\\" \\\"$i\\\" || true\\n        for old_path in $(otool -L \\\"$i\\\" | grep \\\"$out\\\" | awk '{print $1}'); do\\n          new_path=`echo \\\"$old_path\\\" | sed \\\"s,$out,${!outputLib},\\\"`\\n          install_name_tool -change \\\"$old_path\\\" \\\"$new_path\\\" \\\"$i\\\" || true\\n        done\\n    done\\nfi\\n\\n# Get rid of some \\\"fixed\\\" header files\\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h,pthread.h}\\n\\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\\nfor i in $out/bin/*-gcc*; do\\n    if cmp -s $out/bin/gcc $i; then\\n        ln -sfn gcc $i\\n    fi\\ndone\\n\\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\\n    if cmp -s $out/bin/g++ $i; then\\n        ln -sfn g++ $i\\n    fi\\ndone\\n\\n# Two identical man pages are shipped (moving and compressing is done later)\\nfor i in \\\"$out\\\"/share/man/man1/*g++.1; do\\n    if test -e \\\"$i\\\"; then\\n        man_prefix=`echo \\\"$i\\\" | sed \\\"s,.*/\\\\(.*\\\\)g++.1,\\\\1,\\\"`\\n        ln -sf \\\"$man_prefix\\\"gcc.1 \\\"$i\\\"\\n    fi\\ndone\\n\"),(\"postInstallSaveChecksumPhase\",\"mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\\ncat > gcc/build/genchecksum <<\\\\EOF\\n#!/nix/store/pfcxrqa84b7x8ks68swl4166daxmswwq-bash-5.2p37/bin/bash\\n/nix/store/0fwq8v3mvdh4j3ii5d4ndjlxy0y89il6-nuke-references/bin/nuke-refs $@\\nfor INPUT in \\\"$@\\\"; do install -Dt $INPUT $checksum/inputs/; done\\nexec build/.genchecksum-wrapped $@\\nEOF\\nchmod +x gcc/build/genchecksum\\nrm gcc/*-checksum.*\\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\\n\"),(\"postPatch\",\"configureScripts=$(find . -name configure)\\nfor configureScript in $configureScripts; do\\n  patchShebangs $configureScript\\ndone\\n\\n# Make sure nixpkgs versioning match upstream one\\n# to ease version-based comparisons.\\ngcc_base_version=$(< gcc/BASE-VER)\\nif [[ 14.2.1 != $gcc_base_version ]]; then\\n  echo \\\"Please update 'version' variable:\\\"\\n  echo \\\"  Expected: '$gcc_base_version'\\\"\\n  echo \\\"  Actual: '14.2.1.20250322'\\\"\\n  exit 1\\nfi\\necho \\\"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\\\"\\nfor header in \\\"gcc/config/\\\"*-gnu.h \\\"gcc/config/\\\"*\\\"/\\\"*.h\\ndo\\n  grep -q _DYNAMIC_LINKER \\\"$header\\\" || continue\\n  echo \\\"  fixing $header...\\\"\\n  sed -i \\\"$header\\\" \\\\\\n      -e 's|define[[:blank:]]*\\\\([UCG]\\\\+\\\\)LIBC_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define \\\\1LIBC_DYNAMIC_LINKER\\\\2 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\3\\\"|g' \\\\\\n      -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define MUSL_DYNAMIC_LINKER\\\\1 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\2\\\"|g'\\n  done\\n\"),(\"preConfigure\",\"ln -sf /nix/store/rlbgnhlp25dyrmlsw49rwlf5d510r0jp-libxcrypt-4.4.38/include/crypt.h libsanitizer/sanitizer_common/crypt.h\\nif test -n \\\"$newlibSrc\\\"; then\\n    tar xvf \\\"$newlibSrc\\\" -C ..\\n    ln -s ../newlib-*/newlib newlib\\n    # Patch to get armvt5el working:\\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\\nfi\\n\\n# Bug - they packaged zlib\\nif test -d \\\"zlib\\\"; then\\n    # This breaks the build without-headers, which should build only\\n    # the target libgcc as target libraries.\\n    # See 'configure:5370'\\n    rm -Rf zlib\\nfi\\n\\nif test -n \\\"$crossMingw\\\" -a -n \\\"$withoutTargetLibc\\\"; then\\n    mkdir -p ../mingw\\n    # --with-build-sysroot expects that:\\n    cp -R $libcCross/include ../mingw\\n    appendToVar configureFlags \\\"--with-build-sysroot=`pwd`/..\\\"\\nfi\\n\\n# Perform the build in a different directory.\\nmkdir ../build\\ncd ../build\\nconfigureScript=../$sourceRoot/configure\\n\"),(\"preFixup\",\"# Populate most delicated lib/ part of stripDebugList{,Target}\\nupdateDebugListPaths() {\\n  local oldOpts\\n  oldOpts=\\\"$(shopt -p nullglob)\\\" || true\\n  shopt -s nullglob\\n\\n  pushd $out\\n  local -ar outHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\\n  )\\n  local -ar outTargetFiles=(\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\\n  )\\n  popd\\n\\n  pushd $lib\\n  local -ar libHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n  )\\n  local -ar libTargetFiles=(\\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\\n  )\\n  popd\\n\\n  eval \\\"$oldOpts\\\"\\n\\n  stripDebugList=\\\"$stripDebugList ${outHostFiles[*]} ${libHostFiles[*]}\\\"\\n  stripDebugListTarget=\\\"$stripDebugListTarget ${outTargetFiles[*]} ${libTargetFiles[*]}\\\"\\n}\\nupdateDebugListPaths\\n\"),(\"preFixupLibGccPhase\",\"# move libgcc from lib to its own output (libgcc)\\nmkdir -p $libgcc/lib\\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\\npatchelf --set-rpath \\\"\\\" $libgcc/lib/libgcc_s.so.1\\n\"),(\"preFixupPhases\",\"preFixupLibGccPhase postInstallSaveChecksumPhase preFixupXgccPhase\"),(\"preFixupXgccPhase\",\"find $lib/lib/ -name \\\\*.so\\\\* -exec patchelf --shrink-rpath {} \\\\; || true\\n\"),(\"preInstall\",\"declare -ga compatibilitySymlinks=()\\n\\nmakeCompatibilitySymlink() {\\n  declare -a outputsToLink=(\\\"$out\\\")\\n\\n  if [ -n \\\"$lib\\\" ]; then\\n    outputsToLink+=(\\\"$lib\\\")\\n  fi\\n\\n  for output in \\\"${outputsToLink[@]}\\\"; do\\n    local linkTarget=\\\"$1\\\"\\n    local linkName=\\\"$output/$2\\\"\\n\\n    echo \\\"Creating compatibility symlink: $linkTarget -> $linkName\\\"\\n\\n    mkdir -p \\\"$(dirname \\\"$linkName\\\")\\\"\\n    ln -s \\\"$linkTarget\\\" \\\"$linkName\\\"\\n    compatibilitySymlinks+=(\\\"$linkName\\\")\\n  done\\n}\\nmakeCompatibilitySymlink lib lib32\\nmakeCompatibilitySymlink lib lib64\\n\"),(\"preUnpack\",\"oldOpts=\\\"$(shopt -po nounset)\\\" || true\\nset -euo pipefail\\n\\nexport NIX_FIXINC_DUMMY=\\\"$NIX_BUILD_TOP/dummy\\\"\\nmkdir \\\"$NIX_FIXINC_DUMMY\\\"\\n\\nif test \\\"$staticCompiler\\\" = \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-static\\\"\\nelif test \\\"${NIX_DONT_SET_RPATH-}\\\" != \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-Wl,-rpath,${!outputLib}/lib\\\"\\nelse\\n    EXTRA_LDFLAGS=\\\"\\\"\\nfi\\n\\n# GCC interprets empty paths as \\\".\\\", which we don't want.\\nif test -z \\\"${CPATH-}\\\"; then unset CPATH; fi\\nif test -z \\\"${LIBRARY_PATH-}\\\"; then unset LIBRARY_PATH; fi\\necho \\\"\\\\$CPATH is \\\\`${CPATH-}'\\\"\\necho \\\"\\\\$LIBRARY_PATH is \\\\`${LIBRARY_PATH-}'\\\"\\n\\nif test \\\"$noSysDirs\\\" = \\\"1\\\"; then\\n\\n    declare -g \\\\\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\\\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\\n\\n    # Extract flags from Bintools Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curBintools=\\\"NIX_BINTOOLS${post}\\\"\\n\\n        declare -a extraLDFlags=()\\n        if [[ -e \\\"${!curBintools}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra flags when linking to pass to the gcc\\n            # compilers being generated to make sure that they use our libc.\\n            extraLDFlags=($(< \\\"${!curBintools}/nix-support/libc-ldflags\\\") $(< \\\"${!curBintools}/nix-support/libc-ldflags-before\\\" || true))\\n            if [ -e ${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\\n                extraLDFlags=-dynamic-linker=$(< ${!curBintools}/nix-support/dynamic-linker)\\n            fi\\n\\n            # The path to the Libc binaries such as `crti.o'.\\n            libc_libdir=\\\"$(< \\\"${!curBintools}/nix-support/orig-libc\\\")/lib\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraLDFlags=(\\\"-L/usr/lib64\\\" \\\"-L/usr/lib\\\")\\n            libc_libdir=\\\"/usr/lib\\\"\\n        fi\\n        declare -a prefixExtraLDFlags=()\\n        prefixExtraLDFlags=(\\\"-L$libc_libdir\\\")\\n        nixDontSetRpathVar=NIX_DONT_SET_RPATH${post}\\n        if test \\\"${!nixDontSetRpathVar-}\\\" != \\\"1\\\"; then\\n            prefixExtraLDFlags+=(\\\"-rpath\\\" \\\"$libc_libdir\\\")\\n        fi\\n        extraLDFlags=(\\\"${prefixExtraLDFlags[@]}\\\" \\\"${extraLDFlags[@]}\\\")\\n        for i in \\\"${extraLDFlags[@]}\\\"; do\\n            declare -g EXTRA_LDFLAGS${post}+=\\\" -Wl,$i\\\"\\n        done\\n    done\\n\\n    # Extract flags from CC Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curCC=\\\"NIX_CC${post}\\\"\\n        curFIXINC=\\\"NIX_FIXINC_DUMMY${post}\\\"\\n\\n        declare -a extraFlags=()\\n        if [[ -e \\\"${!curCC}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra compiling flags to pass to the gcc compilers\\n            # being generated to make sure that they use our libc.\\n            extraFlags=($(< \\\"${!curCC}/nix-support/libc-crt1-cflags\\\") $(< \\\"${!curCC}/nix-support/libc-cflags\\\"))\\n\\n            # The path to the Libc headers\\n            libc_devdir=\\\"$(< \\\"${!curCC}/nix-support/orig-libc-dev\\\")\\\"\\n\\n            # Use *real* header files, otherwise a limits.h is generated that\\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\\n            # which breaks the build).\\n            declare -g NIX_FIXINC_DUMMY${post}=\\\"$libc_devdir/include\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraFlags=(\\\"-isystem\\\" \\\"/usr/include\\\")\\n            declare -g NIX_FIXINC_DUMMY${post}=/usr/include\\n        fi\\n\\n        extraFlags=(\\\"-I${!curFIXINC}\\\" \\\"${extraFlags[@]}\\\")\\n\\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\\n        # sure to explictly add them so that files compiled with the bootstrap\\n        # compiler are optimized and (optionally) contain debugging information\\n        # (info \\\"(gccinstall) Building\\\").\\n        if test -n \\\"${dontStrip-}\\\"; then\\n            extraFlags=(\\\"-O2\\\" \\\"-g\\\" \\\"${extraFlags[@]}\\\")\\n        else\\n            # Don't pass `-g' at all; this saves space while building.\\n            extraFlags=(\\\"-O2\\\" \\\"${extraFlags[@]}\\\")\\n        fi\\n\\n        declare -g EXTRA_FLAGS${post}=\\\"${extraFlags[*]}\\\"\\n    done\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        # host = target, so the flags are the same\\n        EXTRA_FLAGS_FOR_TARGET=\\\"$EXTRA_FLAGS\\\"\\n        EXTRA_LDFLAGS_FOR_TARGET=\\\"$EXTRA_LDFLAGS\\\"\\n    fi\\n\\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\\n    # the startfiles.\\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\\n    # for the startfiles.\\n    makeFlagsArray+=(\\n        \\\"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\\\"\\n\\n        \\\"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        #\\\"LDFLAGS=$EXTRA_LDFLAGS\\\"\\n        \\\"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\\\"\\n\\n        \\\"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n\\n        # It seems there is a bug in GCC 5\\n        #\\\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n        #\\\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n\\n        \\\"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n    )\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        makeFlagsArray+=(\\n            \\\"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n            \\\"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        )\\n    fi\\n\\n    if test \\\"$withoutTargetLibc\\\" == 1; then\\n        # We don't want the gcc build to assume there will be a libc providing\\n        # limits.h in this stage\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=false'\\n        )\\n    else\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=true'\\n        )\\n    fi\\nfi\\n\\neval \\\"$oldOpts\\\"\\n\"),(\"propagatedBuildInputs\",\"\"),(\"propagatedNativeBuildInputs\",\"\"),(\"setOutputFlags\",\"\"),(\"src\",\"/nix/store/4w2r6m8y6bw50jrrcxfyhi5ax8cpmal4-gcc-14-20250322.tar.xz\"),(\"staticCompiler\",\"\"),(\"stdenv\",\"/nix/store/6p3dx1cz2n14av99x1m26frf6vighrkq-bootstrap-stage-xgcc-stdenv-linux\"),(\"strictDeps\",\"\"),(\"stripDebugList\",\"bin libexec\"),(\"stripDebugListTarget\",\"x86_64-unknown-linux-gnu\"),(\"system\",\"x86_64-linux\"),(\"version\",\"14.2.1\"),(\"withoutTargetLibc\",\"\")])"}},"out":{"castore-entry":{"checksum":"CiQSIJouZtnotxxzn2Q3Kuz5EXKCdx3q0W2-RQ3P9ZI4m-cyGAY","info":"CiQSIBmmlKg0BlTNB5ZJNoHfHHuzg3lMkLrldi07ETolTGuAGBY","lib":"CiQSIMJyGmbFotYRP8osN2Ob97z9m5UJs2Qw6d-zIsbs9SLSGFw","libgcc":"CiQSIFLqrVNduLLm1hX1LNqbsFovpfC202RGUHt1hZuXDdlOGAY","man":"CiQSIHeGofiej6WLXkxCrFib8GQ7Pw5RwaLkXeNG6aWeypkeGBo","out":"CiUSIMtea1vBTEYDbo1PWY7GyakPgSE95Cg_7WuEdixJZZwRGLAZ"},"nix":{"checksum":{"hashAlgo":"r:sha256","path":"/nix/store/wgwv7gs0ifdc0yicm14gwq46p2l9zv6c-xgcc-14.2.1.20250322-checksum","hash":"sha256:1df2a4f80q4ls2p4kgfm55dzza33n1vlld136ndadx7gypy69cg2"},"info":{"hashAlgo":"r:sha256","path":"/nix/store/zh05wawid9mp14si9cjxfa2vqrar4g7q-xgcc-14.2.1.20250322-info","hash":"sha256:1w81mbi5z6q0xzvddmi7552kcc08678c9nawdln4j43sqds4bls3"},"lib":{"hashAlgo":"r:sha256","path":"/nix/store/g9bgsmyzxvfcc44pl166iq4nkxpms0q7-xgcc-14.2.1.20250322-lib","hash":"sha256:00q202x8yybs755sc98jxhzwvvd6mv5rvxdrcbl0hi36hkw28fdw"},"libgcc":{"hashAlgo":"r:sha256","path":"/nix/store/fzs8l990h0wwndz7c1l5czbc73wb6zpl-xgcc-14.2.1.20250322-libgcc","hash":"sha256:0bin9ga6qv22nrkhlxdrb1pgl28v3psap1acw70ki14i1q3vv2rq"},"man":{"hashAlgo":"r:sha256","path":"/nix/store/mbipa4lx7829kvj7169i6q2srhx586w9-xgcc-14.2.1.20250322-man","hash":"sha256:0y44dnjhqqq6nns85zznx5kj06859qrg6mv9xzh29yv81zdhm26g"},"out":{"hashAlgo":"r:sha256","path":"/nix/store/7ppbz81sy39mapy79rxdgjhpr3yfnpn9-xgcc-14.2.1.20250322","hash":"sha256:16cg7wspfym0y9qhzx4lvmc9dgf6na5cwgpy8k9h6da0ixpcdif7"}}},"builder":{"rebuild_id":3954354609,"store_root":"/nix/store"}}.liLDOHpFmjVGRpXhhO57WWytHt8-buzxUHFuJhHT0K2uAck7lNTwgC2PyBiJfwQ1yWgNEPYYrXQNLlvDl_7iCw"]}