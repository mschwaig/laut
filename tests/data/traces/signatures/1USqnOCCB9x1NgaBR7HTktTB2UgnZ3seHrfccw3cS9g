{"signatures": ["eyJhbGciOiJFZERTQSIsImNydiI6IkVkMjU1MTkiLCJkZXRhY2hIYXNoIjoibml4LWNhLXBhdGgiLCJraWQiOiJidWlsZGVyQTpiY2RhOGQ1NDQ3MGZlYTNiIiwidHlwIjoiSldUIiwidHlwZSI6ImxhdXQiLCJ2IjoiMiJ9.{"in":{"rdrv_json":"1USqnOCCB9x1NgaBR7HTktTB2UgnZ3seHrfccw3cS9g","debug":{"rdrv_path":"/nix/store/r1azwq0acvzgxsb9wpxgk4a7k9ldsl93-xgcc-13.3.0.drv","rdrv_json_preimage":"{\"args\":[\"-e\",\"/nix/store/v6x3cs394jgqfbi0a42pam708flxaphh-default-builder.sh\"],\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"env\":{\"CPATH\":\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev/include\",\"EXTRA_FLAGS_FOR_TARGET\":\"\",\"EXTRA_LDFLAGS_FOR_TARGET\":\"\",\"LIBRARY_PATH\":\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1/lib\",\"NIX_HARDENING_ENABLE\":\"bindnow fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs\",\"NIX_LDFLAGS\":\"\",\"NIX_NO_SELF_RPATH\":\"1\",\"__structuredAttrs\":\"\",\"buildFlags\":\"\",\"buildInputs\":\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev /nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev /nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 /nix/store/xh0qg7llmg74b13zbvh1af6a5av4g8fd-libxcrypt-4.4.36 /nix/store/bnyyaql5yvcrfw42k9kd5d10c2f10mnp-bootstrap-stage0-binutils-wrapper- /nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 /nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\",\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"checksum\":\"/1mwi8wx04p2sbg96n3j7n7qil7yrwl7qfg98dsyghqkjki9hwqam\",\"cmakeFlags\":\"\",\"configureFlags\":\"--with-gmp-include=/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev/include --with-gmp-lib=/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0/lib --with-mpfr-include=/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev/include --with-mpfr-lib=/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1/lib --with-mpc=/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 --with-native-system-header-dir=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles/include --with-build-sysroot=/ --with-gxx-include-dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/include/c++/13.3.0/ --program-prefix= --disable-lto --disable-libstdcxx-pch --without-included-gettext --with-system-zlib --enable-static --enable-languages=c,c++ --disable-multilib --enable-plugin --disable-libcc1 --with-isl=/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 --disable-bootstrap --with-native-system-header-dir=/include --with-build-sysroot=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=x86_64-unknown-linux-gnu\",\"configurePlatforms\":\"build host target\",\"crossMingw\":\"\",\"depsBuildBuild\":\"/nix/store/w10dzrnqwh2m69ghd4r72n3g97xgkk16-bootstrap-stage-xgcc-gcc-wrapper-\",\"depsBuildBuildPropagated\":\"\",\"depsBuildTarget\":\"/nix/store/bnyyaql5yvcrfw42k9kd5d10c2f10mnp-bootstrap-stage0-binutils-wrapper- /nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\",\"depsBuildTargetPropagated\":\"\",\"depsHostHost\":\"\",\"depsHostHostPropagated\":\"\",\"depsTargetTarget\":\"\",\"depsTargetTargetPropagated\":\"\",\"doCheck\":\"\",\"doInstallCheck\":\"\",\"dontDisableStatic\":\"1\",\"enableMultilib\":\"\",\"enableParallelBuilding\":\"1\",\"enableParallelChecking\":\"1\",\"enableParallelInstalling\":\"\",\"enableShared\":\"1\",\"hardeningDisable\":\"format pie stackclashprotection\",\"info\":\"/1q29kf1a0nccw70c0b8a1mg10jr7b5lvv5m7v3jwdffnsy6nvxyy\",\"lib\":\"/0sra2y18lr3h6j58qjm0w46yv36h1wjmilb09n8aimdpivdymscx\",\"libc_dev\":\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\",\"libgcc\":\"/1asphndcd5djmh2xzc48rkbp9rlipz6aav02xbka98hb4fkm03pr\",\"man\":\"/13w3w5jxr32cwlhkkhgz7w65fffzgv7fkd48zi7ncz9ghqzhnqpw\",\"mesonFlags\":\"\",\"name\":\"xgcc-13.3.0\",\"nativeBuildInputs\":\"/nix/store/8nrmm2ack2hb6xf02pn7rbg7m8xbd1wg-texinfo-7.1.1 /nix/store/6p5bxw3lnld2515w20vkp1vra4vfls7z-which-2.21 /nix/store/m6csqz0q26zj97sc81bk2nfa3vva10wp-gettext-0.21.1 /nix/store/m095cscc0jh869q3yz0zw2k48fwahbg2-perl-5.40.0\",\"noSysDirs\":\"1\",\"out\":\"/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9\",\"outputHashAlgo\":\"sha256\",\"outputHashMode\":\"recursive\",\"outputs\":\"out man info lib libgcc checksum\",\"patches\":\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch /nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch /nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch /nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"pname\":\"xgcc\",\"postConfigure\":\"# Avoid store paths when embedding ./configure flags into gcc.\\n# Mangled arguments are still useful when reporting bugs upstream.\\nsed -e \\\"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\\\{32\\\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\\\" -i Makefile\\n\",\"postInstall\":\"# Move runtime libraries to lib output.\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.so*\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.la\\\"  \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dylib\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dll\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"share/gcc-*/python\\\" \\\"${!outputLib}\\\"\\n\\nif [ -z \\\"$enableShared\\\" ]; then\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.a\\\" \\\"${!outputLib}\\\"\\nfi\\n\\nfor i in \\\"${!outputLib}/${targetConfig}\\\"/lib/*.{la,py}; do\\n    substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\ndone\\n\\nif [ -n \\\"$enableMultilib\\\" ]; then\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.so*\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.la\\\"  \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dylib\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dll\\\" \\\"${!outputLib}\\\"\\n\\n    for i in \\\"${!outputLib}/${targetConfig}\\\"/lib64/*.{la,py}; do\\n        substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\n    done\\nfi\\n\\n# Remove `fixincl' to prevent a retained dependency on the\\n# previous gcc.\\nrm -rf $out/libexec/gcc/*/*/install-tools\\nrm -rf $out/lib/gcc/*/*/install-tools\\n\\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\\nrm -rf $out/bin/gccbug\\n\\nif type \\\"install_name_tool\\\"; then\\n    for i in \\\"${!outputLib}\\\"/lib/*.*.dylib \\\"${!outputLib}\\\"/lib/*.so.[0-9]; do\\n        install_name_tool -id \\\"$i\\\" \\\"$i\\\" || true\\n        for old_path in $(otool -L \\\"$i\\\" | grep \\\"$out\\\" | awk '{print $1}'); do\\n          new_path=`echo \\\"$old_path\\\" | sed \\\"s,$out,${!outputLib},\\\"`\\n          install_name_tool -change \\\"$old_path\\\" \\\"$new_path\\\" \\\"$i\\\" || true\\n        done\\n    done\\nfi\\n\\n# Get rid of some \\\"fixed\\\" header files\\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h,pthread.h}\\n\\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\\nfor i in $out/bin/*-gcc*; do\\n    if cmp -s $out/bin/gcc $i; then\\n        ln -sfn gcc $i\\n    fi\\ndone\\n\\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\\n    if cmp -s $out/bin/g++ $i; then\\n        ln -sfn g++ $i\\n    fi\\ndone\\n\\n# Two identical man pages are shipped (moving and compressing is done later)\\nfor i in \\\"$out\\\"/share/man/man1/*g++.1; do\\n    if test -e \\\"$i\\\"; then\\n        man_prefix=`echo \\\"$i\\\" | sed \\\"s,.*/\\\\(.*\\\\)g++.1,\\\\1,\\\"`\\n        ln -sf \\\"$man_prefix\\\"gcc.1 \\\"$i\\\"\\n    fi\\ndone\\n\",\"postInstallSaveChecksumPhase\":\"mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\\ncat > gcc/build/genchecksum <<\\\\EOF\\n#!/nix/store/fa4zdhjdin82yncj3fs72i34x2iqjgww-bash-5.2p37/bin/bash\\n/nix/store/nida6lp7k1g5ln34yhzbi15kjp4bbsvd-nuke-references/bin/nuke-refs $@\\nfor INPUT in \\\"$@\\\"; do install -Dt $INPUT $checksum/inputs/; done\\nexec build/.genchecksum-wrapped $@\\nEOF\\nchmod +x gcc/build/genchecksum\\nrm gcc/*-checksum.*\\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\\n\",\"postPatch\":\"configureScripts=$(find . -name configure)\\nfor configureScript in $configureScripts; do\\n  patchShebangs $configureScript\\ndone\\necho \\\"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\\\"\\nfor header in \\\"gcc/config/\\\"*-gnu.h \\\"gcc/config/\\\"*\\\"/\\\"*.h\\ndo\\n  grep -q _DYNAMIC_LINKER \\\"$header\\\" || continue\\n  echo \\\"  fixing $header...\\\"\\n  sed -i \\\"$header\\\" \\\\\\n      -e 's|define[[:blank:]]*\\\\([UCG]\\\\+\\\\)LIBC_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define \\\\1LIBC_DYNAMIC_LINKER\\\\2 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\3\\\"|g' \\\\\\n      -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define MUSL_DYNAMIC_LINKER\\\\1 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\2\\\"|g'\\n  done\\n\",\"preConfigure\":\"ln -sf /nix/store/xh0qg7llmg74b13zbvh1af6a5av4g8fd-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\\nif test -n \\\"$newlibSrc\\\"; then\\n    tar xvf \\\"$newlibSrc\\\" -C ..\\n    ln -s ../newlib-*/newlib newlib\\n    # Patch to get armvt5el working:\\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\\nfi\\n\\n# Bug - they packaged zlib\\nif test -d \\\"zlib\\\"; then\\n    # This breaks the build without-headers, which should build only\\n    # the target libgcc as target libraries.\\n    # See 'configure:5370'\\n    rm -Rf zlib\\nfi\\n\\nif test -n \\\"$crossMingw\\\" -a -n \\\"$withoutTargetLibc\\\"; then\\n    mkdir -p ../mingw\\n    # --with-build-sysroot expects that:\\n    cp -R $libcCross/include ../mingw\\n    configureFlags=\\\"$configureFlags --with-build-sysroot=`pwd`/..\\\"\\nfi\\n\\n# Perform the build in a different directory.\\nmkdir ../build\\ncd ../build\\nconfigureScript=../$sourceRoot/configure\\n\",\"preFixup\":\"# Populate most delicated lib/ part of stripDebugList{,Target}\\nupdateDebugListPaths() {\\n  local oldOpts\\n  oldOpts=\\\"$(shopt -p nullglob)\\\" || true\\n  shopt -s nullglob\\n\\n  pushd $out\\n  local -ar outHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\\n  )\\n  local -ar outTargetFiles=(\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\\n  )\\n  popd\\n\\n  pushd $lib\\n  local -ar libHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n  )\\n  local -ar libTargetFiles=(\\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\\n  )\\n  popd\\n\\n  eval \\\"$oldOpts\\\"\\n\\n  stripDebugList=\\\"$stripDebugList ${outHostFiles[*]} ${libHostFiles[*]}\\\"\\n  stripDebugListTarget=\\\"$stripDebugListTarget ${outTargetFiles[*]} ${libTargetFiles[*]}\\\"\\n}\\nupdateDebugListPaths\\n\",\"preFixupLibGccPhase\":\"# move libgcc from lib to its own output (libgcc)\\nmkdir -p $libgcc/lib\\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\\npatchelf --set-rpath \\\"\\\" $libgcc/lib/libgcc_s.so.1\\n\",\"preFixupPhases\":\"preFixupLibGccPhase postInstallSaveChecksumPhase preFixupXgccPhase\",\"preFixupXgccPhase\":\"find $lib/lib/ -name \\\\*.so\\\\* -exec patchelf --shrink-rpath {} \\\\; || true\\n\",\"preInstall\":\"mkdir -p \\\"$out/${targetConfig}/lib\\\"\\nmkdir -p \\\"${!outputLib}/${targetConfig}/lib\\\"\\nln -s lib \\\"$out/${targetConfig}/lib64\\\"\\nln -s lib \\\"${!outputLib}/${targetConfig}/lib64\\\"\\n\",\"preUnpack\":\"oldOpts=\\\"$(shopt -po nounset)\\\" || true\\nset -euo pipefail\\n\\nexport NIX_FIXINC_DUMMY=\\\"$NIX_BUILD_TOP/dummy\\\"\\nmkdir \\\"$NIX_FIXINC_DUMMY\\\"\\n\\nif test \\\"$staticCompiler\\\" = \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-static\\\"\\nelif test \\\"${NIX_DONT_SET_RPATH-}\\\" != \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-Wl,-rpath,${!outputLib}/lib\\\"\\nelse\\n    EXTRA_LDFLAGS=\\\"\\\"\\nfi\\n\\n# GCC interprets empty paths as \\\".\\\", which we don't want.\\nif test -z \\\"${CPATH-}\\\"; then unset CPATH; fi\\nif test -z \\\"${LIBRARY_PATH-}\\\"; then unset LIBRARY_PATH; fi\\necho \\\"\\\\$CPATH is \\\\`${CPATH-}'\\\"\\necho \\\"\\\\$LIBRARY_PATH is \\\\`${LIBRARY_PATH-}'\\\"\\n\\nif test \\\"$noSysDirs\\\" = \\\"1\\\"; then\\n\\n    declare -g \\\\\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\\\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\\n\\n    # Extract flags from Bintools Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curBintools=\\\"NIX_BINTOOLS${post}\\\"\\n\\n        declare -a extraLDFlags=()\\n        if [[ -e \\\"${!curBintools}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra flags when linking to pass to the gcc\\n            # compilers being generated to make sure that they use our libc.\\n            extraLDFlags=($(< \\\"${!curBintools}/nix-support/libc-ldflags\\\") $(< \\\"${!curBintools}/nix-support/libc-ldflags-before\\\" || true))\\n            if [ -e ${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\\n                extraLDFlags=-dynamic-linker=$(< ${!curBintools}/nix-support/dynamic-linker)\\n            fi\\n\\n            # The path to the Libc binaries such as `crti.o'.\\n            libc_libdir=\\\"$(< \\\"${!curBintools}/nix-support/orig-libc\\\")/lib\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraLDFlags=(\\\"-L/usr/lib64\\\" \\\"-L/usr/lib\\\")\\n            libc_libdir=\\\"/usr/lib\\\"\\n        fi\\n        declare -a prefixExtraLDFlags=()\\n        prefixExtraLDFlags=(\\\"-L$libc_libdir\\\")\\n        nixDontSetRpathVar=NIX_DONT_SET_RPATH${post}\\n        if test \\\"${!nixDontSetRpathVar-}\\\" != \\\"1\\\"; then\\n            prefixExtraLDFlags+=(\\\"-rpath\\\" \\\"$libc_libdir\\\")\\n        fi\\n        extraLDFlags=(\\\"${prefixExtraLDFlags[@]}\\\" \\\"${extraLDFlags[@]}\\\")\\n        for i in \\\"${extraLDFlags[@]}\\\"; do\\n            declare -g EXTRA_LDFLAGS${post}+=\\\" -Wl,$i\\\"\\n        done\\n    done\\n\\n    # Extract flags from CC Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curCC=\\\"NIX_CC${post}\\\"\\n        curFIXINC=\\\"NIX_FIXINC_DUMMY${post}\\\"\\n\\n        declare -a extraFlags=()\\n        if [[ -e \\\"${!curCC}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra compiling flags to pass to the gcc compilers\\n            # being generated to make sure that they use our libc.\\n            extraFlags=($(< \\\"${!curCC}/nix-support/libc-crt1-cflags\\\") $(< \\\"${!curCC}/nix-support/libc-cflags\\\"))\\n\\n            # The path to the Libc headers\\n            libc_devdir=\\\"$(< \\\"${!curCC}/nix-support/orig-libc-dev\\\")\\\"\\n\\n            # Use *real* header files, otherwise a limits.h is generated that\\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\\n            # which breaks the build).\\n            declare -g NIX_FIXINC_DUMMY${post}=\\\"$libc_devdir/include\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraFlags=(\\\"-isystem\\\" \\\"/usr/include\\\")\\n            declare -g NIX_FIXINC_DUMMY${post}=/usr/include\\n        fi\\n\\n        extraFlags=(\\\"-I${!curFIXINC}\\\" \\\"${extraFlags[@]}\\\")\\n\\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\\n        # sure to explictly add them so that files compiled with the bootstrap\\n        # compiler are optimized and (optionally) contain debugging information\\n        # (info \\\"(gccinstall) Building\\\").\\n        if test -n \\\"${dontStrip-}\\\"; then\\n            extraFlags=(\\\"-O2\\\" \\\"-g\\\" \\\"${extraFlags[@]}\\\")\\n        else\\n            # Don't pass `-g' at all; this saves space while building.\\n            extraFlags=(\\\"-O2\\\" \\\"${extraFlags[@]}\\\")\\n        fi\\n\\n        declare -g EXTRA_FLAGS${post}=\\\"${extraFlags[*]}\\\"\\n    done\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        # host = target, so the flags are the same\\n        EXTRA_FLAGS_FOR_TARGET=\\\"$EXTRA_FLAGS\\\"\\n        EXTRA_LDFLAGS_FOR_TARGET=\\\"$EXTRA_LDFLAGS\\\"\\n    fi\\n\\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\\n    # the startfiles.\\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\\n    # for the startfiles.\\n    makeFlagsArray+=(\\n        \\\"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\\\"\\n\\n        \\\"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        #\\\"LDFLAGS=$EXTRA_LDFLAGS\\\"\\n        \\\"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\\\"\\n\\n        \\\"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n\\n        # It seems there is a bug in GCC 5\\n        #\\\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n        #\\\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n\\n        \\\"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n    )\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        makeFlagsArray+=(\\n            \\\"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n            \\\"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        )\\n    fi\\n\\n    if test \\\"$withoutTargetLibc\\\" == 1; then\\n        # We don't want the gcc build to assume there will be a libc providing\\n        # limits.h in this stage\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=false'\\n        )\\n    else\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=true'\\n        )\\n    fi\\nfi\\n\\neval \\\"$oldOpts\\\"\\n\",\"propagatedBuildInputs\":\"\",\"propagatedNativeBuildInputs\":\"\",\"setOutputFlags\":\"\",\"src\":\"/nix/store/sn5d80xj6k2p2bkzfpniz4rkv7j2akh9-gcc-13.3.0.tar.xz\",\"staticCompiler\":\"\",\"stdenv\":\"/nix/store/0ynsk23yj75gn60yhlmczs3y7ynb2sgs-bootstrap-stage-xgcc-stdenv-linux\",\"strictDeps\":\"\",\"stripDebugList\":\"bin libexec\",\"stripDebugListTarget\":\"x86_64-unknown-linux-gnu\",\"system\":\"x86_64-linux\",\"version\":\"13.3.0\",\"withoutTargetLibc\":\"\"},\"inputDrvs\":{},\"inputSrcs\":[\"/nix/store/0ynsk23yj75gn60yhlmczs3y7ynb2sgs-bootstrap-stage-xgcc-stdenv-linux\",\"/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1\",\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\",\"/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev\",\"/nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"/nix/store/6p5bxw3lnld2515w20vkp1vra4vfls7z-which-2.21\",\"/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1\",\"/nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch\",\"/nix/store/8nrmm2ack2hb6xf02pn7rbg7m8xbd1wg-texinfo-7.1.1\",\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch\",\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1\",\"/nix/store/bnyyaql5yvcrfw42k9kd5d10c2f10mnp-bootstrap-stage0-binutils-wrapper-\",\"/nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\",\"/nix/store/fa4zdhjdin82yncj3fs72i34x2iqjgww-bash-5.2p37\",\"/nix/store/m095cscc0jh869q3yz0zw2k48fwahbg2-perl-5.40.0\",\"/nix/store/m6csqz0q26zj97sc81bk2nfa3vva10wp-gettext-0.21.1\",\"/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools\",\"/nix/store/nida6lp7k1g5ln34yhzbi15kjp4bbsvd-nuke-references\",\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\",\"/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0\",\"/nix/store/sn5d80xj6k2p2bkzfpniz4rkv7j2akh9-gcc-13.3.0.tar.xz\",\"/nix/store/v6x3cs394jgqfbi0a42pam708flxaphh-default-builder.sh\",\"/nix/store/w10dzrnqwh2m69ghd4r72n3g97xgkk16-bootstrap-stage-xgcc-gcc-wrapper-\",\"/nix/store/xh0qg7llmg74b13zbvh1af6a5av4g8fd-libxcrypt-4.4.36\",\"/nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch\",\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev\"],\"name\":\"xgcc-13.3.0\",\"outputs\":{\"checksum\":{\"hashAlgo\":\"r:sha256\"},\"info\":{\"hashAlgo\":\"r:sha256\"},\"lib\":{\"hashAlgo\":\"r:sha256\"},\"libgcc\":{\"hashAlgo\":\"r:sha256\"},\"man\":{\"hashAlgo\":\"r:sha256\"},\"out\":{\"hashAlgo\":\"r:sha256\"}},\"system\":\"x86_64-linux\"}"}},"out":{"nix":{"checksum":{"hashAlgo":"r:sha256","path":"/nix/store/prq5wh7r97k4p1a9cd4yw4v9fr2wqbdp-xgcc-13.3.0-checksum","hash":"sha256:0x48wxg5b1c1k4wlm4gizb2prrw5wnv15xh8df845yrlgfs12ybj"},"info":{"hashAlgo":"r:sha256","path":"/nix/store/pm8fq8k090mhccbb1z745c82x52crrir-xgcc-13.3.0-info","hash":"sha256:139633vb5d7mlv31mwfqk2akdki3m88qqzc71ngcyjk05xn02ip5"},"lib":{"hashAlgo":"r:sha256","path":"/nix/store/lirkgmhrp2j3prr90pagxc0vm5k44h7g-xgcc-13.3.0-lib","hash":"sha256:1gc21xry44bivs8lzd2mbkwqgz3iy847gylr5ialmxzrniqql4ab"},"libgcc":{"hashAlgo":"r:sha256","path":"/nix/store/pzfdk7m5skpv89nkd8mr5h6sb6j3vhs3-xgcc-13.3.0-libgcc","hash":"sha256:0b5w3ndi129126vdsq9924fbfgnmxd7597jihf95qaqlnv7cr9hb"},"man":{"hashAlgo":"r:sha256","path":"/nix/store/kgcm0i4agyd3kkpb0wfrrxy7n7ccm6p0-xgcc-13.3.0-man","hash":"sha256:0sszrd6mhym5dzr5lsgv63mi58ccd8n5np6ja5q0x2xjdg8dckkc"},"out":{"hashAlgo":"r:sha256","path":"/nix/store/5hqv8gagj9p5h6x1s2zjvrn11zp8ch0i-xgcc-13.3.0","hash":"sha256:1g8frag53f969vx0h3iadci0fm07vamzykxk3qvlxar93f3s0x5q"}}},"builder":{"rebuild_id":948697111}}.kKdElSaDs3ptPhQDLeIJljChM1CIRnEMokxXinmFMqU-uTqHnAIrfzGuD46dXWhEi-wYZXIhhRjqnGeXI6pECw", "eyJhbGciOiJFZERTQSIsImNydiI6IkVkMjU1MTkiLCJkZXRhY2hIYXNoIjoibml4LWNhLXBhdGgiLCJraWQiOiJidWlsZGVyQTpiY2RhOGQ1NDQ3MGZlYTNiIiwidHlwIjoiSldUIiwidHlwZSI6ImxhdXQiLCJ2IjoiMiJ9.{"in":{"rdrv_json":"1USqnOCCB9x1NgaBR7HTktTB2UgnZ3seHrfccw3cS9g","debug":{"rdrv_path":"/nix/store/r1azwq0acvzgxsb9wpxgk4a7k9ldsl93-xgcc-13.3.0.drv","rdrv_json_preimage":"{\"args\":[\"-e\",\"/nix/store/v6x3cs394jgqfbi0a42pam708flxaphh-default-builder.sh\"],\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"env\":{\"CPATH\":\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev/include\",\"EXTRA_FLAGS_FOR_TARGET\":\"\",\"EXTRA_LDFLAGS_FOR_TARGET\":\"\",\"LIBRARY_PATH\":\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1/lib\",\"NIX_HARDENING_ENABLE\":\"bindnow fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs\",\"NIX_LDFLAGS\":\"\",\"NIX_NO_SELF_RPATH\":\"1\",\"__structuredAttrs\":\"\",\"buildFlags\":\"\",\"buildInputs\":\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev /nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev /nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 /nix/store/xh0qg7llmg74b13zbvh1af6a5av4g8fd-libxcrypt-4.4.36 /nix/store/bnyyaql5yvcrfw42k9kd5d10c2f10mnp-bootstrap-stage0-binutils-wrapper- /nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 /nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\",\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"checksum\":\"/1mwi8wx04p2sbg96n3j7n7qil7yrwl7qfg98dsyghqkjki9hwqam\",\"cmakeFlags\":\"\",\"configureFlags\":\"--with-gmp-include=/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev/include --with-gmp-lib=/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0/lib --with-mpfr-include=/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev/include --with-mpfr-lib=/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1/lib --with-mpc=/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1 --with-native-system-header-dir=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles/include --with-build-sysroot=/ --with-gxx-include-dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/include/c++/13.3.0/ --program-prefix= --disable-lto --disable-libstdcxx-pch --without-included-gettext --with-system-zlib --enable-static --enable-languages=c,c++ --disable-multilib --enable-plugin --disable-libcc1 --with-isl=/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20 --disable-bootstrap --with-native-system-header-dir=/include --with-build-sysroot=/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=x86_64-unknown-linux-gnu\",\"configurePlatforms\":\"build host target\",\"crossMingw\":\"\",\"depsBuildBuild\":\"/nix/store/w10dzrnqwh2m69ghd4r72n3g97xgkk16-bootstrap-stage-xgcc-gcc-wrapper-\",\"depsBuildBuildPropagated\":\"\",\"depsBuildTarget\":\"/nix/store/bnyyaql5yvcrfw42k9kd5d10c2f10mnp-bootstrap-stage0-binutils-wrapper- /nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\",\"depsBuildTargetPropagated\":\"\",\"depsHostHost\":\"\",\"depsHostHostPropagated\":\"\",\"depsTargetTarget\":\"\",\"depsTargetTargetPropagated\":\"\",\"doCheck\":\"\",\"doInstallCheck\":\"\",\"dontDisableStatic\":\"1\",\"enableMultilib\":\"\",\"enableParallelBuilding\":\"1\",\"enableParallelChecking\":\"1\",\"enableParallelInstalling\":\"\",\"enableShared\":\"1\",\"hardeningDisable\":\"format pie stackclashprotection\",\"info\":\"/1q29kf1a0nccw70c0b8a1mg10jr7b5lvv5m7v3jwdffnsy6nvxyy\",\"lib\":\"/0sra2y18lr3h6j58qjm0w46yv36h1wjmilb09n8aimdpivdymscx\",\"libc_dev\":\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\",\"libgcc\":\"/1asphndcd5djmh2xzc48rkbp9rlipz6aav02xbka98hb4fkm03pr\",\"man\":\"/13w3w5jxr32cwlhkkhgz7w65fffzgv7fkd48zi7ncz9ghqzhnqpw\",\"mesonFlags\":\"\",\"name\":\"xgcc-13.3.0\",\"nativeBuildInputs\":\"/nix/store/8nrmm2ack2hb6xf02pn7rbg7m8xbd1wg-texinfo-7.1.1 /nix/store/6p5bxw3lnld2515w20vkp1vra4vfls7z-which-2.21 /nix/store/m6csqz0q26zj97sc81bk2nfa3vva10wp-gettext-0.21.1 /nix/store/m095cscc0jh869q3yz0zw2k48fwahbg2-perl-5.40.0\",\"noSysDirs\":\"1\",\"out\":\"/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9\",\"outputHashAlgo\":\"sha256\",\"outputHashMode\":\"recursive\",\"outputs\":\"out man info lib libgcc checksum\",\"patches\":\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch /nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch /nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch /nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"pname\":\"xgcc\",\"postConfigure\":\"# Avoid store paths when embedding ./configure flags into gcc.\\n# Mangled arguments are still useful when reporting bugs upstream.\\nsed -e \\\"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\\\{32\\\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\\\" -i Makefile\\n\",\"postInstall\":\"# Move runtime libraries to lib output.\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.so*\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.la\\\"  \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dylib\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dll\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"share/gcc-*/python\\\" \\\"${!outputLib}\\\"\\n\\nif [ -z \\\"$enableShared\\\" ]; then\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.a\\\" \\\"${!outputLib}\\\"\\nfi\\n\\nfor i in \\\"${!outputLib}/${targetConfig}\\\"/lib/*.{la,py}; do\\n    substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\ndone\\n\\nif [ -n \\\"$enableMultilib\\\" ]; then\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.so*\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.la\\\"  \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dylib\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dll\\\" \\\"${!outputLib}\\\"\\n\\n    for i in \\\"${!outputLib}/${targetConfig}\\\"/lib64/*.{la,py}; do\\n        substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\n    done\\nfi\\n\\n# Remove `fixincl' to prevent a retained dependency on the\\n# previous gcc.\\nrm -rf $out/libexec/gcc/*/*/install-tools\\nrm -rf $out/lib/gcc/*/*/install-tools\\n\\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\\nrm -rf $out/bin/gccbug\\n\\nif type \\\"install_name_tool\\\"; then\\n    for i in \\\"${!outputLib}\\\"/lib/*.*.dylib \\\"${!outputLib}\\\"/lib/*.so.[0-9]; do\\n        install_name_tool -id \\\"$i\\\" \\\"$i\\\" || true\\n        for old_path in $(otool -L \\\"$i\\\" | grep \\\"$out\\\" | awk '{print $1}'); do\\n          new_path=`echo \\\"$old_path\\\" | sed \\\"s,$out,${!outputLib},\\\"`\\n          install_name_tool -change \\\"$old_path\\\" \\\"$new_path\\\" \\\"$i\\\" || true\\n        done\\n    done\\nfi\\n\\n# Get rid of some \\\"fixed\\\" header files\\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h,pthread.h}\\n\\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\\nfor i in $out/bin/*-gcc*; do\\n    if cmp -s $out/bin/gcc $i; then\\n        ln -sfn gcc $i\\n    fi\\ndone\\n\\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\\n    if cmp -s $out/bin/g++ $i; then\\n        ln -sfn g++ $i\\n    fi\\ndone\\n\\n# Two identical man pages are shipped (moving and compressing is done later)\\nfor i in \\\"$out\\\"/share/man/man1/*g++.1; do\\n    if test -e \\\"$i\\\"; then\\n        man_prefix=`echo \\\"$i\\\" | sed \\\"s,.*/\\\\(.*\\\\)g++.1,\\\\1,\\\"`\\n        ln -sf \\\"$man_prefix\\\"gcc.1 \\\"$i\\\"\\n    fi\\ndone\\n\",\"postInstallSaveChecksumPhase\":\"mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\\ncat > gcc/build/genchecksum <<\\\\EOF\\n#!/nix/store/fa4zdhjdin82yncj3fs72i34x2iqjgww-bash-5.2p37/bin/bash\\n/nix/store/nida6lp7k1g5ln34yhzbi15kjp4bbsvd-nuke-references/bin/nuke-refs $@\\nfor INPUT in \\\"$@\\\"; do install -Dt $INPUT $checksum/inputs/; done\\nexec build/.genchecksum-wrapped $@\\nEOF\\nchmod +x gcc/build/genchecksum\\nrm gcc/*-checksum.*\\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\\n\",\"postPatch\":\"configureScripts=$(find . -name configure)\\nfor configureScript in $configureScripts; do\\n  patchShebangs $configureScript\\ndone\\necho \\\"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\\\"\\nfor header in \\\"gcc/config/\\\"*-gnu.h \\\"gcc/config/\\\"*\\\"/\\\"*.h\\ndo\\n  grep -q _DYNAMIC_LINKER \\\"$header\\\" || continue\\n  echo \\\"  fixing $header...\\\"\\n  sed -i \\\"$header\\\" \\\\\\n      -e 's|define[[:blank:]]*\\\\([UCG]\\\\+\\\\)LIBC_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define \\\\1LIBC_DYNAMIC_LINKER\\\\2 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\3\\\"|g' \\\\\\n      -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define MUSL_DYNAMIC_LINKER\\\\1 \\\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\\\\2\\\"|g'\\n  done\\n\",\"preConfigure\":\"ln -sf /nix/store/xh0qg7llmg74b13zbvh1af6a5av4g8fd-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\\nif test -n \\\"$newlibSrc\\\"; then\\n    tar xvf \\\"$newlibSrc\\\" -C ..\\n    ln -s ../newlib-*/newlib newlib\\n    # Patch to get armvt5el working:\\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\\nfi\\n\\n# Bug - they packaged zlib\\nif test -d \\\"zlib\\\"; then\\n    # This breaks the build without-headers, which should build only\\n    # the target libgcc as target libraries.\\n    # See 'configure:5370'\\n    rm -Rf zlib\\nfi\\n\\nif test -n \\\"$crossMingw\\\" -a -n \\\"$withoutTargetLibc\\\"; then\\n    mkdir -p ../mingw\\n    # --with-build-sysroot expects that:\\n    cp -R $libcCross/include ../mingw\\n    configureFlags=\\\"$configureFlags --with-build-sysroot=`pwd`/..\\\"\\nfi\\n\\n# Perform the build in a different directory.\\nmkdir ../build\\ncd ../build\\nconfigureScript=../$sourceRoot/configure\\n\",\"preFixup\":\"# Populate most delicated lib/ part of stripDebugList{,Target}\\nupdateDebugListPaths() {\\n  local oldOpts\\n  oldOpts=\\\"$(shopt -p nullglob)\\\" || true\\n  shopt -s nullglob\\n\\n  pushd $out\\n  local -ar outHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\\n  )\\n  local -ar outTargetFiles=(\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\\n  )\\n  popd\\n\\n  pushd $lib\\n  local -ar libHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n  )\\n  local -ar libTargetFiles=(\\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\\n  )\\n  popd\\n\\n  eval \\\"$oldOpts\\\"\\n\\n  stripDebugList=\\\"$stripDebugList ${outHostFiles[*]} ${libHostFiles[*]}\\\"\\n  stripDebugListTarget=\\\"$stripDebugListTarget ${outTargetFiles[*]} ${libTargetFiles[*]}\\\"\\n}\\nupdateDebugListPaths\\n\",\"preFixupLibGccPhase\":\"# move libgcc from lib to its own output (libgcc)\\nmkdir -p $libgcc/lib\\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\\npatchelf --set-rpath \\\"\\\" $libgcc/lib/libgcc_s.so.1\\n\",\"preFixupPhases\":\"preFixupLibGccPhase postInstallSaveChecksumPhase preFixupXgccPhase\",\"preFixupXgccPhase\":\"find $lib/lib/ -name \\\\*.so\\\\* -exec patchelf --shrink-rpath {} \\\\; || true\\n\",\"preInstall\":\"mkdir -p \\\"$out/${targetConfig}/lib\\\"\\nmkdir -p \\\"${!outputLib}/${targetConfig}/lib\\\"\\nln -s lib \\\"$out/${targetConfig}/lib64\\\"\\nln -s lib \\\"${!outputLib}/${targetConfig}/lib64\\\"\\n\",\"preUnpack\":\"oldOpts=\\\"$(shopt -po nounset)\\\" || true\\nset -euo pipefail\\n\\nexport NIX_FIXINC_DUMMY=\\\"$NIX_BUILD_TOP/dummy\\\"\\nmkdir \\\"$NIX_FIXINC_DUMMY\\\"\\n\\nif test \\\"$staticCompiler\\\" = \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-static\\\"\\nelif test \\\"${NIX_DONT_SET_RPATH-}\\\" != \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-Wl,-rpath,${!outputLib}/lib\\\"\\nelse\\n    EXTRA_LDFLAGS=\\\"\\\"\\nfi\\n\\n# GCC interprets empty paths as \\\".\\\", which we don't want.\\nif test -z \\\"${CPATH-}\\\"; then unset CPATH; fi\\nif test -z \\\"${LIBRARY_PATH-}\\\"; then unset LIBRARY_PATH; fi\\necho \\\"\\\\$CPATH is \\\\`${CPATH-}'\\\"\\necho \\\"\\\\$LIBRARY_PATH is \\\\`${LIBRARY_PATH-}'\\\"\\n\\nif test \\\"$noSysDirs\\\" = \\\"1\\\"; then\\n\\n    declare -g \\\\\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\\\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\\n\\n    # Extract flags from Bintools Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curBintools=\\\"NIX_BINTOOLS${post}\\\"\\n\\n        declare -a extraLDFlags=()\\n        if [[ -e \\\"${!curBintools}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra flags when linking to pass to the gcc\\n            # compilers being generated to make sure that they use our libc.\\n            extraLDFlags=($(< \\\"${!curBintools}/nix-support/libc-ldflags\\\") $(< \\\"${!curBintools}/nix-support/libc-ldflags-before\\\" || true))\\n            if [ -e ${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\\n                extraLDFlags=-dynamic-linker=$(< ${!curBintools}/nix-support/dynamic-linker)\\n            fi\\n\\n            # The path to the Libc binaries such as `crti.o'.\\n            libc_libdir=\\\"$(< \\\"${!curBintools}/nix-support/orig-libc\\\")/lib\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraLDFlags=(\\\"-L/usr/lib64\\\" \\\"-L/usr/lib\\\")\\n            libc_libdir=\\\"/usr/lib\\\"\\n        fi\\n        declare -a prefixExtraLDFlags=()\\n        prefixExtraLDFlags=(\\\"-L$libc_libdir\\\")\\n        nixDontSetRpathVar=NIX_DONT_SET_RPATH${post}\\n        if test \\\"${!nixDontSetRpathVar-}\\\" != \\\"1\\\"; then\\n            prefixExtraLDFlags+=(\\\"-rpath\\\" \\\"$libc_libdir\\\")\\n        fi\\n        extraLDFlags=(\\\"${prefixExtraLDFlags[@]}\\\" \\\"${extraLDFlags[@]}\\\")\\n        for i in \\\"${extraLDFlags[@]}\\\"; do\\n            declare -g EXTRA_LDFLAGS${post}+=\\\" -Wl,$i\\\"\\n        done\\n    done\\n\\n    # Extract flags from CC Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curCC=\\\"NIX_CC${post}\\\"\\n        curFIXINC=\\\"NIX_FIXINC_DUMMY${post}\\\"\\n\\n        declare -a extraFlags=()\\n        if [[ -e \\\"${!curCC}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra compiling flags to pass to the gcc compilers\\n            # being generated to make sure that they use our libc.\\n            extraFlags=($(< \\\"${!curCC}/nix-support/libc-crt1-cflags\\\") $(< \\\"${!curCC}/nix-support/libc-cflags\\\"))\\n\\n            # The path to the Libc headers\\n            libc_devdir=\\\"$(< \\\"${!curCC}/nix-support/orig-libc-dev\\\")\\\"\\n\\n            # Use *real* header files, otherwise a limits.h is generated that\\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\\n            # which breaks the build).\\n            declare -g NIX_FIXINC_DUMMY${post}=\\\"$libc_devdir/include\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraFlags=(\\\"-isystem\\\" \\\"/usr/include\\\")\\n            declare -g NIX_FIXINC_DUMMY${post}=/usr/include\\n        fi\\n\\n        extraFlags=(\\\"-I${!curFIXINC}\\\" \\\"${extraFlags[@]}\\\")\\n\\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\\n        # sure to explictly add them so that files compiled with the bootstrap\\n        # compiler are optimized and (optionally) contain debugging information\\n        # (info \\\"(gccinstall) Building\\\").\\n        if test -n \\\"${dontStrip-}\\\"; then\\n            extraFlags=(\\\"-O2\\\" \\\"-g\\\" \\\"${extraFlags[@]}\\\")\\n        else\\n            # Don't pass `-g' at all; this saves space while building.\\n            extraFlags=(\\\"-O2\\\" \\\"${extraFlags[@]}\\\")\\n        fi\\n\\n        declare -g EXTRA_FLAGS${post}=\\\"${extraFlags[*]}\\\"\\n    done\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        # host = target, so the flags are the same\\n        EXTRA_FLAGS_FOR_TARGET=\\\"$EXTRA_FLAGS\\\"\\n        EXTRA_LDFLAGS_FOR_TARGET=\\\"$EXTRA_LDFLAGS\\\"\\n    fi\\n\\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\\n    # the startfiles.\\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\\n    # for the startfiles.\\n    makeFlagsArray+=(\\n        \\\"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\\\"\\n\\n        \\\"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        #\\\"LDFLAGS=$EXTRA_LDFLAGS\\\"\\n        \\\"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\\\"\\n\\n        \\\"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n\\n        # It seems there is a bug in GCC 5\\n        #\\\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n        #\\\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n\\n        \\\"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n    )\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        makeFlagsArray+=(\\n            \\\"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n            \\\"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        )\\n    fi\\n\\n    if test \\\"$withoutTargetLibc\\\" == 1; then\\n        # We don't want the gcc build to assume there will be a libc providing\\n        # limits.h in this stage\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=false'\\n        )\\n    else\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=true'\\n        )\\n    fi\\nfi\\n\\neval \\\"$oldOpts\\\"\\n\",\"propagatedBuildInputs\":\"\",\"propagatedNativeBuildInputs\":\"\",\"setOutputFlags\":\"\",\"src\":\"/nix/store/sn5d80xj6k2p2bkzfpniz4rkv7j2akh9-gcc-13.3.0.tar.xz\",\"staticCompiler\":\"\",\"stdenv\":\"/nix/store/0ynsk23yj75gn60yhlmczs3y7ynb2sgs-bootstrap-stage-xgcc-stdenv-linux\",\"strictDeps\":\"\",\"stripDebugList\":\"bin libexec\",\"stripDebugListTarget\":\"x86_64-unknown-linux-gnu\",\"system\":\"x86_64-linux\",\"version\":\"13.3.0\",\"withoutTargetLibc\":\"\"},\"inputDrvs\":{},\"inputSrcs\":[\"/nix/store/0ynsk23yj75gn60yhlmczs3y7ynb2sgs-bootstrap-stage-xgcc-stdenv-linux\",\"/nix/store/46mhiavwypvkdvl5xjcbm59hj4jh54q1-mpfr-4.2.1\",\"/nix/store/4yjcqvgxw8fcy1h9z5xn2ilprk2lqm17-bootstrap-stage0-glibc-bootstrapFiles\",\"/nix/store/59nxhg647yk9yfc9qql8vbp23a4961f3-mpfr-4.2.1-dev\",\"/nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"/nix/store/6p5bxw3lnld2515w20vkp1vra4vfls7z-which-2.21\",\"/nix/store/7am2h98zpk7bhsabmbsz7rnzka5jv6fj-libmpc-1.3.1\",\"/nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch\",\"/nix/store/8nrmm2ack2hb6xf02pn7rbg7m8xbd1wg-texinfo-7.1.1\",\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch\",\"/nix/store/95d8zqx3nx5gbha1dlcspwz8sncz84y4-zlib-1.3.1\",\"/nix/store/bnyyaql5yvcrfw42k9kd5d10c2f10mnp-bootstrap-stage0-binutils-wrapper-\",\"/nix/store/dmc68jln3g9f8hxvxr5f4y8xpv08dh8f-patchelf-0.15.0\",\"/nix/store/fa4zdhjdin82yncj3fs72i34x2iqjgww-bash-5.2p37\",\"/nix/store/m095cscc0jh869q3yz0zw2k48fwahbg2-perl-5.40.0\",\"/nix/store/m6csqz0q26zj97sc81bk2nfa3vva10wp-gettext-0.21.1\",\"/nix/store/n2r9nyb61w055ynjr1ncahx4wfy6r7y3-isl-0.20\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools\",\"/nix/store/nida6lp7k1g5ln34yhzbi15kjp4bbsvd-nuke-references\",\"/nix/store/pmazrl3wschw3rnzk107x81lh2ai87cz-zlib-1.3.1-dev\",\"/nix/store/rvkjnrb3n7j433n48dz4p1q16x9hrncn-gmp-6.3.0\",\"/nix/store/sn5d80xj6k2p2bkzfpniz4rkv7j2akh9-gcc-13.3.0.tar.xz\",\"/nix/store/v6x3cs394jgqfbi0a42pam708flxaphh-default-builder.sh\",\"/nix/store/w10dzrnqwh2m69ghd4r72n3g97xgkk16-bootstrap-stage-xgcc-gcc-wrapper-\",\"/nix/store/xh0qg7llmg74b13zbvh1af6a5av4g8fd-libxcrypt-4.4.36\",\"/nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch\",\"/nix/store/ywfwxdcaddp1glmdh6yvrmkpcm8zyf76-gmp-6.3.0-dev\"],\"name\":\"xgcc-13.3.0\",\"outputs\":{\"checksum\":{\"hashAlgo\":\"r:sha256\"},\"info\":{\"hashAlgo\":\"r:sha256\"},\"lib\":{\"hashAlgo\":\"r:sha256\"},\"libgcc\":{\"hashAlgo\":\"r:sha256\"},\"man\":{\"hashAlgo\":\"r:sha256\"},\"out\":{\"hashAlgo\":\"r:sha256\"}},\"system\":\"x86_64-linux\"}"}},"out":{"nix":{"checksum":{"hashAlgo":"r:sha256","path":"/nix/store/prq5wh7r97k4p1a9cd4yw4v9fr2wqbdp-xgcc-13.3.0-checksum","hash":"sha256:0x48wxg5b1c1k4wlm4gizb2prrw5wnv15xh8df845yrlgfs12ybj"},"info":{"hashAlgo":"r:sha256","path":"/nix/store/pm8fq8k090mhccbb1z745c82x52crrir-xgcc-13.3.0-info","hash":"sha256:139633vb5d7mlv31mwfqk2akdki3m88qqzc71ngcyjk05xn02ip5"},"lib":{"hashAlgo":"r:sha256","path":"/nix/store/lirkgmhrp2j3prr90pagxc0vm5k44h7g-xgcc-13.3.0-lib","hash":"sha256:1gc21xry44bivs8lzd2mbkwqgz3iy847gylr5ialmxzrniqql4ab"},"libgcc":{"hashAlgo":"r:sha256","path":"/nix/store/pzfdk7m5skpv89nkd8mr5h6sb6j3vhs3-xgcc-13.3.0-libgcc","hash":"sha256:0b5w3ndi129126vdsq9924fbfgnmxd7597jihf95qaqlnv7cr9hb"},"man":{"hashAlgo":"r:sha256","path":"/nix/store/kgcm0i4agyd3kkpb0wfrrxy7n7ccm6p0-xgcc-13.3.0-man","hash":"sha256:0sszrd6mhym5dzr5lsgv63mi58ccd8n5np6ja5q0x2xjdg8dckkc"},"out":{"hashAlgo":"r:sha256","path":"/nix/store/5hqv8gagj9p5h6x1s2zjvrn11zp8ch0i-xgcc-13.3.0","hash":"sha256:1g8frag53f969vx0h3iadci0fm07vamzykxk3qvlxar93f3s0x5q"}}},"builder":{"rebuild_id":1254015186}}.HoadbYrNwaPPyc_jpYxPqKsKm1ZRbl_UlPQQSj8UieZBv6S7JpTUuPWTBgxGWGP5PdRnHSdsl7PWqPLk6v2EBw"]}