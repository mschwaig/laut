{"signatures": ["eyJhbGciOiJFZERTQSIsImNydiI6IkVkMjU1MTkiLCJkZXRhY2hIYXNoIjoibml4LWNhLXBhdGgiLCJraWQiOiJidWlsZGVyQTpiY2RhOGQ1NDQ3MGZlYTNiIiwidHlwIjoiSldUIiwidHlwZSI6ImxhdXQiLCJ2IjoiMiJ9.{"in":{"rdrv_json":"JIQ-MbmlYYcftD8Hv5PxIQJZhBrql_cgCkpwY9qDQ-s","debug":{"rdrv_path":"/nix/store/0yrrl4i7ys0v0ylf97mqkiagzfp78i5y-gcc-13.3.0.drv","rdrv_json_preimage":"{\"args\":[\"-e\",\"/nix/store/v6x3cs394jgqfbi0a42pam708flxaphh-default-builder.sh\"],\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"env\":{\"CPATH\":\"/nix/store/nyidav5m677rk3g560xigp1r77qs103n-zlib-1.3.1-dev/include\",\"EXTRA_FLAGS_FOR_TARGET\":\"\",\"EXTRA_LDFLAGS_FOR_TARGET\":\"\",\"LIBRARY_PATH\":\"/nix/store/3xp9f0hi83mzw2q78idyrg2c3awiqdfw-zlib-1.3.1/lib\",\"NIX_HARDENING_ENABLE\":\"bindnow fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs\",\"NIX_LDFLAGS\":\"\",\"NIX_NO_SELF_RPATH\":\"1\",\"__structuredAttrs\":\"\",\"buildFlags\":\"\",\"buildInputs\":\"/nix/store/fxpy1hkypad2rh03084f75bbn34qfppf-gmp-6.3.0-dev /nix/store/am5406966rg8pzkwg61xppiwpiiczppp-mpfr-4.2.1-dev /nix/store/yvkc7vridndbprwgsn5zd8s5wn16abag-libmpc-1.3.1 /nix/store/9q5q30d4qjf789id7kjjyvw4c74vsr70-libxcrypt-4.4.36 /nix/store/h6hm49nhpkc63z8dpzn1ffixik6g160a-binutils-patchelfed-ld-wrapper-2.43.1 /nix/store/gwg265i7dz6rfq0y8irl4x2sps1vbscj-isl-0.20 /nix/store/nyidav5m677rk3g560xigp1r77qs103n-zlib-1.3.1-dev\",\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"checksum\":\"/1mwi8wx04p2sbg96n3j7n7qil7yrwl7qfg98dsyghqkjki9hwqam\",\"cmakeFlags\":\"\",\"configureFlags\":\"--with-gmp-include=/nix/store/fxpy1hkypad2rh03084f75bbn34qfppf-gmp-6.3.0-dev/include --with-gmp-lib=/nix/store/qqn9ilngpf4c1yqkkghyp287jndagvs2-gmp-6.3.0/lib --with-mpfr-include=/nix/store/am5406966rg8pzkwg61xppiwpiiczppp-mpfr-4.2.1-dev/include --with-mpfr-lib=/nix/store/17bqd6f2c68h74847hi0m6szf11xrir5-mpfr-4.2.1/lib --with-mpc=/nix/store/yvkc7vridndbprwgsn5zd8s5wn16abag-libmpc-1.3.1 --with-native-system-header-dir=/nix/store/9b3vh4w6c4gdck10yvbbpam9al1x1qlc-glibc-2.40-36-dev/include --with-build-sysroot=/ --with-gxx-include-dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/include/c++/13.3.0/ --program-prefix= --enable-lto --disable-libstdcxx-pch --without-included-gettext --with-system-zlib --enable-static --enable-languages=c,c++ --disable-multilib --enable-plugin --disable-libcc1 --with-isl=/nix/store/gwg265i7dz6rfq0y8irl4x2sps1vbscj-isl-0.20 --disable-bootstrap --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=x86_64-unknown-linux-gnu\",\"configurePlatforms\":\"build host target\",\"crossMingw\":\"\",\"depsBuildBuild\":\"/nix/store/m6pdwsldrkb9yj909ikhdm3d6wl3sa3q-bootstrap-stage3-gcc-wrapper-13.3.0\",\"depsBuildBuildPropagated\":\"\",\"depsBuildTarget\":\"/nix/store/h6hm49nhpkc63z8dpzn1ffixik6g160a-binutils-patchelfed-ld-wrapper-2.43.1 /nix/store/bjhivbh8baalyiyzww1x7bk0vmk4mz4w-patchelf-0.15.0\",\"depsBuildTargetPropagated\":\"\",\"depsHostHost\":\"\",\"depsHostHostPropagated\":\"\",\"depsTargetTarget\":\"\",\"depsTargetTargetPropagated\":\"\",\"doCheck\":\"\",\"doInstallCheck\":\"\",\"dontDisableStatic\":\"1\",\"enableMultilib\":\"\",\"enableParallelBuilding\":\"1\",\"enableParallelChecking\":\"1\",\"enableParallelInstalling\":\"\",\"enableShared\":\"1\",\"hardeningDisable\":\"format pie stackclashprotection\",\"info\":\"/1q29kf1a0nccw70c0b8a1mg10jr7b5lvv5m7v3jwdffnsy6nvxyy\",\"lib\":\"/0sra2y18lr3h6j58qjm0w46yv36h1wjmilb09n8aimdpivdymscx\",\"libc_dev\":\"/nix/store/9b3vh4w6c4gdck10yvbbpam9al1x1qlc-glibc-2.40-36-dev\",\"libgcc\":\"/1asphndcd5djmh2xzc48rkbp9rlipz6aav02xbka98hb4fkm03pr\",\"man\":\"/13w3w5jxr32cwlhkkhgz7w65fffzgv7fkd48zi7ncz9ghqzhnqpw\",\"mesonFlags\":\"\",\"name\":\"gcc-13.3.0\",\"nativeBuildInputs\":\"/nix/store/565fhlvgwzk54y3x1ihhhp2x92azjj3b-texinfo-7.1.1 /nix/store/6p5bxw3lnld2515w20vkp1vra4vfls7z-which-2.21 /nix/store/m6csqz0q26zj97sc81bk2nfa3vva10wp-gettext-0.21.1 /nix/store/m095cscc0jh869q3yz0zw2k48fwahbg2-perl-5.40.0\",\"noSysDirs\":\"1\",\"out\":\"/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9\",\"outputHashAlgo\":\"sha256\",\"outputHashMode\":\"recursive\",\"outputs\":\"out man info lib libgcc checksum\",\"patches\":\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch /nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch /nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch /nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"pname\":\"gcc\",\"postConfigure\":\"# Avoid store paths when embedding ./configure flags into gcc.\\n# Mangled arguments are still useful when reporting bugs upstream.\\nsed -e \\\"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\\\{32\\\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\\\" -i Makefile\\n\",\"postInstall\":\"# Move runtime libraries to lib output.\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.so*\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.la\\\"  \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dylib\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dll\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"share/gcc-*/python\\\" \\\"${!outputLib}\\\"\\n\\nif [ -z \\\"$enableShared\\\" ]; then\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.a\\\" \\\"${!outputLib}\\\"\\nfi\\n\\nfor i in \\\"${!outputLib}/${targetConfig}\\\"/lib/*.{la,py}; do\\n    substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\ndone\\n\\nif [ -n \\\"$enableMultilib\\\" ]; then\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.so*\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.la\\\"  \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dylib\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dll\\\" \\\"${!outputLib}\\\"\\n\\n    for i in \\\"${!outputLib}/${targetConfig}\\\"/lib64/*.{la,py}; do\\n        substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\n    done\\nfi\\n\\n# Remove `fixincl' to prevent a retained dependency on the\\n# previous gcc.\\nrm -rf $out/libexec/gcc/*/*/install-tools\\nrm -rf $out/lib/gcc/*/*/install-tools\\n\\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\\nrm -rf $out/bin/gccbug\\n\\nif type \\\"install_name_tool\\\"; then\\n    for i in \\\"${!outputLib}\\\"/lib/*.*.dylib \\\"${!outputLib}\\\"/lib/*.so.[0-9]; do\\n        install_name_tool -id \\\"$i\\\" \\\"$i\\\" || true\\n        for old_path in $(otool -L \\\"$i\\\" | grep \\\"$out\\\" | awk '{print $1}'); do\\n          new_path=`echo \\\"$old_path\\\" | sed \\\"s,$out,${!outputLib},\\\"`\\n          install_name_tool -change \\\"$old_path\\\" \\\"$new_path\\\" \\\"$i\\\" || true\\n        done\\n    done\\nfi\\n\\n# Get rid of some \\\"fixed\\\" header files\\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h,pthread.h}\\n\\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\\nfor i in $out/bin/*-gcc*; do\\n    if cmp -s $out/bin/gcc $i; then\\n        ln -sfn gcc $i\\n    fi\\ndone\\n\\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\\n    if cmp -s $out/bin/g++ $i; then\\n        ln -sfn g++ $i\\n    fi\\ndone\\n\\n# Two identical man pages are shipped (moving and compressing is done later)\\nfor i in \\\"$out\\\"/share/man/man1/*g++.1; do\\n    if test -e \\\"$i\\\"; then\\n        man_prefix=`echo \\\"$i\\\" | sed \\\"s,.*/\\\\(.*\\\\)g++.1,\\\\1,\\\"`\\n        ln -sf \\\"$man_prefix\\\"gcc.1 \\\"$i\\\"\\n    fi\\ndone\\n\",\"postInstallSaveChecksumPhase\":\"mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\\ncat > gcc/build/genchecksum <<\\\\EOF\\n#!/nix/store/dzk1zszazs3zli4jsssc6gmghyfygip5-bash-5.2p37/bin/bash\\n/nix/store/nida6lp7k1g5ln34yhzbi15kjp4bbsvd-nuke-references/bin/nuke-refs $@\\nfor INPUT in \\\"$@\\\"; do install -Dt $INPUT $checksum/inputs/; done\\nexec build/.genchecksum-wrapped $@\\nEOF\\nchmod +x gcc/build/genchecksum\\nrm gcc/*-checksum.*\\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\\n\",\"postPatch\":\"configureScripts=$(find . -name configure)\\nfor configureScript in $configureScripts; do\\n  patchShebangs $configureScript\\ndone\\necho \\\"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\\\"\\nfor header in \\\"gcc/config/\\\"*-gnu.h \\\"gcc/config/\\\"*\\\"/\\\"*.h\\ndo\\n  grep -q _DYNAMIC_LINKER \\\"$header\\\" || continue\\n  echo \\\"  fixing $header...\\\"\\n  sed -i \\\"$header\\\" \\\\\\n      -e 's|define[[:blank:]]*\\\\([UCG]\\\\+\\\\)LIBC_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define \\\\1LIBC_DYNAMIC_LINKER\\\\2 \\\"/nix/store/lcfd95q9rar3hwa9k0m6jmnhcdbjdg8d-glibc-2.40-36\\\\3\\\"|g' \\\\\\n      -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define MUSL_DYNAMIC_LINKER\\\\1 \\\"/nix/store/lcfd95q9rar3hwa9k0m6jmnhcdbjdg8d-glibc-2.40-36\\\\2\\\"|g'\\n  done\\n\",\"preConfigure\":\"ln -sf /nix/store/9q5q30d4qjf789id7kjjyvw4c74vsr70-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\\nif test -n \\\"$newlibSrc\\\"; then\\n    tar xvf \\\"$newlibSrc\\\" -C ..\\n    ln -s ../newlib-*/newlib newlib\\n    # Patch to get armvt5el working:\\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\\nfi\\n\\n# Bug - they packaged zlib\\nif test -d \\\"zlib\\\"; then\\n    # This breaks the build without-headers, which should build only\\n    # the target libgcc as target libraries.\\n    # See 'configure:5370'\\n    rm -Rf zlib\\nfi\\n\\nif test -n \\\"$crossMingw\\\" -a -n \\\"$withoutTargetLibc\\\"; then\\n    mkdir -p ../mingw\\n    # --with-build-sysroot expects that:\\n    cp -R $libcCross/include ../mingw\\n    configureFlags=\\\"$configureFlags --with-build-sysroot=`pwd`/..\\\"\\nfi\\n\\n# Perform the build in a different directory.\\nmkdir ../build\\ncd ../build\\nconfigureScript=../$sourceRoot/configure\\n\",\"preFixup\":\"# Populate most delicated lib/ part of stripDebugList{,Target}\\nupdateDebugListPaths() {\\n  local oldOpts\\n  oldOpts=\\\"$(shopt -p nullglob)\\\" || true\\n  shopt -s nullglob\\n\\n  pushd $out\\n  local -ar outHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\\n  )\\n  local -ar outTargetFiles=(\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\\n  )\\n  popd\\n\\n  pushd $lib\\n  local -ar libHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n  )\\n  local -ar libTargetFiles=(\\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\\n  )\\n  popd\\n\\n  eval \\\"$oldOpts\\\"\\n\\n  stripDebugList=\\\"$stripDebugList ${outHostFiles[*]} ${libHostFiles[*]}\\\"\\n  stripDebugListTarget=\\\"$stripDebugListTarget ${outTargetFiles[*]} ${libTargetFiles[*]}\\\"\\n}\\nupdateDebugListPaths\\n\",\"preFixupLibGccPhase\":\"# move libgcc from lib to its own output (libgcc)\\nmkdir -p $libgcc/lib\\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\\npatchelf --set-rpath \\\"\\\" $libgcc/lib/libgcc_s.so.1\\n\",\"preFixupPhases\":\"preFixupLibGccPhase postInstallSaveChecksumPhase\",\"preInstall\":\"mkdir -p \\\"$out/${targetConfig}/lib\\\"\\nmkdir -p \\\"${!outputLib}/${targetConfig}/lib\\\"\\nln -s lib \\\"$out/${targetConfig}/lib64\\\"\\nln -s lib \\\"${!outputLib}/${targetConfig}/lib64\\\"\\n\",\"preUnpack\":\"oldOpts=\\\"$(shopt -po nounset)\\\" || true\\nset -euo pipefail\\n\\nexport NIX_FIXINC_DUMMY=\\\"$NIX_BUILD_TOP/dummy\\\"\\nmkdir \\\"$NIX_FIXINC_DUMMY\\\"\\n\\nif test \\\"$staticCompiler\\\" = \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-static\\\"\\nelif test \\\"${NIX_DONT_SET_RPATH-}\\\" != \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-Wl,-rpath,${!outputLib}/lib\\\"\\nelse\\n    EXTRA_LDFLAGS=\\\"\\\"\\nfi\\n\\n# GCC interprets empty paths as \\\".\\\", which we don't want.\\nif test -z \\\"${CPATH-}\\\"; then unset CPATH; fi\\nif test -z \\\"${LIBRARY_PATH-}\\\"; then unset LIBRARY_PATH; fi\\necho \\\"\\\\$CPATH is \\\\`${CPATH-}'\\\"\\necho \\\"\\\\$LIBRARY_PATH is \\\\`${LIBRARY_PATH-}'\\\"\\n\\nif test \\\"$noSysDirs\\\" = \\\"1\\\"; then\\n\\n    declare -g \\\\\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\\\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\\n\\n    # Extract flags from Bintools Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curBintools=\\\"NIX_BINTOOLS${post}\\\"\\n\\n        declare -a extraLDFlags=()\\n        if [[ -e \\\"${!curBintools}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra flags when linking to pass to the gcc\\n            # compilers being generated to make sure that they use our libc.\\n            extraLDFlags=($(< \\\"${!curBintools}/nix-support/libc-ldflags\\\") $(< \\\"${!curBintools}/nix-support/libc-ldflags-before\\\" || true))\\n            if [ -e ${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\\n                extraLDFlags=-dynamic-linker=$(< ${!curBintools}/nix-support/dynamic-linker)\\n            fi\\n\\n            # The path to the Libc binaries such as `crti.o'.\\n            libc_libdir=\\\"$(< \\\"${!curBintools}/nix-support/orig-libc\\\")/lib\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraLDFlags=(\\\"-L/usr/lib64\\\" \\\"-L/usr/lib\\\")\\n            libc_libdir=\\\"/usr/lib\\\"\\n        fi\\n        declare -a prefixExtraLDFlags=()\\n        prefixExtraLDFlags=(\\\"-L$libc_libdir\\\")\\n        nixDontSetRpathVar=NIX_DONT_SET_RPATH${post}\\n        if test \\\"${!nixDontSetRpathVar-}\\\" != \\\"1\\\"; then\\n            prefixExtraLDFlags+=(\\\"-rpath\\\" \\\"$libc_libdir\\\")\\n        fi\\n        extraLDFlags=(\\\"${prefixExtraLDFlags[@]}\\\" \\\"${extraLDFlags[@]}\\\")\\n        for i in \\\"${extraLDFlags[@]}\\\"; do\\n            declare -g EXTRA_LDFLAGS${post}+=\\\" -Wl,$i\\\"\\n        done\\n    done\\n\\n    # Extract flags from CC Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curCC=\\\"NIX_CC${post}\\\"\\n        curFIXINC=\\\"NIX_FIXINC_DUMMY${post}\\\"\\n\\n        declare -a extraFlags=()\\n        if [[ -e \\\"${!curCC}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra compiling flags to pass to the gcc compilers\\n            # being generated to make sure that they use our libc.\\n            extraFlags=($(< \\\"${!curCC}/nix-support/libc-crt1-cflags\\\") $(< \\\"${!curCC}/nix-support/libc-cflags\\\"))\\n\\n            # The path to the Libc headers\\n            libc_devdir=\\\"$(< \\\"${!curCC}/nix-support/orig-libc-dev\\\")\\\"\\n\\n            # Use *real* header files, otherwise a limits.h is generated that\\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\\n            # which breaks the build).\\n            declare -g NIX_FIXINC_DUMMY${post}=\\\"$libc_devdir/include\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraFlags=(\\\"-isystem\\\" \\\"/usr/include\\\")\\n            declare -g NIX_FIXINC_DUMMY${post}=/usr/include\\n        fi\\n\\n        extraFlags=(\\\"-I${!curFIXINC}\\\" \\\"${extraFlags[@]}\\\")\\n\\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\\n        # sure to explictly add them so that files compiled with the bootstrap\\n        # compiler are optimized and (optionally) contain debugging information\\n        # (info \\\"(gccinstall) Building\\\").\\n        if test -n \\\"${dontStrip-}\\\"; then\\n            extraFlags=(\\\"-O2\\\" \\\"-g\\\" \\\"${extraFlags[@]}\\\")\\n        else\\n            # Don't pass `-g' at all; this saves space while building.\\n            extraFlags=(\\\"-O2\\\" \\\"${extraFlags[@]}\\\")\\n        fi\\n\\n        declare -g EXTRA_FLAGS${post}=\\\"${extraFlags[*]}\\\"\\n    done\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        # host = target, so the flags are the same\\n        EXTRA_FLAGS_FOR_TARGET=\\\"$EXTRA_FLAGS\\\"\\n        EXTRA_LDFLAGS_FOR_TARGET=\\\"$EXTRA_LDFLAGS\\\"\\n    fi\\n\\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\\n    # the startfiles.\\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\\n    # for the startfiles.\\n    makeFlagsArray+=(\\n        \\\"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\\\"\\n\\n        \\\"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        #\\\"LDFLAGS=$EXTRA_LDFLAGS\\\"\\n        \\\"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\\\"\\n\\n        \\\"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n\\n        # It seems there is a bug in GCC 5\\n        #\\\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n        #\\\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n\\n        \\\"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n    )\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        makeFlagsArray+=(\\n            \\\"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n            \\\"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        )\\n    fi\\n\\n    if test \\\"$withoutTargetLibc\\\" == 1; then\\n        # We don't want the gcc build to assume there will be a libc providing\\n        # limits.h in this stage\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=false'\\n        )\\n    else\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=true'\\n        )\\n    fi\\nfi\\n\\neval \\\"$oldOpts\\\"\\n\",\"propagatedBuildInputs\":\"\",\"propagatedNativeBuildInputs\":\"\",\"setOutputFlags\":\"\",\"src\":\"/nix/store/sn5d80xj6k2p2bkzfpniz4rkv7j2akh9-gcc-13.3.0.tar.xz\",\"staticCompiler\":\"\",\"stdenv\":\"/nix/store/fbam9hkyv5wr99c6mf4kffnmybc7kijd-bootstrap-stage3-stdenv-linux\",\"strictDeps\":\"\",\"stripDebugList\":\"bin libexec\",\"stripDebugListTarget\":\"x86_64-unknown-linux-gnu\",\"system\":\"x86_64-linux\",\"version\":\"13.3.0\",\"withoutTargetLibc\":\"\"},\"inputDrvs\":{},\"inputSrcs\":[\"/nix/store/17bqd6f2c68h74847hi0m6szf11xrir5-mpfr-4.2.1\",\"/nix/store/3xp9f0hi83mzw2q78idyrg2c3awiqdfw-zlib-1.3.1\",\"/nix/store/565fhlvgwzk54y3x1ihhhp2x92azjj3b-texinfo-7.1.1\",\"/nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"/nix/store/6p5bxw3lnld2515w20vkp1vra4vfls7z-which-2.21\",\"/nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch\",\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch\",\"/nix/store/9b3vh4w6c4gdck10yvbbpam9al1x1qlc-glibc-2.40-36-dev\",\"/nix/store/9q5q30d4qjf789id7kjjyvw4c74vsr70-libxcrypt-4.4.36\",\"/nix/store/am5406966rg8pzkwg61xppiwpiiczppp-mpfr-4.2.1-dev\",\"/nix/store/bjhivbh8baalyiyzww1x7bk0vmk4mz4w-patchelf-0.15.0\",\"/nix/store/dzk1zszazs3zli4jsssc6gmghyfygip5-bash-5.2p37\",\"/nix/store/fbam9hkyv5wr99c6mf4kffnmybc7kijd-bootstrap-stage3-stdenv-linux\",\"/nix/store/fxpy1hkypad2rh03084f75bbn34qfppf-gmp-6.3.0-dev\",\"/nix/store/gwg265i7dz6rfq0y8irl4x2sps1vbscj-isl-0.20\",\"/nix/store/h6hm49nhpkc63z8dpzn1ffixik6g160a-binutils-patchelfed-ld-wrapper-2.43.1\",\"/nix/store/lcfd95q9rar3hwa9k0m6jmnhcdbjdg8d-glibc-2.40-36\",\"/nix/store/m095cscc0jh869q3yz0zw2k48fwahbg2-perl-5.40.0\",\"/nix/store/m6csqz0q26zj97sc81bk2nfa3vva10wp-gettext-0.21.1\",\"/nix/store/m6pdwsldrkb9yj909ikhdm3d6wl3sa3q-bootstrap-stage3-gcc-wrapper-13.3.0\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools\",\"/nix/store/nida6lp7k1g5ln34yhzbi15kjp4bbsvd-nuke-references\",\"/nix/store/nyidav5m677rk3g560xigp1r77qs103n-zlib-1.3.1-dev\",\"/nix/store/qqn9ilngpf4c1yqkkghyp287jndagvs2-gmp-6.3.0\",\"/nix/store/sn5d80xj6k2p2bkzfpniz4rkv7j2akh9-gcc-13.3.0.tar.xz\",\"/nix/store/v6x3cs394jgqfbi0a42pam708flxaphh-default-builder.sh\",\"/nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch\",\"/nix/store/yvkc7vridndbprwgsn5zd8s5wn16abag-libmpc-1.3.1\"],\"name\":\"gcc-13.3.0\",\"outputs\":{\"checksum\":{\"hashAlgo\":\"r:sha256\"},\"info\":{\"hashAlgo\":\"r:sha256\"},\"lib\":{\"hashAlgo\":\"r:sha256\"},\"libgcc\":{\"hashAlgo\":\"r:sha256\"},\"man\":{\"hashAlgo\":\"r:sha256\"},\"out\":{\"hashAlgo\":\"r:sha256\"}},\"system\":\"x86_64-linux\"}"}},"out":{"nix":{"checksum":{"hashAlgo":"r:sha256","path":"/nix/store/3hm172qi1723agp78w1wf1a2yjd2np0k-gcc-13.3.0-checksum","hash":"sha256:1xfkqffp375japg4iy8ij09q02mmz4d7gzq28inx1yg5d9f9mn2b"},"info":{"hashAlgo":"r:sha256","path":"/nix/store/xc30vka8ngz755s0y073bghgzqhxfs9f-gcc-13.3.0-info","hash":"sha256:139633vb5d7mlv31mwfqk2akdki3m88qqzc71ngcyjk05xn02ip5"},"lib":{"hashAlgo":"r:sha256","path":"/nix/store/i9b5a53s9mbk96da8xc7sx6wvbild1mq-gcc-13.3.0-lib","hash":"sha256:19ibv3v2d5679qasxlj9lcr9jv2zq717mbkvprhiag4y5d802xcp"},"libgcc":{"hashAlgo":"r:sha256","path":"/nix/store/j90f8pffdabqk7g22i1m3sfjyyvsfzf0-gcc-13.3.0-libgcc","hash":"sha256:0q4xwhs8xfbrbqxcgxc8kc5j3xqsjhap8fijj6fx2pa1j03kip39"},"man":{"hashAlgo":"r:sha256","path":"/nix/store/x3gvcrqr9qvx8r8m3b60qiahl754i721-gcc-13.3.0-man","hash":"sha256:0k9j0ycc8lyglsl19ycasfr4cvjhxy4jhc1navpzglm5lhp0kdgq"},"out":{"hashAlgo":"r:sha256","path":"/nix/store/pg1hxqlbb4aawhmhpms8gsmlsmdb7n62-gcc-13.3.0","hash":"sha256:009071ni8hxzhqy8ivm6aj58zq32ljf45qscgf9amcvg3mn0x669"}}},"builder":{"rebuild_id":3510884280}}.RKgQMz3EwyAHDedozM7EBLfYMuz1sa-MGG1iRuKSx-dtxi8tSebGWQ8dNf1J6FoLCGDLKBqBE25K8wdLJM7mDA", "eyJhbGciOiJFZERTQSIsImNydiI6IkVkMjU1MTkiLCJkZXRhY2hIYXNoIjoibml4LWNhLXBhdGgiLCJraWQiOiJidWlsZGVyQTpiY2RhOGQ1NDQ3MGZlYTNiIiwidHlwIjoiSldUIiwidHlwZSI6ImxhdXQiLCJ2IjoiMiJ9.{"in":{"rdrv_json":"JIQ-MbmlYYcftD8Hv5PxIQJZhBrql_cgCkpwY9qDQ-s","debug":{"rdrv_path":"/nix/store/0yrrl4i7ys0v0ylf97mqkiagzfp78i5y-gcc-13.3.0.drv","rdrv_json_preimage":"{\"args\":[\"-e\",\"/nix/store/v6x3cs394jgqfbi0a42pam708flxaphh-default-builder.sh\"],\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"env\":{\"CPATH\":\"/nix/store/nyidav5m677rk3g560xigp1r77qs103n-zlib-1.3.1-dev/include\",\"EXTRA_FLAGS_FOR_TARGET\":\"\",\"EXTRA_LDFLAGS_FOR_TARGET\":\"\",\"LIBRARY_PATH\":\"/nix/store/3xp9f0hi83mzw2q78idyrg2c3awiqdfw-zlib-1.3.1/lib\",\"NIX_HARDENING_ENABLE\":\"bindnow fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs\",\"NIX_LDFLAGS\":\"\",\"NIX_NO_SELF_RPATH\":\"1\",\"__structuredAttrs\":\"\",\"buildFlags\":\"\",\"buildInputs\":\"/nix/store/fxpy1hkypad2rh03084f75bbn34qfppf-gmp-6.3.0-dev /nix/store/am5406966rg8pzkwg61xppiwpiiczppp-mpfr-4.2.1-dev /nix/store/yvkc7vridndbprwgsn5zd8s5wn16abag-libmpc-1.3.1 /nix/store/9q5q30d4qjf789id7kjjyvw4c74vsr70-libxcrypt-4.4.36 /nix/store/h6hm49nhpkc63z8dpzn1ffixik6g160a-binutils-patchelfed-ld-wrapper-2.43.1 /nix/store/gwg265i7dz6rfq0y8irl4x2sps1vbscj-isl-0.20 /nix/store/nyidav5m677rk3g560xigp1r77qs103n-zlib-1.3.1-dev\",\"builder\":\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools/bin/bash\",\"checksum\":\"/1mwi8wx04p2sbg96n3j7n7qil7yrwl7qfg98dsyghqkjki9hwqam\",\"cmakeFlags\":\"\",\"configureFlags\":\"--with-gmp-include=/nix/store/fxpy1hkypad2rh03084f75bbn34qfppf-gmp-6.3.0-dev/include --with-gmp-lib=/nix/store/qqn9ilngpf4c1yqkkghyp287jndagvs2-gmp-6.3.0/lib --with-mpfr-include=/nix/store/am5406966rg8pzkwg61xppiwpiiczppp-mpfr-4.2.1-dev/include --with-mpfr-lib=/nix/store/17bqd6f2c68h74847hi0m6szf11xrir5-mpfr-4.2.1/lib --with-mpc=/nix/store/yvkc7vridndbprwgsn5zd8s5wn16abag-libmpc-1.3.1 --with-native-system-header-dir=/nix/store/9b3vh4w6c4gdck10yvbbpam9al1x1qlc-glibc-2.40-36-dev/include --with-build-sysroot=/ --with-gxx-include-dir=/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9/include/c++/13.3.0/ --program-prefix= --enable-lto --disable-libstdcxx-pch --without-included-gettext --with-system-zlib --enable-static --enable-languages=c,c++ --disable-multilib --enable-plugin --disable-libcc1 --with-isl=/nix/store/gwg265i7dz6rfq0y8irl4x2sps1vbscj-isl-0.20 --disable-bootstrap --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=x86_64-unknown-linux-gnu\",\"configurePlatforms\":\"build host target\",\"crossMingw\":\"\",\"depsBuildBuild\":\"/nix/store/m6pdwsldrkb9yj909ikhdm3d6wl3sa3q-bootstrap-stage3-gcc-wrapper-13.3.0\",\"depsBuildBuildPropagated\":\"\",\"depsBuildTarget\":\"/nix/store/h6hm49nhpkc63z8dpzn1ffixik6g160a-binutils-patchelfed-ld-wrapper-2.43.1 /nix/store/bjhivbh8baalyiyzww1x7bk0vmk4mz4w-patchelf-0.15.0\",\"depsBuildTargetPropagated\":\"\",\"depsHostHost\":\"\",\"depsHostHostPropagated\":\"\",\"depsTargetTarget\":\"\",\"depsTargetTargetPropagated\":\"\",\"doCheck\":\"\",\"doInstallCheck\":\"\",\"dontDisableStatic\":\"1\",\"enableMultilib\":\"\",\"enableParallelBuilding\":\"1\",\"enableParallelChecking\":\"1\",\"enableParallelInstalling\":\"\",\"enableShared\":\"1\",\"hardeningDisable\":\"format pie stackclashprotection\",\"info\":\"/1q29kf1a0nccw70c0b8a1mg10jr7b5lvv5m7v3jwdffnsy6nvxyy\",\"lib\":\"/0sra2y18lr3h6j58qjm0w46yv36h1wjmilb09n8aimdpivdymscx\",\"libc_dev\":\"/nix/store/9b3vh4w6c4gdck10yvbbpam9al1x1qlc-glibc-2.40-36-dev\",\"libgcc\":\"/1asphndcd5djmh2xzc48rkbp9rlipz6aav02xbka98hb4fkm03pr\",\"man\":\"/13w3w5jxr32cwlhkkhgz7w65fffzgv7fkd48zi7ncz9ghqzhnqpw\",\"mesonFlags\":\"\",\"name\":\"gcc-13.3.0\",\"nativeBuildInputs\":\"/nix/store/565fhlvgwzk54y3x1ihhhp2x92azjj3b-texinfo-7.1.1 /nix/store/6p5bxw3lnld2515w20vkp1vra4vfls7z-which-2.21 /nix/store/m6csqz0q26zj97sc81bk2nfa3vva10wp-gettext-0.21.1 /nix/store/m095cscc0jh869q3yz0zw2k48fwahbg2-perl-5.40.0\",\"noSysDirs\":\"1\",\"out\":\"/1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9\",\"outputHashAlgo\":\"sha256\",\"outputHashMode\":\"recursive\",\"outputs\":\"out man info lib libgcc checksum\",\"patches\":\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch /nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch /nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch /nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"pname\":\"gcc\",\"postConfigure\":\"# Avoid store paths when embedding ./configure flags into gcc.\\n# Mangled arguments are still useful when reporting bugs upstream.\\nsed -e \\\"/TOPLEVEL_CONFIGURE_ARGUMENTS=/ s|$NIX_STORE/[a-z0-9]\\\\{32\\\\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g\\\" -i Makefile\\n\",\"postInstall\":\"# Move runtime libraries to lib output.\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.so*\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.la\\\"  \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dylib\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.dll\\\" \\\"${!outputLib}\\\"\\nmoveToOutput \\\"share/gcc-*/python\\\" \\\"${!outputLib}\\\"\\n\\nif [ -z \\\"$enableShared\\\" ]; then\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib/lib*.a\\\" \\\"${!outputLib}\\\"\\nfi\\n\\nfor i in \\\"${!outputLib}/${targetConfig}\\\"/lib/*.{la,py}; do\\n    substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\ndone\\n\\nif [ -n \\\"$enableMultilib\\\" ]; then\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.so*\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.la\\\"  \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dylib\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dll.a\\\" \\\"${!outputLib}\\\"\\n    moveToOutput \\\"${targetConfig+$targetConfig/}lib64/lib*.dll\\\" \\\"${!outputLib}\\\"\\n\\n    for i in \\\"${!outputLib}/${targetConfig}\\\"/lib64/*.{la,py}; do\\n        substituteInPlace \\\"$i\\\" --replace \\\"$out\\\" \\\"${!outputLib}\\\"\\n    done\\nfi\\n\\n# Remove `fixincl' to prevent a retained dependency on the\\n# previous gcc.\\nrm -rf $out/libexec/gcc/*/*/install-tools\\nrm -rf $out/lib/gcc/*/*/install-tools\\n\\n# More dependencies with the previous gcc or some libs (gccbug stores the build command line)\\nrm -rf $out/bin/gccbug\\n\\nif type \\\"install_name_tool\\\"; then\\n    for i in \\\"${!outputLib}\\\"/lib/*.*.dylib \\\"${!outputLib}\\\"/lib/*.so.[0-9]; do\\n        install_name_tool -id \\\"$i\\\" \\\"$i\\\" || true\\n        for old_path in $(otool -L \\\"$i\\\" | grep \\\"$out\\\" | awk '{print $1}'); do\\n          new_path=`echo \\\"$old_path\\\" | sed \\\"s,$out,${!outputLib},\\\"`\\n          install_name_tool -change \\\"$old_path\\\" \\\"$new_path\\\" \\\"$i\\\" || true\\n        done\\n    done\\nfi\\n\\n# Get rid of some \\\"fixed\\\" header files\\nrm -rfv $out/lib/gcc/*/*/include-fixed/{root,linux,sys/mount.h,bits/statx.h,pthread.h}\\n\\n# Replace hard links for i686-pc-linux-gnu-gcc etc. with symlinks.\\nfor i in $out/bin/*-gcc*; do\\n    if cmp -s $out/bin/gcc $i; then\\n        ln -sfn gcc $i\\n    fi\\ndone\\n\\nfor i in $out/bin/c++ $out/bin/*-c++* $out/bin/*-g++*; do\\n    if cmp -s $out/bin/g++ $i; then\\n        ln -sfn g++ $i\\n    fi\\ndone\\n\\n# Two identical man pages are shipped (moving and compressing is done later)\\nfor i in \\\"$out\\\"/share/man/man1/*g++.1; do\\n    if test -e \\\"$i\\\"; then\\n        man_prefix=`echo \\\"$i\\\" | sed \\\"s,.*/\\\\(.*\\\\)g++.1,\\\\1,\\\"`\\n        ln -sf \\\"$man_prefix\\\"gcc.1 \\\"$i\\\"\\n    fi\\ndone\\n\",\"postInstallSaveChecksumPhase\":\"mv gcc/build/genchecksum gcc/build/.genchecksum-wrapped\\ncat > gcc/build/genchecksum <<\\\\EOF\\n#!/nix/store/dzk1zszazs3zli4jsssc6gmghyfygip5-bash-5.2p37/bin/bash\\n/nix/store/nida6lp7k1g5ln34yhzbi15kjp4bbsvd-nuke-references/bin/nuke-refs $@\\nfor INPUT in \\\"$@\\\"; do install -Dt $INPUT $checksum/inputs/; done\\nexec build/.genchecksum-wrapped $@\\nEOF\\nchmod +x gcc/build/genchecksum\\nrm gcc/*-checksum.*\\nmake -C gcc cc1-checksum.o cc1plus-checksum.o\\ninstall -Dt $checksum/checksums/ gcc/cc*-checksum.o\\n\",\"postPatch\":\"configureScripts=$(find . -name configure)\\nfor configureScript in $configureScripts; do\\n  patchShebangs $configureScript\\ndone\\necho \\\"fixing the {GLIBC,UCLIBC,MUSL}_DYNAMIC_LINKER macros...\\\"\\nfor header in \\\"gcc/config/\\\"*-gnu.h \\\"gcc/config/\\\"*\\\"/\\\"*.h\\ndo\\n  grep -q _DYNAMIC_LINKER \\\"$header\\\" || continue\\n  echo \\\"  fixing $header...\\\"\\n  sed -i \\\"$header\\\" \\\\\\n      -e 's|define[[:blank:]]*\\\\([UCG]\\\\+\\\\)LIBC_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define \\\\1LIBC_DYNAMIC_LINKER\\\\2 \\\"/nix/store/lcfd95q9rar3hwa9k0m6jmnhcdbjdg8d-glibc-2.40-36\\\\3\\\"|g' \\\\\\n      -e 's|define[[:blank:]]*MUSL_DYNAMIC_LINKER\\\\([0-9]*\\\\)[[:blank:]]\\\"\\\\([^\\\\\\\"]\\\\+\\\\)\\\"$|define MUSL_DYNAMIC_LINKER\\\\1 \\\"/nix/store/lcfd95q9rar3hwa9k0m6jmnhcdbjdg8d-glibc-2.40-36\\\\2\\\"|g'\\n  done\\n\",\"preConfigure\":\"ln -sf /nix/store/9q5q30d4qjf789id7kjjyvw4c74vsr70-libxcrypt-4.4.36/include/crypt.h libsanitizer/sanitizer_common/crypt.h\\nif test -n \\\"$newlibSrc\\\"; then\\n    tar xvf \\\"$newlibSrc\\\" -C ..\\n    ln -s ../newlib-*/newlib newlib\\n    # Patch to get armvt5el working:\\n    sed -i -e 's/ arm)/ arm*)/' newlib/configure.host\\nfi\\n\\n# Bug - they packaged zlib\\nif test -d \\\"zlib\\\"; then\\n    # This breaks the build without-headers, which should build only\\n    # the target libgcc as target libraries.\\n    # See 'configure:5370'\\n    rm -Rf zlib\\nfi\\n\\nif test -n \\\"$crossMingw\\\" -a -n \\\"$withoutTargetLibc\\\"; then\\n    mkdir -p ../mingw\\n    # --with-build-sysroot expects that:\\n    cp -R $libcCross/include ../mingw\\n    configureFlags=\\\"$configureFlags --with-build-sysroot=`pwd`/..\\\"\\nfi\\n\\n# Perform the build in a different directory.\\nmkdir ../build\\ncd ../build\\nconfigureScript=../$sourceRoot/configure\\n\",\"preFixup\":\"# Populate most delicated lib/ part of stripDebugList{,Target}\\nupdateDebugListPaths() {\\n  local oldOpts\\n  oldOpts=\\\"$(shopt -p nullglob)\\\" || true\\n  shopt -s nullglob\\n\\n  pushd $out\\n  local -ar outHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/plugin\\n  )\\n  local -ar outTargetFiles=(\\n    lib{,32,64}/gcc/x86_64-unknown-linux-gnu/*/*.{a,o,so*}\\n  )\\n  popd\\n\\n  pushd $lib\\n  local -ar libHostFiles=(\\n    lib{,32,64}/*.{a,o,so*}\\n  )\\n  local -ar libTargetFiles=(\\n    lib{,32,64}/x86_64-unknown-linux-gnu/*.{a,o,so*}\\n  )\\n  popd\\n\\n  eval \\\"$oldOpts\\\"\\n\\n  stripDebugList=\\\"$stripDebugList ${outHostFiles[*]} ${libHostFiles[*]}\\\"\\n  stripDebugListTarget=\\\"$stripDebugListTarget ${outTargetFiles[*]} ${libTargetFiles[*]}\\\"\\n}\\nupdateDebugListPaths\\n\",\"preFixupLibGccPhase\":\"# move libgcc from lib to its own output (libgcc)\\nmkdir -p $libgcc/lib\\nmv    $lib/lib/libgcc_s.so      $libgcc/lib/\\nmv    $lib/lib/libgcc_s.so.1    $libgcc/lib/\\nln -s $libgcc/lib/libgcc_s.so   $lib/lib/\\nln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/\\npatchelf --set-rpath \\\"\\\" $libgcc/lib/libgcc_s.so.1\\n\",\"preFixupPhases\":\"preFixupLibGccPhase postInstallSaveChecksumPhase\",\"preInstall\":\"mkdir -p \\\"$out/${targetConfig}/lib\\\"\\nmkdir -p \\\"${!outputLib}/${targetConfig}/lib\\\"\\nln -s lib \\\"$out/${targetConfig}/lib64\\\"\\nln -s lib \\\"${!outputLib}/${targetConfig}/lib64\\\"\\n\",\"preUnpack\":\"oldOpts=\\\"$(shopt -po nounset)\\\" || true\\nset -euo pipefail\\n\\nexport NIX_FIXINC_DUMMY=\\\"$NIX_BUILD_TOP/dummy\\\"\\nmkdir \\\"$NIX_FIXINC_DUMMY\\\"\\n\\nif test \\\"$staticCompiler\\\" = \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-static\\\"\\nelif test \\\"${NIX_DONT_SET_RPATH-}\\\" != \\\"1\\\"; then\\n    EXTRA_LDFLAGS=\\\"-Wl,-rpath,${!outputLib}/lib\\\"\\nelse\\n    EXTRA_LDFLAGS=\\\"\\\"\\nfi\\n\\n# GCC interprets empty paths as \\\".\\\", which we don't want.\\nif test -z \\\"${CPATH-}\\\"; then unset CPATH; fi\\nif test -z \\\"${LIBRARY_PATH-}\\\"; then unset LIBRARY_PATH; fi\\necho \\\"\\\\$CPATH is \\\\`${CPATH-}'\\\"\\necho \\\"\\\\$LIBRARY_PATH is \\\\`${LIBRARY_PATH-}'\\\"\\n\\nif test \\\"$noSysDirs\\\" = \\\"1\\\"; then\\n\\n    declare -g \\\\\\n        EXTRA_FLAGS_FOR_BUILD EXTRA_FLAGS EXTRA_FLAGS_FOR_TARGET \\\\\\n        EXTRA_LDFLAGS_FOR_BUILD EXTRA_LDFLAGS_FOR_TARGET\\n\\n    # Extract flags from Bintools Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curBintools=\\\"NIX_BINTOOLS${post}\\\"\\n\\n        declare -a extraLDFlags=()\\n        if [[ -e \\\"${!curBintools}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra flags when linking to pass to the gcc\\n            # compilers being generated to make sure that they use our libc.\\n            extraLDFlags=($(< \\\"${!curBintools}/nix-support/libc-ldflags\\\") $(< \\\"${!curBintools}/nix-support/libc-ldflags-before\\\" || true))\\n            if [ -e ${!curBintools}/nix-support/ld-set-dynamic-linker ]; then\\n                extraLDFlags=-dynamic-linker=$(< ${!curBintools}/nix-support/dynamic-linker)\\n            fi\\n\\n            # The path to the Libc binaries such as `crti.o'.\\n            libc_libdir=\\\"$(< \\\"${!curBintools}/nix-support/orig-libc\\\")/lib\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraLDFlags=(\\\"-L/usr/lib64\\\" \\\"-L/usr/lib\\\")\\n            libc_libdir=\\\"/usr/lib\\\"\\n        fi\\n        declare -a prefixExtraLDFlags=()\\n        prefixExtraLDFlags=(\\\"-L$libc_libdir\\\")\\n        nixDontSetRpathVar=NIX_DONT_SET_RPATH${post}\\n        if test \\\"${!nixDontSetRpathVar-}\\\" != \\\"1\\\"; then\\n            prefixExtraLDFlags+=(\\\"-rpath\\\" \\\"$libc_libdir\\\")\\n        fi\\n        extraLDFlags=(\\\"${prefixExtraLDFlags[@]}\\\" \\\"${extraLDFlags[@]}\\\")\\n        for i in \\\"${extraLDFlags[@]}\\\"; do\\n            declare -g EXTRA_LDFLAGS${post}+=\\\" -Wl,$i\\\"\\n        done\\n    done\\n\\n    # Extract flags from CC Wrappers\\n    for post in '_FOR_BUILD' \\\"\\\"; do\\n        curCC=\\\"NIX_CC${post}\\\"\\n        curFIXINC=\\\"NIX_FIXINC_DUMMY${post}\\\"\\n\\n        declare -a extraFlags=()\\n        if [[ -e \\\"${!curCC}/nix-support/orig-libc\\\" ]]; then\\n            # Figure out what extra compiling flags to pass to the gcc compilers\\n            # being generated to make sure that they use our libc.\\n            extraFlags=($(< \\\"${!curCC}/nix-support/libc-crt1-cflags\\\") $(< \\\"${!curCC}/nix-support/libc-cflags\\\"))\\n\\n            # The path to the Libc headers\\n            libc_devdir=\\\"$(< \\\"${!curCC}/nix-support/orig-libc-dev\\\")\\\"\\n\\n            # Use *real* header files, otherwise a limits.h is generated that\\n            # does not include Libc's limits.h (notably missing SSIZE_MAX,\\n            # which breaks the build).\\n            declare -g NIX_FIXINC_DUMMY${post}=\\\"$libc_devdir/include\\\"\\n        else\\n            # Hack: support impure environments.\\n            extraFlags=(\\\"-isystem\\\" \\\"/usr/include\\\")\\n            declare -g NIX_FIXINC_DUMMY${post}=/usr/include\\n        fi\\n\\n        extraFlags=(\\\"-I${!curFIXINC}\\\" \\\"${extraFlags[@]}\\\")\\n\\n        # BOOT_CFLAGS defaults to `-g -O2'; since we override it below, make\\n        # sure to explictly add them so that files compiled with the bootstrap\\n        # compiler are optimized and (optionally) contain debugging information\\n        # (info \\\"(gccinstall) Building\\\").\\n        if test -n \\\"${dontStrip-}\\\"; then\\n            extraFlags=(\\\"-O2\\\" \\\"-g\\\" \\\"${extraFlags[@]}\\\")\\n        else\\n            # Don't pass `-g' at all; this saves space while building.\\n            extraFlags=(\\\"-O2\\\" \\\"${extraFlags[@]}\\\")\\n        fi\\n\\n        declare -g EXTRA_FLAGS${post}=\\\"${extraFlags[*]}\\\"\\n    done\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        # host = target, so the flags are the same\\n        EXTRA_FLAGS_FOR_TARGET=\\\"$EXTRA_FLAGS\\\"\\n        EXTRA_LDFLAGS_FOR_TARGET=\\\"$EXTRA_LDFLAGS\\\"\\n    fi\\n\\n    # CFLAGS_FOR_TARGET are needed for the libstdc++ configure script to find\\n    # the startfiles.\\n    # FLAGS_FOR_TARGET are needed for the target libraries to receive the -Bxxx\\n    # for the startfiles.\\n    makeFlagsArray+=(\\n        \\\"BUILD_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY_FOR_BUILD\\\"\\n        \\\"NATIVE_SYSTEM_HEADER_DIR=$NIX_FIXINC_DUMMY\\\"\\n\\n        \\\"LDFLAGS_FOR_BUILD=$EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        #\\\"LDFLAGS=$EXTRA_LDFLAGS\\\"\\n        \\\"LDFLAGS_FOR_TARGET=$EXTRA_LDFLAGS_FOR_TARGET\\\"\\n\\n        \\\"CFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"CXXFLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n        \\\"FLAGS_FOR_BUILD=$EXTRA_FLAGS_FOR_BUILD $EXTRA_LDFLAGS_FOR_BUILD\\\"\\n\\n        # It seems there is a bug in GCC 5\\n        #\\\"CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n        #\\\"CXXFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n\\n        \\\"CFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"CXXFLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        \\\"FLAGS_FOR_TARGET=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n    )\\n\\n    if test -z \\\"${targetConfig-}\\\"; then\\n        makeFlagsArray+=(\\n            \\\"BOOT_CFLAGS=$EXTRA_FLAGS $EXTRA_LDFLAGS\\\"\\n            \\\"BOOT_LDFLAGS=$EXTRA_FLAGS_FOR_TARGET $EXTRA_LDFLAGS_FOR_TARGET\\\"\\n        )\\n    fi\\n\\n    if test \\\"$withoutTargetLibc\\\" == 1; then\\n        # We don't want the gcc build to assume there will be a libc providing\\n        # limits.h in this stage\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=false'\\n        )\\n    else\\n        makeFlagsArray+=(\\n            'LIMITS_H_TEST=true'\\n        )\\n    fi\\nfi\\n\\neval \\\"$oldOpts\\\"\\n\",\"propagatedBuildInputs\":\"\",\"propagatedNativeBuildInputs\":\"\",\"setOutputFlags\":\"\",\"src\":\"/nix/store/sn5d80xj6k2p2bkzfpniz4rkv7j2akh9-gcc-13.3.0.tar.xz\",\"staticCompiler\":\"\",\"stdenv\":\"/nix/store/fbam9hkyv5wr99c6mf4kffnmybc7kijd-bootstrap-stage3-stdenv-linux\",\"strictDeps\":\"\",\"stripDebugList\":\"bin libexec\",\"stripDebugListTarget\":\"x86_64-unknown-linux-gnu\",\"system\":\"x86_64-linux\",\"version\":\"13.3.0\",\"withoutTargetLibc\":\"\"},\"inputDrvs\":{},\"inputSrcs\":[\"/nix/store/17bqd6f2c68h74847hi0m6szf11xrir5-mpfr-4.2.1\",\"/nix/store/3xp9f0hi83mzw2q78idyrg2c3awiqdfw-zlib-1.3.1\",\"/nix/store/565fhlvgwzk54y3x1ihhhp2x92azjj3b-texinfo-7.1.1\",\"/nix/store/632b0y5mkcdwbsw2g3xh5qznw2vv5axr-ppc-musl.patch\",\"/nix/store/6p5bxw3lnld2515w20vkp1vra4vfls7z-which-2.21\",\"/nix/store/7x6bimj6ipi6ag859gi2fc6by87x37j7-no-sys-dirs-riscv.patch\",\"/nix/store/9577hmdlmhki67cg8ar85cvidyg7xr7p-gcc-12-no-sys-dirs.patch\",\"/nix/store/9b3vh4w6c4gdck10yvbbpam9al1x1qlc-glibc-2.40-36-dev\",\"/nix/store/9q5q30d4qjf789id7kjjyvw4c74vsr70-libxcrypt-4.4.36\",\"/nix/store/am5406966rg8pzkwg61xppiwpiiczppp-mpfr-4.2.1-dev\",\"/nix/store/bjhivbh8baalyiyzww1x7bk0vmk4mz4w-patchelf-0.15.0\",\"/nix/store/dzk1zszazs3zli4jsssc6gmghyfygip5-bash-5.2p37\",\"/nix/store/fbam9hkyv5wr99c6mf4kffnmybc7kijd-bootstrap-stage3-stdenv-linux\",\"/nix/store/fxpy1hkypad2rh03084f75bbn34qfppf-gmp-6.3.0-dev\",\"/nix/store/gwg265i7dz6rfq0y8irl4x2sps1vbscj-isl-0.20\",\"/nix/store/h6hm49nhpkc63z8dpzn1ffixik6g160a-binutils-patchelfed-ld-wrapper-2.43.1\",\"/nix/store/lcfd95q9rar3hwa9k0m6jmnhcdbjdg8d-glibc-2.40-36\",\"/nix/store/m095cscc0jh869q3yz0zw2k48fwahbg2-perl-5.40.0\",\"/nix/store/m6csqz0q26zj97sc81bk2nfa3vva10wp-gettext-0.21.1\",\"/nix/store/m6pdwsldrkb9yj909ikhdm3d6wl3sa3q-bootstrap-stage3-gcc-wrapper-13.3.0\",\"/nix/store/n7cxavpfzzz2pb1a71fg5hy1mqf1xlf2-bootstrap-tools\",\"/nix/store/nida6lp7k1g5ln34yhzbi15kjp4bbsvd-nuke-references\",\"/nix/store/nyidav5m677rk3g560xigp1r77qs103n-zlib-1.3.1-dev\",\"/nix/store/qqn9ilngpf4c1yqkkghyp287jndagvs2-gmp-6.3.0\",\"/nix/store/sn5d80xj6k2p2bkzfpniz4rkv7j2akh9-gcc-13.3.0.tar.xz\",\"/nix/store/v6x3cs394jgqfbi0a42pam708flxaphh-default-builder.sh\",\"/nix/store/xpplvxiwb4li2qd5nvhyd2mngrpna0ya-mangle-NIX_STORE-in-__FILE__.patch\",\"/nix/store/yvkc7vridndbprwgsn5zd8s5wn16abag-libmpc-1.3.1\"],\"name\":\"gcc-13.3.0\",\"outputs\":{\"checksum\":{\"hashAlgo\":\"r:sha256\"},\"info\":{\"hashAlgo\":\"r:sha256\"},\"lib\":{\"hashAlgo\":\"r:sha256\"},\"libgcc\":{\"hashAlgo\":\"r:sha256\"},\"man\":{\"hashAlgo\":\"r:sha256\"},\"out\":{\"hashAlgo\":\"r:sha256\"}},\"system\":\"x86_64-linux\"}"}},"out":{"nix":{"checksum":{"hashAlgo":"r:sha256","path":"/nix/store/3hm172qi1723agp78w1wf1a2yjd2np0k-gcc-13.3.0-checksum","hash":"sha256:1xfkqffp375japg4iy8ij09q02mmz4d7gzq28inx1yg5d9f9mn2b"},"info":{"hashAlgo":"r:sha256","path":"/nix/store/xc30vka8ngz755s0y073bghgzqhxfs9f-gcc-13.3.0-info","hash":"sha256:139633vb5d7mlv31mwfqk2akdki3m88qqzc71ngcyjk05xn02ip5"},"lib":{"hashAlgo":"r:sha256","path":"/nix/store/i9b5a53s9mbk96da8xc7sx6wvbild1mq-gcc-13.3.0-lib","hash":"sha256:19ibv3v2d5679qasxlj9lcr9jv2zq717mbkvprhiag4y5d802xcp"},"libgcc":{"hashAlgo":"r:sha256","path":"/nix/store/j90f8pffdabqk7g22i1m3sfjyyvsfzf0-gcc-13.3.0-libgcc","hash":"sha256:0q4xwhs8xfbrbqxcgxc8kc5j3xqsjhap8fijj6fx2pa1j03kip39"},"man":{"hashAlgo":"r:sha256","path":"/nix/store/x3gvcrqr9qvx8r8m3b60qiahl754i721-gcc-13.3.0-man","hash":"sha256:0k9j0ycc8lyglsl19ycasfr4cvjhxy4jhc1navpzglm5lhp0kdgq"},"out":{"hashAlgo":"r:sha256","path":"/nix/store/pg1hxqlbb4aawhmhpms8gsmlsmdb7n62-gcc-13.3.0","hash":"sha256:009071ni8hxzhqy8ivm6aj58zq32ljf45qscgf9amcvg3mn0x669"}}},"builder":{"rebuild_id":1955690814}}.sEUeq8bOmaP2qnq8u27qqZiuaE3msVT0iCMYcFHVVz81CVxHX-0VyDv0xvMwxzvaSa2OfDdKhBDAakAeOJU7Cw"]}