{"signatures": ["eyJhbGciOiJFZERTQSIsImNydiI6IkVkMjU1MTkiLCJkZXRhY2hIYXNoIjoibml4LWNhLXBhdGgiLCJraWQiOiJidWlsZGVyQjpkOTc4MDE3OWQ3MjM5ZDUxIiwidHlwIjoiSldUIiwidHlwZSI6ImxhdXQiLCJ2IjoiMiJ9.eyJpbiI6eyJyZHJ2X2pzb24iOiI4OExoT0tsZWZfMHpnUlBqU0diVGhCUzVKdVNBdWJjcG9jMUJWQXA1UFo0IiwicmRydl9hdGVybV9jYSI6InZuMzUzbGp3YXgzbjk3azlqMXNkcGtkZ2R6aTBuczl5IiwiZGVidWciOnsiZHJ2X25hbWUiOiJnY2MtMTQuMi4xLjIwMjUwMzIyIiwicmRydl9wYXRoIjoiL25peC9zdG9yZS92bjM1M2xqd2F4M245N2s5ajFzZHBrZGdkemkwbnM5eS1nY2MtMTQuMi4xLjIwMjUwMzIyLmRydiIsInJkcnZfanNvbl9wcmVpbWFnZSI6IntcImFyZ3NcIjpbXCItZVwiLFwiL25peC9zdG9yZS92ajFjM3dmOWMxMWEwcXM2cDN5bWZ2cm5zZGdzZGNicS1zb3VyY2Utc3RkZW52LnNoXCIsXCIvbml4L3N0b3JlL3Noa3c0cW05cWN3NXNjNW4xazVqem5jODNueTAycjM5LWRlZmF1bHQtYnVpbGRlci5zaFwiXSxcImJ1aWxkZXJcIjpcIi9uaXgvc3RvcmUvbjdjeGF2cGZ6enoycGIxYTcxZmc1aHkxbXFmMXhsZjItYm9vdHN0cmFwLXRvb2xzL2Jpbi9iYXNoXCIsXCJlbnZcIjp7XCJDUEFUSFwiOlwiL25peC9zdG9yZS8xeHpwOXgyeHZuNjdsNGQyaHpyNXg2c203MDVyMGc1Yi16bGliLTEuMy4xLWRldi9pbmNsdWRlXCIsXCJFWFRSQV9GTEFHU19GT1JfVEFSR0VUXCI6XCJcIixcIkVYVFJBX0xERkxBR1NfRk9SX1RBUkdFVFwiOlwiXCIsXCJMSUJSQVJZX1BBVEhcIjpcIi9uaXgvc3RvcmUvcXduYWtscmNrY3djbjJybWNsaTYzdmN2ZjN6cWNkd2QtemxpYi0xLjMuMS9saWJcIixcIk5JWF9IQVJERU5JTkdfRU5BQkxFXCI6XCJiaW5kbm93IGZvcnRpZnkgZm9ydGlmeTMgcGljIHJlbHJvIHN0YWNrcHJvdGVjdG9yIHN0cmljdG92ZXJmbG93IHplcm9jYWxsdXNlZHJlZ3NcIixcIk5JWF9MREZMQUdTXCI6XCJcIixcIk5JWF9OT19TRUxGX1JQQVRIXCI6XCIxXCIsXCJfX3N0cnVjdHVyZWRBdHRyc1wiOlwiXCIsXCJidWlsZEZsYWdzXCI6XCJcIixcImJ1aWxkSW5wdXRzXCI6XCIvbml4L3N0b3JlL3NsbDg2YmM0eGJxYnZyeXFrYzU5OHphcnlpeWE3ajRoLWdtcC02LjMuMC1kZXYgL25peC9zdG9yZS9kdm1yMTU0bmZoODY4M3h6Z2hkbDR4ODNkMDQ0ZGw3aC1tcGZyLTQuMi4xLWRldiAvbml4L3N0b3JlL2IyNHFqc2lrcGQ1Z2Z5NmJqOTVtc3hodndoNXc1ejMxLWxpYm1wYy0xLjMuMSAvbml4L3N0b3JlL3FzcmNhdm1xNG44OHYxcHc3aXJsMmg2emFrMmZnYjk2LWxpYnhjcnlwdC00LjQuMzggL25peC9zdG9yZS94MXNtaHN6eWd3OXM2NGF4NXlnbW53djExbmc3eWQ5Ni1iaW51dGlscy1wYXRjaGVsZmVkLWxkLXdyYXBwZXItMi40NCAvbml4L3N0b3JlLzZ4Ym40aWRtNmE0amM0MXlydzg1Yjh4MXFnY3lxbDF6LWlzbC0wLjIwIC9uaXgvc3RvcmUvMXh6cDl4Mnh2bjY3bDRkMmh6cjV4NnNtNzA1cjBnNWItemxpYi0xLjMuMS1kZXZcIixcImJ1aWxkZXJcIjpcIi9uaXgvc3RvcmUvbjdjeGF2cGZ6enoycGIxYTcxZmc1aHkxbXFmMXhsZjItYm9vdHN0cmFwLXRvb2xzL2Jpbi9iYXNoXCIsXCJjaGVja3N1bVwiOlwiLzFtd2k4d3gwNHAyc2JnOTZuM2o3bjdxaWw3eXJ3bDdxZmc5OGRzeWdocWtqa2k5aHdxYW1cIixcImNtYWtlRmxhZ3NcIjpcIlwiLFwiY29uZmlndXJlRmxhZ3NcIjpcIi0td2l0aC1nbXAtaW5jbHVkZT0vbml4L3N0b3JlL3NsbDg2YmM0eGJxYnZyeXFrYzU5OHphcnlpeWE3ajRoLWdtcC02LjMuMC1kZXYvaW5jbHVkZSAtLXdpdGgtZ21wLWxpYj0vbml4L3N0b3JlLzZpa3djMW16cHM5YTczZmI3bnEwMDA1Yjk0ODJweTNhLWdtcC02LjMuMC9saWIgLS13aXRoLW1wZnItaW5jbHVkZT0vbml4L3N0b3JlL2R2bXIxNTRuZmg4NjgzeHpnaGRsNHg4M2QwNDRkbDdoLW1wZnItNC4yLjEtZGV2L2luY2x1ZGUgLS13aXRoLW1wZnItbGliPS9uaXgvc3RvcmUvN3Zram5nMG1tODZpamF5cjQ5bDhrd3NxY3BiemQyNGItbXBmci00LjIuMS9saWIgLS13aXRoLW1wYz0vbml4L3N0b3JlL2IyNHFqc2lrcGQ1Z2Z5NmJqOTVtc3hodndoNXc1ejMxLWxpYm1wYy0xLjMuMSAtLXdpdGgtbmF0aXZlLXN5c3RlbS1oZWFkZXItZGlyPS9uaXgvc3RvcmUvM3Z6eDVwOHhmeXg5a2d5dmh6ZGdkcjEwajA5bmpmN24tZ2xpYmMtMi40MC02Ni1kZXYvaW5jbHVkZSAtLXdpdGgtYnVpbGQtc3lzcm9vdD0vIC0td2l0aC1neHgtaW5jbHVkZS1kaXI9LzFyejRnNHpucHpqd2gxeHltaGpwbTQydmlwdzkycHI3M3ZkZ2w2eHMxaHljYWM4a2YybjkvaW5jbHVkZS9jKysvMTQuMi4xLjIwMjUwMzIyLyAtLXByb2dyYW0tcHJlZml4PSAtLWVuYWJsZS1sdG8gLS1kaXNhYmxlLWxpYnN0ZGN4eC1wY2ggLS13aXRob3V0LWluY2x1ZGVkLWdldHRleHQgLS13aXRoLXN5c3RlbS16bGliIC0tZW5hYmxlLXN0YXRpYyAtLWVuYWJsZS1sYW5ndWFnZXM9YyxjKysgLS1kaXNhYmxlLW11bHRpbGliIC0tZW5hYmxlLXBsdWdpbiAtLWRpc2FibGUtbGliY2MxIC0td2l0aC1pc2w9L25peC9zdG9yZS82eGJuNGlkbTZhNGpjNDF5cnc4NWI4eDFxZ2N5cWwxei1pc2wtMC4yMCAtLWRpc2FibGUtYm9vdHN0cmFwIC0tYnVpbGQ9eDg2XzY0LXVua25vd24tbGludXgtZ251IC0taG9zdD14ODZfNjQtdW5rbm93bi1saW51eC1nbnUgLS10YXJnZXQ9eDg2XzY0LXVua25vd24tbGludXgtZ251XCIsXCJjb25maWd1cmVQbGF0Zm9ybXNcIjpcImJ1aWxkIGhvc3QgdGFyZ2V0XCIsXCJjcm9zc01pbmd3XCI6XCJcIixcImRlcHNCdWlsZEJ1aWxkXCI6XCIvbml4L3N0b3JlL3NuYmhhNTYyajkyNTV3eDM3Mzh4OWYyd3I3NW5pYjVqLWJvb3RzdHJhcC1zdGFnZTMtZ2NjLXdyYXBwZXItMTQuMi4xLjIwMjUwMzIyXCIsXCJkZXBzQnVpbGRCdWlsZFByb3BhZ2F0ZWRcIjpcIlwiLFwiZGVwc0J1aWxkVGFyZ2V0XCI6XCIvbml4L3N0b3JlL3gxc21oc3p5Z3c5czY0YXg1eWdtbnd2MTFuZzd5ZDk2LWJpbnV0aWxzLXBhdGNoZWxmZWQtbGQtd3JhcHBlci0yLjQ0IC9uaXgvc3RvcmUvZzA4MzZzeHpxaXNqMGhtd2Rkc2J3eTdjeHl6amR4aTItcGF0Y2hlbGYtMC4xNS4wXCIsXCJkZXBzQnVpbGRUYXJnZXRQcm9wYWdhdGVkXCI6XCJcIixcImRlcHNIb3N0SG9zdFwiOlwiXCIsXCJkZXBzSG9zdEhvc3RQcm9wYWdhdGVkXCI6XCJcIixcImRlcHNUYXJnZXRUYXJnZXRcIjpcIlwiLFwiZGVwc1RhcmdldFRhcmdldFByb3BhZ2F0ZWRcIjpcIlwiLFwiZG9DaGVja1wiOlwiXCIsXCJkb0luc3RhbGxDaGVja1wiOlwiXCIsXCJkb250RGlzYWJsZVN0YXRpY1wiOlwiMVwiLFwiZW5hYmxlTXVsdGlsaWJcIjpcIlwiLFwiZW5hYmxlUGFyYWxsZWxCdWlsZGluZ1wiOlwiMVwiLFwiZW5hYmxlUGFyYWxsZWxDaGVja2luZ1wiOlwiMVwiLFwiZW5hYmxlUGFyYWxsZWxJbnN0YWxsaW5nXCI6XCJcIixcImVuYWJsZVNoYXJlZFwiOlwiMVwiLFwiaGFyZGVuaW5nRGlzYWJsZVwiOlwiZm9ybWF0IHBpZSBzdGFja2NsYXNocHJvdGVjdGlvblwiLFwiaW5mb1wiOlwiLzFxMjlrZjFhMG5jY3c3MGMwYjhhMW1nMTBqcjdiNWx2djVtN3YzandkZmZuc3k2bnZ4eXlcIixcImxpYlwiOlwiLzBzcmEyeTE4bHIzaDZqNThxam0wdzQ2eXYzNmgxd2ptaWxiMDluOGFpbWRwaXZkeW1zY3hcIixcImxpYmNfZGV2XCI6XCIvbml4L3N0b3JlLzN2eng1cDh4Znl4OWtneXZoemRnZHIxMGowOW5qZjduLWdsaWJjLTIuNDAtNjYtZGV2XCIsXCJsaWJnY2NcIjpcIi8xYXNwaG5kY2Q1ZGptaDJ4emM0OHJrYnA5cmxpcHo2YWF2MDJ4YmthOThoYjRma20wM3ByXCIsXCJtYW5cIjpcIi8xM3czdzVqeHIzMmN3bGhra2hnejd3NjVmZmZ6Z3Y3ZmtkNDh6aTduY3o5Z2hxemhucXB3XCIsXCJtZXNvbkZsYWdzXCI6XCJcIixcIm5hbWVcIjpcImdjYy0xNC4yLjEuMjAyNTAzMjJcIixcIm5hdGl2ZUJ1aWxkSW5wdXRzXCI6XCIvbml4L3N0b3JlL2tyemxrYXc1aTBudzJ3aDAzOGc0c3BhajRiZzB3YzQ0LXRleGluZm8tNy4xLjEgL25peC9zdG9yZS9kcHh6cmFrZjFqa2N2OXpod2FxN3BsOWx2Nm01YjBmNC13aGljaC0yLjIzIC9uaXgvc3RvcmUvYzliNXNhNGxxc2RnNWY4d3MxcHYzMDZtNWgyeTI4NmMtZ2V0dGV4dC0wLjIyLjUgL25peC9zdG9yZS92djlxcGliMDk2c2QzeTVweWszNWw0Zmd2bTFpczU5cC1wZXJsLTUuNDAuMCAvbml4L3N0b3JlLzl2bjUwMGEzYzFoNDZrdnltOWY1YzN3YWZ4Y3NjN3ZoLWZsZXgtMi42LjRcIixcIm5vU3lzRGlyc1wiOlwiMVwiLFwib3V0XCI6XCIvMXJ6NGc0em5wemp3aDF4eW1oanBtNDJ2aXB3OTJwcjczdmRnbDZ4czFoeWNhYzhrZjJuOVwiLFwib3V0cHV0SGFzaEFsZ29cIjpcInNoYTI1NlwiLFwib3V0cHV0SGFzaE1vZGVcIjpcInJlY3Vyc2l2ZVwiLFwib3V0cHV0c1wiOlwib3V0IG1hbiBpbmZvIGxpYiBsaWJnY2MgY2hlY2tzdW1cIixcInBhdGNoZXNcIjpcIi9uaXgvc3RvcmUvOTU3N2htZGxtaGtpNjdjZzhhcjg1Y3ZpZHlnN3hyN3AtZ2NjLTEyLW5vLXN5cy1kaXJzLnBhdGNoIC9uaXgvc3RvcmUvN3g2YmltajZpcGk2YWc4NTlnaTJmYzZieTg3eDM3ajctbm8tc3lzLWRpcnMtcmlzY3YucGF0Y2ggL25peC9zdG9yZS94cHBsdnhpd2I0bGkycWQ1bnZoeWQybW5ncnBuYTB5YS1tYW5nbGUtTklYX1NUT1JFLWluLV9fRklMRV9fLnBhdGNoIC9uaXgvc3RvcmUvNjMyYjB5NW1rY2R3YnN3MmczeGg1cXpudzJ2djVheHItcHBjLW11c2wucGF0Y2ggL25peC9zdG9yZS8zY2o4cW0zeGp6MWc1Zjdxbm54bGM5NWk5aW1raWNiay1jZmlfc3RhcnRwcm9jLXJlb3JkZXItbGFiZWwtMTQtMS5kaWZmXCIsXCJwbmFtZVwiOlwiZ2NjXCIsXCJwb3N0Q29uZmlndXJlXCI6XCIjIEF2b2lkIHN0b3JlIHBhdGhzIHdoZW4gZW1iZWRkaW5nIC4vY29uZmlndXJlIGZsYWdzIGludG8gZ2NjLlxcbiMgTWFuZ2xlZCBhcmd1bWVudHMgYXJlIHN0aWxsIHVzZWZ1bCB3aGVuIHJlcG9ydGluZyBidWdzIHVwc3RyZWFtLlxcbnNlZCAtZSBcXFwiL1RPUExFVkVMX0NPTkZJR1VSRV9BUkdVTUVOVFM9LyBzfCROSVhfU1RPUkUvW2EtejAtOV1cXFxcezMyXFxcXH0tfCROSVhfU1RPUkUvZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWUtfGdcXFwiIC1pIE1ha2VmaWxlXFxuXCIsXCJwb3N0SW5zdGFsbFwiOlwiIyBDbGVhbiB1cCBvdXIgY29tcGF0aWJpbGl0eSBzeW1saW5rcyAoc2VlIGFib3ZlKVxcbmZvciBsaW5rIGluIFxcXCIke2NvbXBhdGliaWxpdHlTeW1saW5rc1tAXX1cXFwiOyBkb1xcbiAgZWNobyBcXFwiUmVtb3ZpbmcgY29tcGF0aWJpbGl0eSBzeW1saW5rOiAkbGlua1xcXCJcXG4gIHJtIC1mIFxcXCIkbGlua1xcXCJcXG5kb25lXFxuXFxuIyBNb3ZlIHRhcmdldCBydW50aW1lIGxpYnJhcmllcyB0byBsaWIgb3V0cHV0LlxcbiMgRm9yIG5vbi1jcm9zcywgdGhleSdyZSBpbiAkb3V0L2xpYjsgZm9yIGNyb3NzLCB0aGV5J3JlIGluICRvdXQvJHRhcmdldENvbmZpZy9saWIuXFxudGFyZ2V0TGliRGlyPVxcXCIke3RhcmdldENvbmZpZyskdGFyZ2V0Q29uZmlnL31saWJcXFwiXFxuXFxubW92ZVRvT3V0cHV0IFxcXCIkdGFyZ2V0TGliRGlyL2xpYiouc28qXFxcIiBcXFwiJHshb3V0cHV0TGlifVxcXCJcXG5tb3ZlVG9PdXRwdXQgXFxcIiR0YXJnZXRMaWJEaXIvbGliKi5keWxpYlxcXCIgXFxcIiR7IW91dHB1dExpYn1cXFwiXFxubW92ZVRvT3V0cHV0IFxcXCIkdGFyZ2V0TGliRGlyL2xpYiouZGxsLmFcXFwiIFxcXCIkeyFvdXRwdXRMaWJ9XFxcIlxcbm1vdmVUb091dHB1dCBcXFwiJHRhcmdldExpYkRpci9saWIqLmRsbFxcXCIgXFxcIiR7IW91dHB1dExpYn1cXFwiXFxubW92ZVRvT3V0cHV0IFxcXCJzaGFyZS9nY2MtKi9weXRob25cXFwiIFxcXCIkeyFvdXRwdXRMaWJ9XFxcIlxcblxcbmlmIFsgLXogXFxcIiRlbmFibGVTaGFyZWRcXFwiIF07IHRoZW5cXG4gICAgbW92ZVRvT3V0cHV0IFxcXCIkdGFyZ2V0TGliRGlyL2xpYiouYVxcXCIgXFxcIiR7IW91dHB1dExpYn1cXFwiXFxuZmlcXG5cXG5mb3IgaSBpbiBcXFwiJHshb3V0cHV0TGlifVxcXCIvJHRhcmdldExpYkRpci8qLnB5OyBkb1xcbiAgICBzdWJzdGl0dXRlSW5QbGFjZSBcXFwiJGlcXFwiIC0tcmVwbGFjZSBcXFwiJG91dFxcXCIgXFxcIiR7IW91dHB1dExpYn1cXFwiXFxuZG9uZVxcblxcbiMgTXVsdGlsaWIgYW5kIGNyb3NzIGNhbid0IGV4aXN0IGF0IHRoZSBzYW1lIHRpbWUsIHNvIGp1c3QgdXNlIGxpYjY0IGhlcmVcXG5pZiBbIC1uIFxcXCIkZW5hYmxlTXVsdGlsaWJcXFwiIF07IHRoZW5cXG4gICAgbW92ZVRvT3V0cHV0IFxcXCJsaWI2NC9saWIqLnNvKlxcXCIgXFxcIiR7IW91dHB1dExpYn1cXFwiXFxuICAgIG1vdmVUb091dHB1dCBcXFwibGliNjQvbGliKi5keWxpYlxcXCIgXFxcIiR7IW91dHB1dExpYn1cXFwiXFxuICAgIG1vdmVUb091dHB1dCBcXFwibGliNjQvbGliKi5kbGwuYVxcXCIgXFxcIiR7IW91dHB1dExpYn1cXFwiXFxuICAgIG1vdmVUb091dHB1dCBcXFwibGliNjQvbGliKi5kbGxcXFwiIFxcXCIkeyFvdXRwdXRMaWJ9XFxcIlxcblxcbiAgICBmb3IgaSBpbiBcXFwiJHshb3V0cHV0TGlifVxcXCIvbGliNjQvKi5weTsgZG9cXG4gICAgICAgIHN1YnN0aXR1dGVJblBsYWNlIFxcXCIkaVxcXCIgLS1yZXBsYWNlIFxcXCIkb3V0XFxcIiBcXFwiJHshb3V0cHV0TGlifVxcXCJcXG4gICAgZG9uZVxcbmZpXFxuXFxuIyBSZW1vdmUgYGZpeGluY2wnIHRvIHByZXZlbnQgYSByZXRhaW5lZCBkZXBlbmRlbmN5IG9uIHRoZVxcbiMgcHJldmlvdXMgZ2NjLlxcbnJtIC1yZiAkb3V0L2xpYmV4ZWMvZ2NjLyovKi9pbnN0YWxsLXRvb2xzXFxucm0gLXJmICRvdXQvbGliL2djYy8qLyovaW5zdGFsbC10b29sc1xcblxcbiMgTW9yZSBkZXBlbmRlbmNpZXMgd2l0aCB0aGUgcHJldmlvdXMgZ2NjIG9yIHNvbWUgbGlicyAoZ2NjYnVnIHN0b3JlcyB0aGUgYnVpbGQgY29tbWFuZCBsaW5lKVxcbnJtIC1yZiAkb3V0L2Jpbi9nY2NidWdcXG5cXG4jIFJlbW92ZSAubGEgZmlsZXMsIHRoZXkncmUgbm90IGFkanVzdGVkIGZvciB0aGUgbWFrZUNvbXBhdGliaWxpdHlTeW1saW5rIG1hZ2ljLFxcbiMgd2hpY2ggY29uZnVzZXMgbGlidG9vbCBhbmQgbGVhZHMgdG8gd2VpcmQgbGlua2luZyBlcnJvcnMuXFxuIyBSZW1vdmluZyB0aGUgZmlsZXMganVzdCBtYWtlcyBsaWJ0b29sIGxpbmsgLnNvIGZpbGVzIGRpcmVjdGx5LCB3aGljaCBpcyB1c3VhbGx5XFxuIyB3aGF0IHdlIHdhbnQgYW55d2F5LlxcbmZpbmQgJG91dCAtbmFtZSAnKi5sYScgLWRlbGV0ZVxcblxcbmlmIHR5cGUgXFxcImluc3RhbGxfbmFtZV90b29sXFxcIjsgdGhlblxcbiAgICBmb3IgaSBpbiBcXFwiJHshb3V0cHV0TGlifVxcXCIvbGliLyouKi5keWxpYiBcXFwiJHshb3V0cHV0TGlifVxcXCIvbGliLyouc28uWzAtOV07IGRvXFxuICAgICAgICBpbnN0YWxsX25hbWVfdG9vbCAtaWQgXFxcIiRpXFxcIiBcXFwiJGlcXFwiIHx8IHRydWVcXG4gICAgICAgIGZvciBvbGRfcGF0aCBpbiAkKG90b29sIC1MIFxcXCIkaVxcXCIgfCBncmVwIFxcXCIkb3V0XFxcIiB8IGF3ayAne3ByaW50ICQxfScpOyBkb1xcbiAgICAgICAgICBuZXdfcGF0aD1gZWNobyBcXFwiJG9sZF9wYXRoXFxcIiB8IHNlZCBcXFwicywkb3V0LCR7IW91dHB1dExpYn0sXFxcImBcXG4gICAgICAgICAgaW5zdGFsbF9uYW1lX3Rvb2wgLWNoYW5nZSBcXFwiJG9sZF9wYXRoXFxcIiBcXFwiJG5ld19wYXRoXFxcIiBcXFwiJGlcXFwiIHx8IHRydWVcXG4gICAgICAgIGRvbmVcXG4gICAgZG9uZVxcbmZpXFxuXFxuIyBHZXQgcmlkIG9mIHNvbWUgXFxcImZpeGVkXFxcIiBoZWFkZXIgZmlsZXNcXG5ybSAtcmZ2ICRvdXQvbGliL2djYy8qLyovaW5jbHVkZS1maXhlZC97cm9vdCxsaW51eCxzeXMvbW91bnQuaCxiaXRzL3N0YXR4LmgscHRocmVhZC5ofVxcblxcbiMgUmVwbGFjZSBoYXJkIGxpbmtzIGZvciBpNjg2LXBjLWxpbnV4LWdudS1nY2MgZXRjLiB3aXRoIHN5bWxpbmtzLlxcbmZvciBpIGluICRvdXQvYmluLyotZ2NjKjsgZG9cXG4gICAgaWYgY21wIC1zICRvdXQvYmluL2djYyAkaTsgdGhlblxcbiAgICAgICAgbG4gLXNmbiBnY2MgJGlcXG4gICAgZmlcXG5kb25lXFxuXFxuZm9yIGkgaW4gJG91dC9iaW4vYysrICRvdXQvYmluLyotYysrKiAkb3V0L2Jpbi8qLWcrKyo7IGRvXFxuICAgIGlmIGNtcCAtcyAkb3V0L2Jpbi9nKysgJGk7IHRoZW5cXG4gICAgICAgIGxuIC1zZm4gZysrICRpXFxuICAgIGZpXFxuZG9uZVxcblxcbiMgVHdvIGlkZW50aWNhbCBtYW4gcGFnZXMgYXJlIHNoaXBwZWQgKG1vdmluZyBhbmQgY29tcHJlc3NpbmcgaXMgZG9uZSBsYXRlcilcXG5mb3IgaSBpbiBcXFwiJG91dFxcXCIvc2hhcmUvbWFuL21hbjEvKmcrKy4xOyBkb1xcbiAgICBpZiB0ZXN0IC1lIFxcXCIkaVxcXCI7IHRoZW5cXG4gICAgICAgIG1hbl9wcmVmaXg9YGVjaG8gXFxcIiRpXFxcIiB8IHNlZCBcXFwicywuKi9cXFxcKC4qXFxcXClnKysuMSxcXFxcMSxcXFwiYFxcbiAgICAgICAgbG4gLXNmIFxcXCIkbWFuX3ByZWZpeFxcXCJnY2MuMSBcXFwiJGlcXFwiXFxuICAgIGZpXFxuZG9uZVxcblwiLFwicG9zdEluc3RhbGxTYXZlQ2hlY2tzdW1QaGFzZVwiOlwibXYgZ2NjL2J1aWxkL2dlbmNoZWNrc3VtIGdjYy9idWlsZC8uZ2VuY2hlY2tzdW0td3JhcHBlZFxcbmNhdCA-IGdjYy9idWlsZC9nZW5jaGVja3N1bSA8PFxcXFxFT0ZcXG4jIS9uaXgvc3RvcmUvaTk3czJzNmZteGp5NTg4NXljMWhtbWg4YnltYTFuamMtYmFzaC01LjJwMzcvYmluL2Jhc2hcXG4vbml4L3N0b3JlLzBmd3E4djNtdmRoNGozaWk1ZDRuZGpseHkweTg5aWw2LW51a2UtcmVmZXJlbmNlcy9iaW4vbnVrZS1yZWZzICRAXFxuZm9yIElOUFVUIGluIFxcXCIkQFxcXCI7IGRvIGluc3RhbGwgLUR0ICRJTlBVVCAkY2hlY2tzdW0vaW5wdXRzLzsgZG9uZVxcbmV4ZWMgYnVpbGQvLmdlbmNoZWNrc3VtLXdyYXBwZWQgJEBcXG5FT0ZcXG5jaG1vZCAreCBnY2MvYnVpbGQvZ2VuY2hlY2tzdW1cXG5ybSBnY2MvKi1jaGVja3N1bS4qXFxubWFrZSAtQyBnY2MgY2MxLWNoZWNrc3VtLm8gY2MxcGx1cy1jaGVja3N1bS5vXFxuaW5zdGFsbCAtRHQgJGNoZWNrc3VtL2NoZWNrc3Vtcy8gZ2NjL2NjKi1jaGVja3N1bS5vXFxuXCIsXCJwb3N0UGF0Y2hcIjpcImNvbmZpZ3VyZVNjcmlwdHM9JChmaW5kIC4gLW5hbWUgY29uZmlndXJlKVxcbmZvciBjb25maWd1cmVTY3JpcHQgaW4gJGNvbmZpZ3VyZVNjcmlwdHM7IGRvXFxuICBwYXRjaFNoZWJhbmdzICRjb25maWd1cmVTY3JpcHRcXG5kb25lXFxuXFxuIyBNYWtlIHN1cmUgbml4cGtncyB2ZXJzaW9uaW5nIG1hdGNoIHVwc3RyZWFtIG9uZVxcbiMgdG8gZWFzZSB2ZXJzaW9uLWJhc2VkIGNvbXBhcmlzb25zLlxcbmdjY19iYXNlX3ZlcnNpb249JCg8IGdjYy9CQVNFLVZFUilcXG5pZiBbWyAxNC4yLjEgIT0gJGdjY19iYXNlX3ZlcnNpb24gXV07IHRoZW5cXG4gIGVjaG8gXFxcIlBsZWFzZSB1cGRhdGUgJ3ZlcnNpb24nIHZhcmlhYmxlOlxcXCJcXG4gIGVjaG8gXFxcIiAgRXhwZWN0ZWQ6ICckZ2NjX2Jhc2VfdmVyc2lvbidcXFwiXFxuICBlY2hvIFxcXCIgIEFjdHVhbDogJzE0LjIuMS4yMDI1MDMyMidcXFwiXFxuICBleGl0IDFcXG5maVxcbmVjaG8gXFxcImZpeGluZyB0aGUge0dMSUJDLFVDTElCQyxNVVNMfV9EWU5BTUlDX0xJTktFUiBtYWNyb3MuLi5cXFwiXFxuZm9yIGhlYWRlciBpbiBcXFwiZ2NjL2NvbmZpZy9cXFwiKi1nbnUuaCBcXFwiZ2NjL2NvbmZpZy9cXFwiKlxcXCIvXFxcIiouaFxcbmRvXFxuICBncmVwIC1xIF9EWU5BTUlDX0xJTktFUiBcXFwiJGhlYWRlclxcXCIgfHwgY29udGludWVcXG4gIGVjaG8gXFxcIiAgZml4aW5nICRoZWFkZXIuLi5cXFwiXFxuICBzZWQgLWkgXFxcIiRoZWFkZXJcXFwiIFxcXFxcXG4gICAgICAtZSAnc3xkZWZpbmVbWzpibGFuazpdXSpcXFxcKFtVQ0ddXFxcXCtcXFxcKUxJQkNfRFlOQU1JQ19MSU5LRVJcXFxcKFswLTldKlxcXFwpW1s6Ymxhbms6XV1cXFwiXFxcXChbXlxcXFxcXFwiXVxcXFwrXFxcXClcXFwiJHxkZWZpbmUgXFxcXDFMSUJDX0RZTkFNSUNfTElOS0VSXFxcXDIgXFxcIi9uaXgvc3RvcmUvOThzdjY3eDdiN2NkbWpkZzJ5ZzRxZDVsYWNnbng3dmEtZ2xpYmMtMi40MC02NlxcXFwzXFxcInxnJyBcXFxcXFxuICAgICAgLWUgJ3N8ZGVmaW5lW1s6Ymxhbms6XV0qTVVTTF9EWU5BTUlDX0xJTktFUlxcXFwoWzAtOV0qXFxcXClbWzpibGFuazpdXVxcXCJcXFxcKFteXFxcXFxcXCJdXFxcXCtcXFxcKVxcXCIkfGRlZmluZSBNVVNMX0RZTkFNSUNfTElOS0VSXFxcXDEgXFxcIi9uaXgvc3RvcmUvOThzdjY3eDdiN2NkbWpkZzJ5ZzRxZDVsYWNnbng3dmEtZ2xpYmMtMi40MC02NlxcXFwyXFxcInxnJ1xcbiAgZG9uZVxcblwiLFwicHJlQ29uZmlndXJlXCI6XCJsbiAtc2YgL25peC9zdG9yZS9xc3JjYXZtcTRuODh2MXB3N2lybDJoNnphazJmZ2I5Ni1saWJ4Y3J5cHQtNC40LjM4L2luY2x1ZGUvY3J5cHQuaCBsaWJzYW5pdGl6ZXIvc2FuaXRpemVyX2NvbW1vbi9jcnlwdC5oXFxuaWYgdGVzdCAtbiBcXFwiJG5ld2xpYlNyY1xcXCI7IHRoZW5cXG4gICAgdGFyIHh2ZiBcXFwiJG5ld2xpYlNyY1xcXCIgLUMgLi5cXG4gICAgbG4gLXMgLi4vbmV3bGliLSovbmV3bGliIG5ld2xpYlxcbiAgICAjIFBhdGNoIHRvIGdldCBhcm12dDVlbCB3b3JraW5nOlxcbiAgICBzZWQgLWkgLWUgJ3MvIGFybSkvIGFybSopLycgbmV3bGliL2NvbmZpZ3VyZS5ob3N0XFxuZmlcXG5cXG4jIEJ1ZyAtIHRoZXkgcGFja2FnZWQgemxpYlxcbmlmIHRlc3QgLWQgXFxcInpsaWJcXFwiOyB0aGVuXFxuICAgICMgVGhpcyBicmVha3MgdGhlIGJ1aWxkIHdpdGhvdXQtaGVhZGVycywgd2hpY2ggc2hvdWxkIGJ1aWxkIG9ubHlcXG4gICAgIyB0aGUgdGFyZ2V0IGxpYmdjYyBhcyB0YXJnZXQgbGlicmFyaWVzLlxcbiAgICAjIFNlZSAnY29uZmlndXJlOjUzNzAnXFxuICAgIHJtIC1SZiB6bGliXFxuZmlcXG5cXG5pZiB0ZXN0IC1uIFxcXCIkY3Jvc3NNaW5nd1xcXCIgLWEgLW4gXFxcIiR3aXRob3V0VGFyZ2V0TGliY1xcXCI7IHRoZW5cXG4gICAgbWtkaXIgLXAgLi4vbWluZ3dcXG4gICAgIyAtLXdpdGgtYnVpbGQtc3lzcm9vdCBleHBlY3RzIHRoYXQ6XFxuICAgIGNwIC1SICRsaWJjQ3Jvc3MvaW5jbHVkZSAuLi9taW5nd1xcbiAgICBhcHBlbmRUb1ZhciBjb25maWd1cmVGbGFncyBcXFwiLS13aXRoLWJ1aWxkLXN5c3Jvb3Q9YHB3ZGAvLi5cXFwiXFxuZmlcXG5cXG4jIFBlcmZvcm0gdGhlIGJ1aWxkIGluIGEgZGlmZmVyZW50IGRpcmVjdG9yeS5cXG5ta2RpciAuLi9idWlsZFxcbmNkIC4uL2J1aWxkXFxuY29uZmlndXJlU2NyaXB0PS4uLyRzb3VyY2VSb290L2NvbmZpZ3VyZVxcblwiLFwicHJlRml4dXBcIjpcIiMgUG9wdWxhdGUgbW9zdCBkZWxpY2F0ZWQgbGliLyBwYXJ0IG9mIHN0cmlwRGVidWdMaXN0eyxUYXJnZXR9XFxudXBkYXRlRGVidWdMaXN0UGF0aHMoKSB7XFxuICBsb2NhbCBvbGRPcHRzXFxuICBvbGRPcHRzPVxcXCIkKHNob3B0IC1wIG51bGxnbG9iKVxcXCIgfHwgdHJ1ZVxcbiAgc2hvcHQgLXMgbnVsbGdsb2JcXG5cXG4gIHB1c2hkICRvdXRcXG4gIGxvY2FsIC1hciBvdXRIb3N0RmlsZXM9KFxcbiAgICBsaWJ7LDMyLDY0fS8qLnthLG8sc28qfVxcbiAgICBsaWJ7LDMyLDY0fS9nY2MveDg2XzY0LXVua25vd24tbGludXgtZ251LyovcGx1Z2luXFxuICApXFxuICBsb2NhbCAtYXIgb3V0VGFyZ2V0RmlsZXM9KFxcbiAgICBsaWJ7LDMyLDY0fS9nY2MveDg2XzY0LXVua25vd24tbGludXgtZ251LyovKi57YSxvLHNvKn1cXG4gIClcXG4gIHBvcGRcXG5cXG4gIHB1c2hkICRsaWJcXG4gIGxvY2FsIC1hciBsaWJIb3N0RmlsZXM9KFxcbiAgICBsaWJ7LDMyLDY0fS8qLnthLG8sc28qfVxcbiAgKVxcbiAgbG9jYWwgLWFyIGxpYlRhcmdldEZpbGVzPShcXG4gICAgbGlieywzMiw2NH0veDg2XzY0LXVua25vd24tbGludXgtZ251Lyoue2Esbyxzbyp9XFxuICApXFxuICBwb3BkXFxuXFxuICBldmFsIFxcXCIkb2xkT3B0c1xcXCJcXG5cXG4gIHN0cmlwRGVidWdMaXN0PVxcXCIkc3RyaXBEZWJ1Z0xpc3QgJHtvdXRIb3N0RmlsZXNbKl19ICR7bGliSG9zdEZpbGVzWypdfVxcXCJcXG4gIHN0cmlwRGVidWdMaXN0VGFyZ2V0PVxcXCIkc3RyaXBEZWJ1Z0xpc3RUYXJnZXQgJHtvdXRUYXJnZXRGaWxlc1sqXX0gJHtsaWJUYXJnZXRGaWxlc1sqXX1cXFwiXFxufVxcbnVwZGF0ZURlYnVnTGlzdFBhdGhzXFxuXCIsXCJwcmVGaXh1cExpYkdjY1BoYXNlXCI6XCIjIG1vdmUgbGliZ2NjIGZyb20gbGliIHRvIGl0cyBvd24gb3V0cHV0IChsaWJnY2MpXFxubWtkaXIgLXAgJGxpYmdjYy9saWJcXG5tdiAgICAkbGliL2xpYi9saWJnY2Nfcy5zbyAgICAgICRsaWJnY2MvbGliL1xcbm12ICAgICRsaWIvbGliL2xpYmdjY19zLnNvLjEgICAgJGxpYmdjYy9saWIvXFxubG4gLXMgJGxpYmdjYy9saWIvbGliZ2NjX3Muc28gICAkbGliL2xpYi9cXG5sbiAtcyAkbGliZ2NjL2xpYi9saWJnY2Nfcy5zby4xICRsaWIvbGliL1xcbnBhdGNoZWxmIC0tc2V0LXJwYXRoIFxcXCJcXFwiICRsaWJnY2MvbGliL2xpYmdjY19zLnNvLjFcXG5cIixcInByZUZpeHVwUGhhc2VzXCI6XCJwcmVGaXh1cExpYkdjY1BoYXNlIHBvc3RJbnN0YWxsU2F2ZUNoZWNrc3VtUGhhc2VcIixcInByZUluc3RhbGxcIjpcImRlY2xhcmUgLWdhIGNvbXBhdGliaWxpdHlTeW1saW5rcz0oKVxcblxcbm1ha2VDb21wYXRpYmlsaXR5U3ltbGluaygpIHtcXG4gIGRlY2xhcmUgLWEgb3V0cHV0c1RvTGluaz0oXFxcIiRvdXRcXFwiKVxcblxcbiAgaWYgWyAtbiBcXFwiJGxpYlxcXCIgXTsgdGhlblxcbiAgICBvdXRwdXRzVG9MaW5rKz0oXFxcIiRsaWJcXFwiKVxcbiAgZmlcXG5cXG4gIGZvciBvdXRwdXQgaW4gXFxcIiR7b3V0cHV0c1RvTGlua1tAXX1cXFwiOyBkb1xcbiAgICBsb2NhbCBsaW5rVGFyZ2V0PVxcXCIkMVxcXCJcXG4gICAgbG9jYWwgbGlua05hbWU9XFxcIiRvdXRwdXQvJDJcXFwiXFxuXFxuICAgIGVjaG8gXFxcIkNyZWF0aW5nIGNvbXBhdGliaWxpdHkgc3ltbGluazogJGxpbmtUYXJnZXQgLT4gJGxpbmtOYW1lXFxcIlxcblxcbiAgICBta2RpciAtcCBcXFwiJChkaXJuYW1lIFxcXCIkbGlua05hbWVcXFwiKVxcXCJcXG4gICAgbG4gLXMgXFxcIiRsaW5rVGFyZ2V0XFxcIiBcXFwiJGxpbmtOYW1lXFxcIlxcbiAgICBjb21wYXRpYmlsaXR5U3ltbGlua3MrPShcXFwiJGxpbmtOYW1lXFxcIilcXG4gIGRvbmVcXG59XFxubWFrZUNvbXBhdGliaWxpdHlTeW1saW5rIGxpYiBsaWIzMlxcbm1ha2VDb21wYXRpYmlsaXR5U3ltbGluayBsaWIgbGliNjRcXG5cIixcInByZVVucGFja1wiOlwib2xkT3B0cz1cXFwiJChzaG9wdCAtcG8gbm91bnNldClcXFwiIHx8IHRydWVcXG5zZXQgLWV1byBwaXBlZmFpbFxcblxcbmV4cG9ydCBOSVhfRklYSU5DX0RVTU1ZPVxcXCIkTklYX0JVSUxEX1RPUC9kdW1teVxcXCJcXG5ta2RpciBcXFwiJE5JWF9GSVhJTkNfRFVNTVlcXFwiXFxuXFxuaWYgdGVzdCBcXFwiJHN0YXRpY0NvbXBpbGVyXFxcIiA9IFxcXCIxXFxcIjsgdGhlblxcbiAgICBFWFRSQV9MREZMQUdTPVxcXCItc3RhdGljXFxcIlxcbmVsaWYgdGVzdCBcXFwiJHtOSVhfRE9OVF9TRVRfUlBBVEgtfVxcXCIgIT0gXFxcIjFcXFwiOyB0aGVuXFxuICAgIEVYVFJBX0xERkxBR1M9XFxcIi1XbCwtcnBhdGgsJHshb3V0cHV0TGlifS9saWJcXFwiXFxuZWxzZVxcbiAgICBFWFRSQV9MREZMQUdTPVxcXCJcXFwiXFxuZmlcXG5cXG4jIEdDQyBpbnRlcnByZXRzIGVtcHR5IHBhdGhzIGFzIFxcXCIuXFxcIiwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cXG5pZiB0ZXN0IC16IFxcXCIke0NQQVRILX1cXFwiOyB0aGVuIHVuc2V0IENQQVRIOyBmaVxcbmlmIHRlc3QgLXogXFxcIiR7TElCUkFSWV9QQVRILX1cXFwiOyB0aGVuIHVuc2V0IExJQlJBUllfUEFUSDsgZmlcXG5lY2hvIFxcXCJcXFxcJENQQVRIIGlzIFxcXFxgJHtDUEFUSC19J1xcXCJcXG5lY2hvIFxcXCJcXFxcJExJQlJBUllfUEFUSCBpcyBcXFxcYCR7TElCUkFSWV9QQVRILX0nXFxcIlxcblxcbmlmIHRlc3QgXFxcIiRub1N5c0RpcnNcXFwiID0gXFxcIjFcXFwiOyB0aGVuXFxuXFxuICAgIGRlY2xhcmUgLWcgXFxcXFxcbiAgICAgICAgRVhUUkFfRkxBR1NfRk9SX0JVSUxEIEVYVFJBX0ZMQUdTIEVYVFJBX0ZMQUdTX0ZPUl9UQVJHRVQgXFxcXFxcbiAgICAgICAgRVhUUkFfTERGTEFHU19GT1JfQlVJTEQgRVhUUkFfTERGTEFHU19GT1JfVEFSR0VUXFxuXFxuICAgICMgRXh0cmFjdCBmbGFncyBmcm9tIEJpbnRvb2xzIFdyYXBwZXJzXFxuICAgIGZvciBwb3N0IGluICdfRk9SX0JVSUxEJyBcXFwiXFxcIjsgZG9cXG4gICAgICAgIGN1ckJpbnRvb2xzPVxcXCJOSVhfQklOVE9PTFMke3Bvc3R9XFxcIlxcblxcbiAgICAgICAgZGVjbGFyZSAtYSBleHRyYUxERmxhZ3M9KClcXG4gICAgICAgIGlmIFtbIC1lIFxcXCIkeyFjdXJCaW50b29sc30vbml4LXN1cHBvcnQvb3JpZy1saWJjXFxcIiBdXTsgdGhlblxcbiAgICAgICAgICAgICMgRmlndXJlIG91dCB3aGF0IGV4dHJhIGZsYWdzIHdoZW4gbGlua2luZyB0byBwYXNzIHRvIHRoZSBnY2NcXG4gICAgICAgICAgICAjIGNvbXBpbGVycyBiZWluZyBnZW5lcmF0ZWQgdG8gbWFrZSBzdXJlIHRoYXQgdGhleSB1c2Ugb3VyIGxpYmMuXFxuICAgICAgICAgICAgZXh0cmFMREZsYWdzPSgkKDwgXFxcIiR7IWN1ckJpbnRvb2xzfS9uaXgtc3VwcG9ydC9saWJjLWxkZmxhZ3NcXFwiKSAkKDwgXFxcIiR7IWN1ckJpbnRvb2xzfS9uaXgtc3VwcG9ydC9saWJjLWxkZmxhZ3MtYmVmb3JlXFxcIiB8fCB0cnVlKSlcXG4gICAgICAgICAgICBpZiBbIC1lICR7IWN1ckJpbnRvb2xzfS9uaXgtc3VwcG9ydC9sZC1zZXQtZHluYW1pYy1saW5rZXIgXTsgdGhlblxcbiAgICAgICAgICAgICAgICBleHRyYUxERmxhZ3M9LWR5bmFtaWMtbGlua2VyPSQoPCAkeyFjdXJCaW50b29sc30vbml4LXN1cHBvcnQvZHluYW1pYy1saW5rZXIpXFxuICAgICAgICAgICAgZmlcXG5cXG4gICAgICAgICAgICAjIFRoZSBwYXRoIHRvIHRoZSBMaWJjIGJpbmFyaWVzIHN1Y2ggYXMgYGNydGkubycuXFxuICAgICAgICAgICAgbGliY19saWJkaXI9XFxcIiQoPCBcXFwiJHshY3VyQmludG9vbHN9L25peC1zdXBwb3J0L29yaWctbGliY1xcXCIpL2xpYlxcXCJcXG4gICAgICAgIGVsc2VcXG4gICAgICAgICAgICAjIEhhY2s6IHN1cHBvcnQgaW1wdXJlIGVudmlyb25tZW50cy5cXG4gICAgICAgICAgICBleHRyYUxERmxhZ3M9KFxcXCItTC91c3IvbGliNjRcXFwiIFxcXCItTC91c3IvbGliXFxcIilcXG4gICAgICAgICAgICBsaWJjX2xpYmRpcj1cXFwiL3Vzci9saWJcXFwiXFxuICAgICAgICBmaVxcbiAgICAgICAgZGVjbGFyZSAtYSBwcmVmaXhFeHRyYUxERmxhZ3M9KClcXG4gICAgICAgIHByZWZpeEV4dHJhTERGbGFncz0oXFxcIi1MJGxpYmNfbGliZGlyXFxcIilcXG4gICAgICAgIG5peERvbnRTZXRScGF0aFZhcj1OSVhfRE9OVF9TRVRfUlBBVEgke3Bvc3R9XFxuICAgICAgICBpZiB0ZXN0IFxcXCIkeyFuaXhEb250U2V0UnBhdGhWYXItfVxcXCIgIT0gXFxcIjFcXFwiOyB0aGVuXFxuICAgICAgICAgICAgcHJlZml4RXh0cmFMREZsYWdzKz0oXFxcIi1ycGF0aFxcXCIgXFxcIiRsaWJjX2xpYmRpclxcXCIpXFxuICAgICAgICBmaVxcbiAgICAgICAgZXh0cmFMREZsYWdzPShcXFwiJHtwcmVmaXhFeHRyYUxERmxhZ3NbQF19XFxcIiBcXFwiJHtleHRyYUxERmxhZ3NbQF19XFxcIilcXG4gICAgICAgIGZvciBpIGluIFxcXCIke2V4dHJhTERGbGFnc1tAXX1cXFwiOyBkb1xcbiAgICAgICAgICAgIGRlY2xhcmUgLWcgRVhUUkFfTERGTEFHUyR7cG9zdH0rPVxcXCIgLVdsLCRpXFxcIlxcbiAgICAgICAgZG9uZVxcbiAgICBkb25lXFxuXFxuICAgICMgRXh0cmFjdCBmbGFncyBmcm9tIENDIFdyYXBwZXJzXFxuICAgIGZvciBwb3N0IGluICdfRk9SX0JVSUxEJyBcXFwiXFxcIjsgZG9cXG4gICAgICAgIGN1ckNDPVxcXCJOSVhfQ0Mke3Bvc3R9XFxcIlxcbiAgICAgICAgY3VyRklYSU5DPVxcXCJOSVhfRklYSU5DX0RVTU1ZJHtwb3N0fVxcXCJcXG5cXG4gICAgICAgIGRlY2xhcmUgLWEgZXh0cmFGbGFncz0oKVxcbiAgICAgICAgaWYgW1sgLWUgXFxcIiR7IWN1ckNDfS9uaXgtc3VwcG9ydC9vcmlnLWxpYmNcXFwiIF1dOyB0aGVuXFxuICAgICAgICAgICAgIyBGaWd1cmUgb3V0IHdoYXQgZXh0cmEgY29tcGlsaW5nIGZsYWdzIHRvIHBhc3MgdG8gdGhlIGdjYyBjb21waWxlcnNcXG4gICAgICAgICAgICAjIGJlaW5nIGdlbmVyYXRlZCB0byBtYWtlIHN1cmUgdGhhdCB0aGV5IHVzZSBvdXIgbGliYy5cXG4gICAgICAgICAgICBleHRyYUZsYWdzPSgkKDwgXFxcIiR7IWN1ckNDfS9uaXgtc3VwcG9ydC9saWJjLWNydDEtY2ZsYWdzXFxcIikgJCg8IFxcXCIkeyFjdXJDQ30vbml4LXN1cHBvcnQvbGliYy1jZmxhZ3NcXFwiKSlcXG5cXG4gICAgICAgICAgICAjIFRoZSBwYXRoIHRvIHRoZSBMaWJjIGhlYWRlcnNcXG4gICAgICAgICAgICBsaWJjX2RldmRpcj1cXFwiJCg8IFxcXCIkeyFjdXJDQ30vbml4LXN1cHBvcnQvb3JpZy1saWJjLWRldlxcXCIpXFxcIlxcblxcbiAgICAgICAgICAgICMgVXNlICpyZWFsKiBoZWFkZXIgZmlsZXMsIG90aGVyd2lzZSBhIGxpbWl0cy5oIGlzIGdlbmVyYXRlZCB0aGF0XFxuICAgICAgICAgICAgIyBkb2VzIG5vdCBpbmNsdWRlIExpYmMncyBsaW1pdHMuaCAobm90YWJseSBtaXNzaW5nIFNTSVpFX01BWCxcXG4gICAgICAgICAgICAjIHdoaWNoIGJyZWFrcyB0aGUgYnVpbGQpLlxcbiAgICAgICAgICAgIGRlY2xhcmUgLWcgTklYX0ZJWElOQ19EVU1NWSR7cG9zdH09XFxcIiRsaWJjX2RldmRpci9pbmNsdWRlXFxcIlxcbiAgICAgICAgZWxzZVxcbiAgICAgICAgICAgICMgSGFjazogc3VwcG9ydCBpbXB1cmUgZW52aXJvbm1lbnRzLlxcbiAgICAgICAgICAgIGV4dHJhRmxhZ3M9KFxcXCItaXN5c3RlbVxcXCIgXFxcIi91c3IvaW5jbHVkZVxcXCIpXFxuICAgICAgICAgICAgZGVjbGFyZSAtZyBOSVhfRklYSU5DX0RVTU1ZJHtwb3N0fT0vdXNyL2luY2x1ZGVcXG4gICAgICAgIGZpXFxuXFxuICAgICAgICBleHRyYUZsYWdzPShcXFwiLUkkeyFjdXJGSVhJTkN9XFxcIiBcXFwiJHtleHRyYUZsYWdzW0BdfVxcXCIpXFxuXFxuICAgICAgICAjIEJPT1RfQ0ZMQUdTIGRlZmF1bHRzIHRvIGAtZyAtTzInOyBzaW5jZSB3ZSBvdmVycmlkZSBpdCBiZWxvdywgbWFrZVxcbiAgICAgICAgIyBzdXJlIHRvIGV4cGxpY3RseSBhZGQgdGhlbSBzbyB0aGF0IGZpbGVzIGNvbXBpbGVkIHdpdGggdGhlIGJvb3RzdHJhcFxcbiAgICAgICAgIyBjb21waWxlciBhcmUgb3B0aW1pemVkIGFuZCAob3B0aW9uYWxseSkgY29udGFpbiBkZWJ1Z2dpbmcgaW5mb3JtYXRpb25cXG4gICAgICAgICMgKGluZm8gXFxcIihnY2NpbnN0YWxsKSBCdWlsZGluZ1xcXCIpLlxcbiAgICAgICAgaWYgdGVzdCAtbiBcXFwiJHtkb250U3RyaXAtfVxcXCI7IHRoZW5cXG4gICAgICAgICAgICBleHRyYUZsYWdzPShcXFwiLU8yXFxcIiBcXFwiLWdcXFwiIFxcXCIke2V4dHJhRmxhZ3NbQF19XFxcIilcXG4gICAgICAgIGVsc2VcXG4gICAgICAgICAgICAjIERvbid0IHBhc3MgYC1nJyBhdCBhbGw7IHRoaXMgc2F2ZXMgc3BhY2Ugd2hpbGUgYnVpbGRpbmcuXFxuICAgICAgICAgICAgZXh0cmFGbGFncz0oXFxcIi1PMlxcXCIgXFxcIiR7ZXh0cmFGbGFnc1tAXX1cXFwiKVxcbiAgICAgICAgZmlcXG5cXG4gICAgICAgIGRlY2xhcmUgLWcgRVhUUkFfRkxBR1Mke3Bvc3R9PVxcXCIke2V4dHJhRmxhZ3NbKl19XFxcIlxcbiAgICBkb25lXFxuXFxuICAgIGlmIHRlc3QgLXogXFxcIiR7dGFyZ2V0Q29uZmlnLX1cXFwiOyB0aGVuXFxuICAgICAgICAjIGhvc3QgPSB0YXJnZXQsIHNvIHRoZSBmbGFncyBhcmUgdGhlIHNhbWVcXG4gICAgICAgIEVYVFJBX0ZMQUdTX0ZPUl9UQVJHRVQ9XFxcIiRFWFRSQV9GTEFHU1xcXCJcXG4gICAgICAgIEVYVFJBX0xERkxBR1NfRk9SX1RBUkdFVD1cXFwiJEVYVFJBX0xERkxBR1NcXFwiXFxuICAgIGZpXFxuXFxuICAgICMgQ0ZMQUdTX0ZPUl9UQVJHRVQgYXJlIG5lZWRlZCBmb3IgdGhlIGxpYnN0ZGMrKyBjb25maWd1cmUgc2NyaXB0IHRvIGZpbmRcXG4gICAgIyB0aGUgc3RhcnRmaWxlcy5cXG4gICAgIyBGTEFHU19GT1JfVEFSR0VUIGFyZSBuZWVkZWQgZm9yIHRoZSB0YXJnZXQgbGlicmFyaWVzIHRvIHJlY2VpdmUgdGhlIC1CeHh4XFxuICAgICMgZm9yIHRoZSBzdGFydGZpbGVzLlxcbiAgICBtYWtlRmxhZ3NBcnJheSs9KFxcbiAgICAgICAgXFxcIkJVSUxEX1NZU1RFTV9IRUFERVJfRElSPSROSVhfRklYSU5DX0RVTU1ZX0ZPUl9CVUlMRFxcXCJcXG4gICAgICAgIFxcXCJTWVNURU1fSEVBREVSX0RJUj0kTklYX0ZJWElOQ19EVU1NWV9GT1JfQlVJTERcXFwiXFxuICAgICAgICBcXFwiTkFUSVZFX1NZU1RFTV9IRUFERVJfRElSPSROSVhfRklYSU5DX0RVTU1ZXFxcIlxcblxcbiAgICAgICAgXFxcIkxERkxBR1NfRk9SX0JVSUxEPSRFWFRSQV9MREZMQUdTX0ZPUl9CVUlMRFxcXCJcXG4gICAgICAgICNcXFwiTERGTEFHUz0kRVhUUkFfTERGTEFHU1xcXCJcXG4gICAgICAgIFxcXCJMREZMQUdTX0ZPUl9UQVJHRVQ9JEVYVFJBX0xERkxBR1NfRk9SX1RBUkdFVFxcXCJcXG5cXG4gICAgICAgIFxcXCJDRkxBR1NfRk9SX0JVSUxEPSRFWFRSQV9GTEFHU19GT1JfQlVJTEQgJEVYVFJBX0xERkxBR1NfRk9SX0JVSUxEXFxcIlxcbiAgICAgICAgXFxcIkNYWEZMQUdTX0ZPUl9CVUlMRD0kRVhUUkFfRkxBR1NfRk9SX0JVSUxEICRFWFRSQV9MREZMQUdTX0ZPUl9CVUlMRFxcXCJcXG4gICAgICAgIFxcXCJGTEFHU19GT1JfQlVJTEQ9JEVYVFJBX0ZMQUdTX0ZPUl9CVUlMRCAkRVhUUkFfTERGTEFHU19GT1JfQlVJTERcXFwiXFxuXFxuICAgICAgICAjIEl0IHNlZW1zIHRoZXJlIGlzIGEgYnVnIGluIEdDQyA1XFxuICAgICAgICAjXFxcIkNGTEFHUz0kRVhUUkFfRkxBR1MgJEVYVFJBX0xERkxBR1NcXFwiXFxuICAgICAgICAjXFxcIkNYWEZMQUdTPSRFWFRSQV9GTEFHUyAkRVhUUkFfTERGTEFHU1xcXCJcXG5cXG4gICAgICAgIFxcXCJDRkxBR1NfRk9SX1RBUkdFVD0kRVhUUkFfRkxBR1NfRk9SX1RBUkdFVCAkRVhUUkFfTERGTEFHU19GT1JfVEFSR0VUXFxcIlxcbiAgICAgICAgXFxcIkNYWEZMQUdTX0ZPUl9UQVJHRVQ9JEVYVFJBX0ZMQUdTX0ZPUl9UQVJHRVQgJEVYVFJBX0xERkxBR1NfRk9SX1RBUkdFVFxcXCJcXG4gICAgICAgIFxcXCJGTEFHU19GT1JfVEFSR0VUPSRFWFRSQV9GTEFHU19GT1JfVEFSR0VUICRFWFRSQV9MREZMQUdTX0ZPUl9UQVJHRVRcXFwiXFxuICAgIClcXG5cXG4gICAgaWYgdGVzdCAteiBcXFwiJHt0YXJnZXRDb25maWctfVxcXCI7IHRoZW5cXG4gICAgICAgIG1ha2VGbGFnc0FycmF5Kz0oXFxuICAgICAgICAgICAgXFxcIkJPT1RfQ0ZMQUdTPSRFWFRSQV9GTEFHUyAkRVhUUkFfTERGTEFHU1xcXCJcXG4gICAgICAgICAgICBcXFwiQk9PVF9MREZMQUdTPSRFWFRSQV9GTEFHU19GT1JfVEFSR0VUICRFWFRSQV9MREZMQUdTX0ZPUl9UQVJHRVRcXFwiXFxuICAgICAgICApXFxuICAgIGZpXFxuXFxuICAgIGlmIHRlc3QgXFxcIiR3aXRob3V0VGFyZ2V0TGliY1xcXCIgPT0gMTsgdGhlblxcbiAgICAgICAgIyBXZSBkb24ndCB3YW50IHRoZSBnY2MgYnVpbGQgdG8gYXNzdW1lIHRoZXJlIHdpbGwgYmUgYSBsaWJjIHByb3ZpZGluZ1xcbiAgICAgICAgIyBsaW1pdHMuaCBpbiB0aGlzIHN0YWdlXFxuICAgICAgICBtYWtlRmxhZ3NBcnJheSs9KFxcbiAgICAgICAgICAgICdMSU1JVFNfSF9URVNUPWZhbHNlJ1xcbiAgICAgICAgKVxcbiAgICBlbHNlXFxuICAgICAgICBtYWtlRmxhZ3NBcnJheSs9KFxcbiAgICAgICAgICAgICdMSU1JVFNfSF9URVNUPXRydWUnXFxuICAgICAgICApXFxuICAgIGZpXFxuZmlcXG5cXG5ldmFsIFxcXCIkb2xkT3B0c1xcXCJcXG5cIixcInByb3BhZ2F0ZWRCdWlsZElucHV0c1wiOlwiXCIsXCJwcm9wYWdhdGVkTmF0aXZlQnVpbGRJbnB1dHNcIjpcIlwiLFwic2V0T3V0cHV0RmxhZ3NcIjpcIlwiLFwic3JjXCI6XCIvbml4L3N0b3JlLzR3MnI2bTh5NmJ3NTBqcnJjeGZ5aGk1YXg4Y3BtYWw0LWdjYy0xNC0yMDI1MDMyMi50YXIueHpcIixcInN0YXRpY0NvbXBpbGVyXCI6XCJcIixcInN0ZGVudlwiOlwiL25peC9zdG9yZS9sZGhoNDc1NHJsbDN6cWI2OWkwM3Bqam1sODM1N3Z2ei1ib290c3RyYXAtc3RhZ2UzLXN0ZGVudi1saW51eFwiLFwic3RyaWN0RGVwc1wiOlwiXCIsXCJzdHJpcERlYnVnTGlzdFwiOlwiYmluIGxpYmV4ZWNcIixcInN0cmlwRGVidWdMaXN0VGFyZ2V0XCI6XCJ4ODZfNjQtdW5rbm93bi1saW51eC1nbnVcIixcInN5c3RlbVwiOlwieDg2XzY0LWxpbnV4XCIsXCJ2ZXJzaW9uXCI6XCIxNC4yLjFcIixcIndpdGhvdXRUYXJnZXRMaWJjXCI6XCJcIn0sXCJpbnB1dERydnNcIjp7fSxcImlucHV0U3Jjc1wiOltcIi9uaXgvc3RvcmUvMGZ3cTh2M212ZGg0ajNpaTVkNG5kamx4eTB5ODlpbDYtbnVrZS1yZWZlcmVuY2VzXCIsXCIvbml4L3N0b3JlLzF4enA5eDJ4dm42N2w0ZDJoenI1eDZzbTcwNXIwZzViLXpsaWItMS4zLjEtZGV2XCIsXCIvbml4L3N0b3JlLzNjajhxbTN4anoxZzVmN3FubnhsYzk1aTlpbWtpY2JrLWNmaV9zdGFydHByb2MtcmVvcmRlci1sYWJlbC0xNC0xLmRpZmZcIixcIi9uaXgvc3RvcmUvM3Z6eDVwOHhmeXg5a2d5dmh6ZGdkcjEwajA5bmpmN24tZ2xpYmMtMi40MC02Ni1kZXZcIixcIi9uaXgvc3RvcmUvNHcycjZtOHk2Ync1MGpycmN4ZnloaTVheDhjcG1hbDQtZ2NjLTE0LTIwMjUwMzIyLnRhci54elwiLFwiL25peC9zdG9yZS82MzJiMHk1bWtjZHdic3cyZzN4aDVxem53MnZ2NWF4ci1wcGMtbXVzbC5wYXRjaFwiLFwiL25peC9zdG9yZS82aWt3YzFtenBzOWE3M2ZiN25xMDAwNWI5NDgycHkzYS1nbXAtNi4zLjBcIixcIi9uaXgvc3RvcmUvNnhibjRpZG02YTRqYzQxeXJ3ODViOHgxcWdjeXFsMXotaXNsLTAuMjBcIixcIi9uaXgvc3RvcmUvN3Zram5nMG1tODZpamF5cjQ5bDhrd3NxY3BiemQyNGItbXBmci00LjIuMVwiLFwiL25peC9zdG9yZS83eDZiaW1qNmlwaTZhZzg1OWdpMmZjNmJ5ODd4MzdqNy1uby1zeXMtZGlycy1yaXNjdi5wYXRjaFwiLFwiL25peC9zdG9yZS85NTc3aG1kbG1oa2k2N2NnOGFyODVjdmlkeWc3eHI3cC1nY2MtMTItbm8tc3lzLWRpcnMucGF0Y2hcIixcIi9uaXgvc3RvcmUvOThzdjY3eDdiN2NkbWpkZzJ5ZzRxZDVsYWNnbng3dmEtZ2xpYmMtMi40MC02NlwiLFwiL25peC9zdG9yZS85dm41MDBhM2MxaDQ2a3Z5bTlmNWMzd2FmeGNzYzd2aC1mbGV4LTIuNi40XCIsXCIvbml4L3N0b3JlL2IyNHFqc2lrcGQ1Z2Z5NmJqOTVtc3hodndoNXc1ejMxLWxpYm1wYy0xLjMuMVwiLFwiL25peC9zdG9yZS9jOWI1c2E0bHFzZGc1Zjh3czFwdjMwNm01aDJ5Mjg2Yy1nZXR0ZXh0LTAuMjIuNVwiLFwiL25peC9zdG9yZS9kcHh6cmFrZjFqa2N2OXpod2FxN3BsOWx2Nm01YjBmNC13aGljaC0yLjIzXCIsXCIvbml4L3N0b3JlL2R2bXIxNTRuZmg4NjgzeHpnaGRsNHg4M2QwNDRkbDdoLW1wZnItNC4yLjEtZGV2XCIsXCIvbml4L3N0b3JlL2cwODM2c3h6cWlzajBobXdkZHNid3k3Y3h5empkeGkyLXBhdGNoZWxmLTAuMTUuMFwiLFwiL25peC9zdG9yZS9pOTdzMnM2Zm14ank1ODg1eWMxaG1taDhieW1hMW5qYy1iYXNoLTUuMnAzN1wiLFwiL25peC9zdG9yZS9rcnpsa2F3NWkwbncyd2gwMzhnNHNwYWo0Ymcwd2M0NC10ZXhpbmZvLTcuMS4xXCIsXCIvbml4L3N0b3JlL2xkaGg0NzU0cmxsM3pxYjY5aTAzcGpqbWw4MzU3dnZ6LWJvb3RzdHJhcC1zdGFnZTMtc3RkZW52LWxpbnV4XCIsXCIvbml4L3N0b3JlL243Y3hhdnBmenp6MnBiMWE3MWZnNWh5MW1xZjF4bGYyLWJvb3RzdHJhcC10b29sc1wiLFwiL25peC9zdG9yZS9xc3JjYXZtcTRuODh2MXB3N2lybDJoNnphazJmZ2I5Ni1saWJ4Y3J5cHQtNC40LjM4XCIsXCIvbml4L3N0b3JlL3F3bmFrbHJja2N3Y24ycm1jbGk2M3ZjdmYzenFjZHdkLXpsaWItMS4zLjFcIixcIi9uaXgvc3RvcmUvc2hrdzRxbTlxY3c1c2M1bjFrNWp6bmM4M255MDJyMzktZGVmYXVsdC1idWlsZGVyLnNoXCIsXCIvbml4L3N0b3JlL3NsbDg2YmM0eGJxYnZyeXFrYzU5OHphcnlpeWE3ajRoLWdtcC02LjMuMC1kZXZcIixcIi9uaXgvc3RvcmUvc25iaGE1NjJqOTI1NXd4MzczOHg5ZjJ3cjc1bmliNWotYm9vdHN0cmFwLXN0YWdlMy1nY2Mtd3JhcHBlci0xNC4yLjEuMjAyNTAzMjJcIixcIi9uaXgvc3RvcmUvdmoxYzN3ZjljMTFhMHFzNnAzeW1mdnJuc2Rnc2RjYnEtc291cmNlLXN0ZGVudi5zaFwiLFwiL25peC9zdG9yZS92djlxcGliMDk2c2QzeTVweWszNWw0Zmd2bTFpczU5cC1wZXJsLTUuNDAuMFwiLFwiL25peC9zdG9yZS94MXNtaHN6eWd3OXM2NGF4NXlnbW53djExbmc3eWQ5Ni1iaW51dGlscy1wYXRjaGVsZmVkLWxkLXdyYXBwZXItMi40NFwiLFwiL25peC9zdG9yZS94cHBsdnhpd2I0bGkycWQ1bnZoeWQybW5ncnBuYTB5YS1tYW5nbGUtTklYX1NUT1JFLWluLV9fRklMRV9fLnBhdGNoXCJdLFwibmFtZVwiOlwiZ2NjLTE0LjIuMS4yMDI1MDMyMlwiLFwib3V0cHV0c1wiOntcImNoZWNrc3VtXCI6e1wiaGFzaEFsZ29cIjpcInI6c2hhMjU2XCJ9LFwiaW5mb1wiOntcImhhc2hBbGdvXCI6XCJyOnNoYTI1NlwifSxcImxpYlwiOntcImhhc2hBbGdvXCI6XCJyOnNoYTI1NlwifSxcImxpYmdjY1wiOntcImhhc2hBbGdvXCI6XCJyOnNoYTI1NlwifSxcIm1hblwiOntcImhhc2hBbGdvXCI6XCJyOnNoYTI1NlwifSxcIm91dFwiOntcImhhc2hBbGdvXCI6XCJyOnNoYTI1NlwifX0sXCJzeXN0ZW1cIjpcIng4Nl82NC1saW51eFwifSIsInJkcnZfY29tcHV0ZWRfcGF0aCI6Ii9uaXgvc3RvcmUvdm4zNTNsandheDNuOTdrOWoxc2Rwa2RnZHppMG5zOXktZ2NjLTE0LjIuMS4yMDI1MDMyMi5kcnYiLCJyZHJ2X2F0ZXJtX2NhX3ByZWltYWdlIjoiRGVyaXZlKFsoXCJjaGVja3N1bVwiLFwiXCIsXCJyOnNoYTI1NlwiLFwiXCIpLChcImluZm9cIixcIlwiLFwicjpzaGEyNTZcIixcIlwiKSwoXCJsaWJcIixcIlwiLFwicjpzaGEyNTZcIixcIlwiKSwoXCJsaWJnY2NcIixcIlwiLFwicjpzaGEyNTZcIixcIlwiKSwoXCJtYW5cIixcIlwiLFwicjpzaGEyNTZcIixcIlwiKSwoXCJvdXRcIixcIlwiLFwicjpzaGEyNTZcIixcIlwiKV0sW10sW1wiL25peC9zdG9yZS8wZndxOHYzbXZkaDRqM2lpNWQ0bmRqbHh5MHk4OWlsNi1udWtlLXJlZmVyZW5jZXNcIixcIi9uaXgvc3RvcmUvMXh6cDl4Mnh2bjY3bDRkMmh6cjV4NnNtNzA1cjBnNWItemxpYi0xLjMuMS1kZXZcIixcIi9uaXgvc3RvcmUvM2NqOHFtM3hqejFnNWY3cW5ueGxjOTVpOWlta2ljYmstY2ZpX3N0YXJ0cHJvYy1yZW9yZGVyLWxhYmVsLTE0LTEuZGlmZlwiLFwiL25peC9zdG9yZS8zdnp4NXA4eGZ5eDlrZ3l2aHpkZ2RyMTBqMDluamY3bi1nbGliYy0yLjQwLTY2LWRldlwiLFwiL25peC9zdG9yZS80dzJyNm04eTZidzUwanJyY3hmeWhpNWF4OGNwbWFsNC1nY2MtMTQtMjAyNTAzMjIudGFyLnh6XCIsXCIvbml4L3N0b3JlLzYzMmIweTVta2Nkd2JzdzJnM3hoNXF6bncydnY1YXhyLXBwYy1tdXNsLnBhdGNoXCIsXCIvbml4L3N0b3JlLzZpa3djMW16cHM5YTczZmI3bnEwMDA1Yjk0ODJweTNhLWdtcC02LjMuMFwiLFwiL25peC9zdG9yZS82eGJuNGlkbTZhNGpjNDF5cnc4NWI4eDFxZ2N5cWwxei1pc2wtMC4yMFwiLFwiL25peC9zdG9yZS83dmtqbmcwbW04NmlqYXlyNDlsOGt3c3FjcGJ6ZDI0Yi1tcGZyLTQuMi4xXCIsXCIvbml4L3N0b3JlLzd4NmJpbWo2aXBpNmFnODU5Z2kyZmM2Ynk4N3gzN2o3LW5vLXN5cy1kaXJzLXJpc2N2LnBhdGNoXCIsXCIvbml4L3N0b3JlLzk1NzdobWRsbWhraTY3Y2c4YXI4NWN2aWR5Zzd4cjdwLWdjYy0xMi1uby1zeXMtZGlycy5wYXRjaFwiLFwiL25peC9zdG9yZS85OHN2Njd4N2I3Y2RtamRnMnlnNHFkNWxhY2dueDd2YS1nbGliYy0yLjQwLTY2XCIsXCIvbml4L3N0b3JlLzl2bjUwMGEzYzFoNDZrdnltOWY1YzN3YWZ4Y3NjN3ZoLWZsZXgtMi42LjRcIixcIi9uaXgvc3RvcmUvYjI0cWpzaWtwZDVnZnk2Ymo5NW1zeGh2d2g1dzV6MzEtbGlibXBjLTEuMy4xXCIsXCIvbml4L3N0b3JlL2M5YjVzYTRscXNkZzVmOHdzMXB2MzA2bTVoMnkyODZjLWdldHRleHQtMC4yMi41XCIsXCIvbml4L3N0b3JlL2RweHpyYWtmMWprY3Y5emh3YXE3cGw5bHY2bTViMGY0LXdoaWNoLTIuMjNcIixcIi9uaXgvc3RvcmUvZHZtcjE1NG5maDg2ODN4emdoZGw0eDgzZDA0NGRsN2gtbXBmci00LjIuMS1kZXZcIixcIi9uaXgvc3RvcmUvZzA4MzZzeHpxaXNqMGhtd2Rkc2J3eTdjeHl6amR4aTItcGF0Y2hlbGYtMC4xNS4wXCIsXCIvbml4L3N0b3JlL2k5N3MyczZmbXhqeTU4ODV5YzFobW1oOGJ5bWExbmpjLWJhc2gtNS4ycDM3XCIsXCIvbml4L3N0b3JlL2tyemxrYXc1aTBudzJ3aDAzOGc0c3BhajRiZzB3YzQ0LXRleGluZm8tNy4xLjFcIixcIi9uaXgvc3RvcmUvbGRoaDQ3NTRybGwzenFiNjlpMDNwamptbDgzNTd2dnotYm9vdHN0cmFwLXN0YWdlMy1zdGRlbnYtbGludXhcIixcIi9uaXgvc3RvcmUvbjdjeGF2cGZ6enoycGIxYTcxZmc1aHkxbXFmMXhsZjItYm9vdHN0cmFwLXRvb2xzXCIsXCIvbml4L3N0b3JlL3FzcmNhdm1xNG44OHYxcHc3aXJsMmg2emFrMmZnYjk2LWxpYnhjcnlwdC00LjQuMzhcIixcIi9uaXgvc3RvcmUvcXduYWtscmNrY3djbjJybWNsaTYzdmN2ZjN6cWNkd2QtemxpYi0xLjMuMVwiLFwiL25peC9zdG9yZS9zaGt3NHFtOXFjdzVzYzVuMWs1anpuYzgzbnkwMnIzOS1kZWZhdWx0LWJ1aWxkZXIuc2hcIixcIi9uaXgvc3RvcmUvc2xsODZiYzR4YnFidnJ5cWtjNTk4emFyeWl5YTdqNGgtZ21wLTYuMy4wLWRldlwiLFwiL25peC9zdG9yZS9zbmJoYTU2Mmo5MjU1d3gzNzM4eDlmMndyNzVuaWI1ai1ib290c3RyYXAtc3RhZ2UzLWdjYy13cmFwcGVyLTE0LjIuMS4yMDI1MDMyMlwiLFwiL25peC9zdG9yZS92ajFjM3dmOWMxMWEwcXM2cDN5bWZ2cm5zZGdzZGNicS1zb3VyY2Utc3RkZW52LnNoXCIsXCIvbml4L3N0b3JlL3Z2OXFwaWIwOTZzZDN5NXB5azM1bDRmZ3ZtMWlzNTlwLXBlcmwtNS40MC4wXCIsXCIvbml4L3N0b3JlL3gxc21oc3p5Z3c5czY0YXg1eWdtbnd2MTFuZzd5ZDk2LWJpbnV0aWxzLXBhdGNoZWxmZWQtbGQtd3JhcHBlci0yLjQ0XCIsXCIvbml4L3N0b3JlL3hwcGx2eGl3YjRsaTJxZDVudmh5ZDJtbmdycG5hMHlhLW1hbmdsZS1OSVhfU1RPUkUtaW4tX19GSUxFX18ucGF0Y2hcIl0sXCJ4ODZfNjQtbGludXhcIixcIi9uaXgvc3RvcmUvbjdjeGF2cGZ6enoycGIxYTcxZmc1aHkxbXFmMXhsZjItYm9vdHN0cmFwLXRvb2xzL2Jpbi9iYXNoXCIsW1wiLWVcIixcIi9uaXgvc3RvcmUvdmoxYzN3ZjljMTFhMHFzNnAzeW1mdnJuc2Rnc2RjYnEtc291cmNlLXN0ZGVudi5zaFwiLFwiL25peC9zdG9yZS9zaGt3NHFtOXFjdzVzYzVuMWs1anpuYzgzbnkwMnIzOS1kZWZhdWx0LWJ1aWxkZXIuc2hcIl0sWyhcIkNQQVRIXCIsXCIvbml4L3N0b3JlLzF4enA5eDJ4dm42N2w0ZDJoenI1eDZzbTcwNXIwZzViLXpsaWItMS4zLjEtZGV2L2luY2x1ZGVcIiksKFwiRVhUUkFfRkxBR1NfRk9SX1RBUkdFVFwiLFwiXCIpLChcIkVYVFJBX0xERkxBR1NfRk9SX1RBUkdFVFwiLFwiXCIpLChcIkxJQlJBUllfUEFUSFwiLFwiL25peC9zdG9yZS9xd25ha2xyY2tjd2NuMnJtY2xpNjN2Y3ZmM3pxY2R3ZC16bGliLTEuMy4xL2xpYlwiKSwoXCJOSVhfSEFSREVOSU5HX0VOQUJMRVwiLFwiYmluZG5vdyBmb3J0aWZ5IGZvcnRpZnkzIHBpYyByZWxybyBzdGFja3Byb3RlY3RvciBzdHJpY3RvdmVyZmxvdyB6ZXJvY2FsbHVzZWRyZWdzXCIpLChcIk5JWF9MREZMQUdTXCIsXCJcIiksKFwiTklYX05PX1NFTEZfUlBBVEhcIixcIjFcIiksKFwiX19zdHJ1Y3R1cmVkQXR0cnNcIixcIlwiKSwoXCJidWlsZEZsYWdzXCIsXCJcIiksKFwiYnVpbGRJbnB1dHNcIixcIi9uaXgvc3RvcmUvc2xsODZiYzR4YnFidnJ5cWtjNTk4emFyeWl5YTdqNGgtZ21wLTYuMy4wLWRldiAvbml4L3N0b3JlL2R2bXIxNTRuZmg4NjgzeHpnaGRsNHg4M2QwNDRkbDdoLW1wZnItNC4yLjEtZGV2IC9uaXgvc3RvcmUvYjI0cWpzaWtwZDVnZnk2Ymo5NW1zeGh2d2g1dzV6MzEtbGlibXBjLTEuMy4xIC9uaXgvc3RvcmUvcXNyY2F2bXE0bjg4djFwdzdpcmwyaDZ6YWsyZmdiOTYtbGlieGNyeXB0LTQuNC4zOCAvbml4L3N0b3JlL3gxc21oc3p5Z3c5czY0YXg1eWdtbnd2MTFuZzd5ZDk2LWJpbnV0aWxzLXBhdGNoZWxmZWQtbGQtd3JhcHBlci0yLjQ0IC9uaXgvc3RvcmUvNnhibjRpZG02YTRqYzQxeXJ3ODViOHgxcWdjeXFsMXotaXNsLTAuMjAgL25peC9zdG9yZS8xeHpwOXgyeHZuNjdsNGQyaHpyNXg2c203MDVyMGc1Yi16bGliLTEuMy4xLWRldlwiKSwoXCJidWlsZGVyXCIsXCIvbml4L3N0b3JlL243Y3hhdnBmenp6MnBiMWE3MWZnNWh5MW1xZjF4bGYyLWJvb3RzdHJhcC10b29scy9iaW4vYmFzaFwiKSwoXCJjaGVja3N1bVwiLFwiLzFtd2k4d3gwNHAyc2JnOTZuM2o3bjdxaWw3eXJ3bDdxZmc5OGRzeWdocWtqa2k5aHdxYW1cIiksKFwiY21ha2VGbGFnc1wiLFwiXCIpLChcImNvbmZpZ3VyZUZsYWdzXCIsXCItLXdpdGgtZ21wLWluY2x1ZGU9L25peC9zdG9yZS9zbGw4NmJjNHhicWJ2cnlxa2M1OTh6YXJ5aXlhN2o0aC1nbXAtNi4zLjAtZGV2L2luY2x1ZGUgLS13aXRoLWdtcC1saWI9L25peC9zdG9yZS82aWt3YzFtenBzOWE3M2ZiN25xMDAwNWI5NDgycHkzYS1nbXAtNi4zLjAvbGliIC0td2l0aC1tcGZyLWluY2x1ZGU9L25peC9zdG9yZS9kdm1yMTU0bmZoODY4M3h6Z2hkbDR4ODNkMDQ0ZGw3aC1tcGZyLTQuMi4xLWRldi9pbmNsdWRlIC0td2l0aC1tcGZyLWxpYj0vbml4L3N0b3JlLzd2a2puZzBtbTg2aWpheXI0OWw4a3dzcWNwYnpkMjRiLW1wZnItNC4yLjEvbGliIC0td2l0aC1tcGM9L25peC9zdG9yZS9iMjRxanNpa3BkNWdmeTZiajk1bXN4aHZ3aDV3NXozMS1saWJtcGMtMS4zLjEgLS13aXRoLW5hdGl2ZS1zeXN0ZW0taGVhZGVyLWRpcj0vbml4L3N0b3JlLzN2eng1cDh4Znl4OWtneXZoemRnZHIxMGowOW5qZjduLWdsaWJjLTIuNDAtNjYtZGV2L2luY2x1ZGUgLS13aXRoLWJ1aWxkLXN5c3Jvb3Q9LyAtLXdpdGgtZ3h4LWluY2x1ZGUtZGlyPS8xcno0ZzR6bnB6andoMXh5bWhqcG00MnZpcHc5MnByNzN2ZGdsNnhzMWh5Y2FjOGtmMm45L2luY2x1ZGUvYysrLzE0LjIuMS4yMDI1MDMyMi8gLS1wcm9ncmFtLXByZWZpeD0gLS1lbmFibGUtbHRvIC0tZGlzYWJsZS1saWJzdGRjeHgtcGNoIC0td2l0aG91dC1pbmNsdWRlZC1nZXR0ZXh0IC0td2l0aC1zeXN0ZW0temxpYiAtLWVuYWJsZS1zdGF0aWMgLS1lbmFibGUtbGFuZ3VhZ2VzPWMsYysrIC0tZGlzYWJsZS1tdWx0aWxpYiAtLWVuYWJsZS1wbHVnaW4gLS1kaXNhYmxlLWxpYmNjMSAtLXdpdGgtaXNsPS9uaXgvc3RvcmUvNnhibjRpZG02YTRqYzQxeXJ3ODViOHgxcWdjeXFsMXotaXNsLTAuMjAgLS1kaXNhYmxlLWJvb3RzdHJhcCAtLWJ1aWxkPXg4Nl82NC11bmtub3duLWxpbnV4LWdudSAtLWhvc3Q9eDg2XzY0LXVua25vd24tbGludXgtZ251IC0tdGFyZ2V0PXg4Nl82NC11bmtub3duLWxpbnV4LWdudVwiKSwoXCJjb25maWd1cmVQbGF0Zm9ybXNcIixcImJ1aWxkIGhvc3QgdGFyZ2V0XCIpLChcImNyb3NzTWluZ3dcIixcIlwiKSwoXCJkZXBzQnVpbGRCdWlsZFwiLFwiL25peC9zdG9yZS9zbmJoYTU2Mmo5MjU1d3gzNzM4eDlmMndyNzVuaWI1ai1ib290c3RyYXAtc3RhZ2UzLWdjYy13cmFwcGVyLTE0LjIuMS4yMDI1MDMyMlwiKSwoXCJkZXBzQnVpbGRCdWlsZFByb3BhZ2F0ZWRcIixcIlwiKSwoXCJkZXBzQnVpbGRUYXJnZXRcIixcIi9uaXgvc3RvcmUveDFzbWhzenlndzlzNjRheDV5Z21ud3YxMW5nN3lkOTYtYmludXRpbHMtcGF0Y2hlbGZlZC1sZC13cmFwcGVyLTIuNDQgL25peC9zdG9yZS9nMDgzNnN4enFpc2owaG13ZGRzYnd5N2N4eXpqZHhpMi1wYXRjaGVsZi0wLjE1LjBcIiksKFwiZGVwc0J1aWxkVGFyZ2V0UHJvcGFnYXRlZFwiLFwiXCIpLChcImRlcHNIb3N0SG9zdFwiLFwiXCIpLChcImRlcHNIb3N0SG9zdFByb3BhZ2F0ZWRcIixcIlwiKSwoXCJkZXBzVGFyZ2V0VGFyZ2V0XCIsXCJcIiksKFwiZGVwc1RhcmdldFRhcmdldFByb3BhZ2F0ZWRcIixcIlwiKSwoXCJkb0NoZWNrXCIsXCJcIiksKFwiZG9JbnN0YWxsQ2hlY2tcIixcIlwiKSwoXCJkb250RGlzYWJsZVN0YXRpY1wiLFwiMVwiKSwoXCJlbmFibGVNdWx0aWxpYlwiLFwiXCIpLChcImVuYWJsZVBhcmFsbGVsQnVpbGRpbmdcIixcIjFcIiksKFwiZW5hYmxlUGFyYWxsZWxDaGVja2luZ1wiLFwiMVwiKSwoXCJlbmFibGVQYXJhbGxlbEluc3RhbGxpbmdcIixcIlwiKSwoXCJlbmFibGVTaGFyZWRcIixcIjFcIiksKFwiaGFyZGVuaW5nRGlzYWJsZVwiLFwiZm9ybWF0IHBpZSBzdGFja2NsYXNocHJvdGVjdGlvblwiKSwoXCJpbmZvXCIsXCIvMXEyOWtmMWEwbmNjdzcwYzBiOGExbWcxMGpyN2I1bHZ2NW03djNqd2RmZm5zeTZudnh5eVwiKSwoXCJsaWJcIixcIi8wc3JhMnkxOGxyM2g2ajU4cWptMHc0Nnl2MzZoMXdqbWlsYjA5bjhhaW1kcGl2ZHltc2N4XCIpLChcImxpYmNfZGV2XCIsXCIvbml4L3N0b3JlLzN2eng1cDh4Znl4OWtneXZoemRnZHIxMGowOW5qZjduLWdsaWJjLTIuNDAtNjYtZGV2XCIpLChcImxpYmdjY1wiLFwiLzFhc3BobmRjZDVkam1oMnh6YzQ4cmticDlybGlwejZhYXYwMnhia2E5OGhiNGZrbTAzcHJcIiksKFwibWFuXCIsXCIvMTN3M3c1anhyMzJjd2xoa2toZ3o3dzY1ZmZmemd2N2ZrZDQ4emk3bmN6OWdocXpobnFwd1wiKSwoXCJtZXNvbkZsYWdzXCIsXCJcIiksKFwibmFtZVwiLFwiZ2NjLTE0LjIuMS4yMDI1MDMyMlwiKSwoXCJuYXRpdmVCdWlsZElucHV0c1wiLFwiL25peC9zdG9yZS9rcnpsa2F3NWkwbncyd2gwMzhnNHNwYWo0Ymcwd2M0NC10ZXhpbmZvLTcuMS4xIC9uaXgvc3RvcmUvZHB4enJha2Yxamtjdjl6aHdhcTdwbDlsdjZtNWIwZjQtd2hpY2gtMi4yMyAvbml4L3N0b3JlL2M5YjVzYTRscXNkZzVmOHdzMXB2MzA2bTVoMnkyODZjLWdldHRleHQtMC4yMi41IC9uaXgvc3RvcmUvdnY5cXBpYjA5NnNkM3k1cHlrMzVsNGZndm0xaXM1OXAtcGVybC01LjQwLjAgL25peC9zdG9yZS85dm41MDBhM2MxaDQ2a3Z5bTlmNWMzd2FmeGNzYzd2aC1mbGV4LTIuNi40XCIpLChcIm5vU3lzRGlyc1wiLFwiMVwiKSwoXCJvdXRcIixcIi8xcno0ZzR6bnB6andoMXh5bWhqcG00MnZpcHc5MnByNzN2ZGdsNnhzMWh5Y2FjOGtmMm45XCIpLChcIm91dHB1dEhhc2hBbGdvXCIsXCJzaGEyNTZcIiksKFwib3V0cHV0SGFzaE1vZGVcIixcInJlY3Vyc2l2ZVwiKSwoXCJvdXRwdXRzXCIsXCJvdXQgbWFuIGluZm8gbGliIGxpYmdjYyBjaGVja3N1bVwiKSwoXCJwYXRjaGVzXCIsXCIvbml4L3N0b3JlLzk1NzdobWRsbWhraTY3Y2c4YXI4NWN2aWR5Zzd4cjdwLWdjYy0xMi1uby1zeXMtZGlycy5wYXRjaCAvbml4L3N0b3JlLzd4NmJpbWo2aXBpNmFnODU5Z2kyZmM2Ynk4N3gzN2o3LW5vLXN5cy1kaXJzLXJpc2N2LnBhdGNoIC9uaXgvc3RvcmUveHBwbHZ4aXdiNGxpMnFkNW52aHlkMm1uZ3JwbmEweWEtbWFuZ2xlLU5JWF9TVE9SRS1pbi1fX0ZJTEVfXy5wYXRjaCAvbml4L3N0b3JlLzYzMmIweTVta2Nkd2JzdzJnM3hoNXF6bncydnY1YXhyLXBwYy1tdXNsLnBhdGNoIC9uaXgvc3RvcmUvM2NqOHFtM3hqejFnNWY3cW5ueGxjOTVpOWlta2ljYmstY2ZpX3N0YXJ0cHJvYy1yZW9yZGVyLWxhYmVsLTE0LTEuZGlmZlwiKSwoXCJwbmFtZVwiLFwiZ2NjXCIpLChcInBvc3RDb25maWd1cmVcIixcIiMgQXZvaWQgc3RvcmUgcGF0aHMgd2hlbiBlbWJlZGRpbmcgLi9jb25maWd1cmUgZmxhZ3MgaW50byBnY2MuXFxuIyBNYW5nbGVkIGFyZ3VtZW50cyBhcmUgc3RpbGwgdXNlZnVsIHdoZW4gcmVwb3J0aW5nIGJ1Z3MgdXBzdHJlYW0uXFxuc2VkIC1lIFxcXCIvVE9QTEVWRUxfQ09ORklHVVJFX0FSR1VNRU5UUz0vIHN8JE5JWF9TVE9SRS9bYS16MC05XVxcXFx7MzJcXFxcfS18JE5JWF9TVE9SRS9lZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZS18Z1xcXCIgLWkgTWFrZWZpbGVcXG5cIiksKFwicG9zdEluc3RhbGxcIixcIiMgQ2xlYW4gdXAgb3VyIGNvbXBhdGliaWxpdHkgc3ltbGlua3MgKHNlZSBhYm92ZSlcXG5mb3IgbGluayBpbiBcXFwiJHtjb21wYXRpYmlsaXR5U3ltbGlua3NbQF19XFxcIjsgZG9cXG4gIGVjaG8gXFxcIlJlbW92aW5nIGNvbXBhdGliaWxpdHkgc3ltbGluazogJGxpbmtcXFwiXFxuICBybSAtZiBcXFwiJGxpbmtcXFwiXFxuZG9uZVxcblxcbiMgTW92ZSB0YXJnZXQgcnVudGltZSBsaWJyYXJpZXMgdG8gbGliIG91dHB1dC5cXG4jIEZvciBub24tY3Jvc3MsIHRoZXkncmUgaW4gJG91dC9saWI7IGZvciBjcm9zcywgdGhleSdyZSBpbiAkb3V0LyR0YXJnZXRDb25maWcvbGliLlxcbnRhcmdldExpYkRpcj1cXFwiJHt0YXJnZXRDb25maWcrJHRhcmdldENvbmZpZy99bGliXFxcIlxcblxcbm1vdmVUb091dHB1dCBcXFwiJHRhcmdldExpYkRpci9saWIqLnNvKlxcXCIgXFxcIiR7IW91dHB1dExpYn1cXFwiXFxubW92ZVRvT3V0cHV0IFxcXCIkdGFyZ2V0TGliRGlyL2xpYiouZHlsaWJcXFwiIFxcXCIkeyFvdXRwdXRMaWJ9XFxcIlxcbm1vdmVUb091dHB1dCBcXFwiJHRhcmdldExpYkRpci9saWIqLmRsbC5hXFxcIiBcXFwiJHshb3V0cHV0TGlifVxcXCJcXG5tb3ZlVG9PdXRwdXQgXFxcIiR0YXJnZXRMaWJEaXIvbGliKi5kbGxcXFwiIFxcXCIkeyFvdXRwdXRMaWJ9XFxcIlxcbm1vdmVUb091dHB1dCBcXFwic2hhcmUvZ2NjLSovcHl0aG9uXFxcIiBcXFwiJHshb3V0cHV0TGlifVxcXCJcXG5cXG5pZiBbIC16IFxcXCIkZW5hYmxlU2hhcmVkXFxcIiBdOyB0aGVuXFxuICAgIG1vdmVUb091dHB1dCBcXFwiJHRhcmdldExpYkRpci9saWIqLmFcXFwiIFxcXCIkeyFvdXRwdXRMaWJ9XFxcIlxcbmZpXFxuXFxuZm9yIGkgaW4gXFxcIiR7IW91dHB1dExpYn1cXFwiLyR0YXJnZXRMaWJEaXIvKi5weTsgZG9cXG4gICAgc3Vic3RpdHV0ZUluUGxhY2UgXFxcIiRpXFxcIiAtLXJlcGxhY2UgXFxcIiRvdXRcXFwiIFxcXCIkeyFvdXRwdXRMaWJ9XFxcIlxcbmRvbmVcXG5cXG4jIE11bHRpbGliIGFuZCBjcm9zcyBjYW4ndCBleGlzdCBhdCB0aGUgc2FtZSB0aW1lLCBzbyBqdXN0IHVzZSBsaWI2NCBoZXJlXFxuaWYgWyAtbiBcXFwiJGVuYWJsZU11bHRpbGliXFxcIiBdOyB0aGVuXFxuICAgIG1vdmVUb091dHB1dCBcXFwibGliNjQvbGliKi5zbypcXFwiIFxcXCIkeyFvdXRwdXRMaWJ9XFxcIlxcbiAgICBtb3ZlVG9PdXRwdXQgXFxcImxpYjY0L2xpYiouZHlsaWJcXFwiIFxcXCIkeyFvdXRwdXRMaWJ9XFxcIlxcbiAgICBtb3ZlVG9PdXRwdXQgXFxcImxpYjY0L2xpYiouZGxsLmFcXFwiIFxcXCIkeyFvdXRwdXRMaWJ9XFxcIlxcbiAgICBtb3ZlVG9PdXRwdXQgXFxcImxpYjY0L2xpYiouZGxsXFxcIiBcXFwiJHshb3V0cHV0TGlifVxcXCJcXG5cXG4gICAgZm9yIGkgaW4gXFxcIiR7IW91dHB1dExpYn1cXFwiL2xpYjY0LyoucHk7IGRvXFxuICAgICAgICBzdWJzdGl0dXRlSW5QbGFjZSBcXFwiJGlcXFwiIC0tcmVwbGFjZSBcXFwiJG91dFxcXCIgXFxcIiR7IW91dHB1dExpYn1cXFwiXFxuICAgIGRvbmVcXG5maVxcblxcbiMgUmVtb3ZlIGBmaXhpbmNsJyB0byBwcmV2ZW50IGEgcmV0YWluZWQgZGVwZW5kZW5jeSBvbiB0aGVcXG4jIHByZXZpb3VzIGdjYy5cXG5ybSAtcmYgJG91dC9saWJleGVjL2djYy8qLyovaW5zdGFsbC10b29sc1xcbnJtIC1yZiAkb3V0L2xpYi9nY2MvKi8qL2luc3RhbGwtdG9vbHNcXG5cXG4jIE1vcmUgZGVwZW5kZW5jaWVzIHdpdGggdGhlIHByZXZpb3VzIGdjYyBvciBzb21lIGxpYnMgKGdjY2J1ZyBzdG9yZXMgdGhlIGJ1aWxkIGNvbW1hbmQgbGluZSlcXG5ybSAtcmYgJG91dC9iaW4vZ2NjYnVnXFxuXFxuIyBSZW1vdmUgLmxhIGZpbGVzLCB0aGV5J3JlIG5vdCBhZGp1c3RlZCBmb3IgdGhlIG1ha2VDb21wYXRpYmlsaXR5U3ltbGluayBtYWdpYyxcXG4jIHdoaWNoIGNvbmZ1c2VzIGxpYnRvb2wgYW5kIGxlYWRzIHRvIHdlaXJkIGxpbmtpbmcgZXJyb3JzLlxcbiMgUmVtb3ZpbmcgdGhlIGZpbGVzIGp1c3QgbWFrZXMgbGlidG9vbCBsaW5rIC5zbyBmaWxlcyBkaXJlY3RseSwgd2hpY2ggaXMgdXN1YWxseVxcbiMgd2hhdCB3ZSB3YW50IGFueXdheS5cXG5maW5kICRvdXQgLW5hbWUgJyoubGEnIC1kZWxldGVcXG5cXG5pZiB0eXBlIFxcXCJpbnN0YWxsX25hbWVfdG9vbFxcXCI7IHRoZW5cXG4gICAgZm9yIGkgaW4gXFxcIiR7IW91dHB1dExpYn1cXFwiL2xpYi8qLiouZHlsaWIgXFxcIiR7IW91dHB1dExpYn1cXFwiL2xpYi8qLnNvLlswLTldOyBkb1xcbiAgICAgICAgaW5zdGFsbF9uYW1lX3Rvb2wgLWlkIFxcXCIkaVxcXCIgXFxcIiRpXFxcIiB8fCB0cnVlXFxuICAgICAgICBmb3Igb2xkX3BhdGggaW4gJChvdG9vbCAtTCBcXFwiJGlcXFwiIHwgZ3JlcCBcXFwiJG91dFxcXCIgfCBhd2sgJ3twcmludCAkMX0nKTsgZG9cXG4gICAgICAgICAgbmV3X3BhdGg9YGVjaG8gXFxcIiRvbGRfcGF0aFxcXCIgfCBzZWQgXFxcInMsJG91dCwkeyFvdXRwdXRMaWJ9LFxcXCJgXFxuICAgICAgICAgIGluc3RhbGxfbmFtZV90b29sIC1jaGFuZ2UgXFxcIiRvbGRfcGF0aFxcXCIgXFxcIiRuZXdfcGF0aFxcXCIgXFxcIiRpXFxcIiB8fCB0cnVlXFxuICAgICAgICBkb25lXFxuICAgIGRvbmVcXG5maVxcblxcbiMgR2V0IHJpZCBvZiBzb21lIFxcXCJmaXhlZFxcXCIgaGVhZGVyIGZpbGVzXFxucm0gLXJmdiAkb3V0L2xpYi9nY2MvKi8qL2luY2x1ZGUtZml4ZWQve3Jvb3QsbGludXgsc3lzL21vdW50LmgsYml0cy9zdGF0eC5oLHB0aHJlYWQuaH1cXG5cXG4jIFJlcGxhY2UgaGFyZCBsaW5rcyBmb3IgaTY4Ni1wYy1saW51eC1nbnUtZ2NjIGV0Yy4gd2l0aCBzeW1saW5rcy5cXG5mb3IgaSBpbiAkb3V0L2Jpbi8qLWdjYyo7IGRvXFxuICAgIGlmIGNtcCAtcyAkb3V0L2Jpbi9nY2MgJGk7IHRoZW5cXG4gICAgICAgIGxuIC1zZm4gZ2NjICRpXFxuICAgIGZpXFxuZG9uZVxcblxcbmZvciBpIGluICRvdXQvYmluL2MrKyAkb3V0L2Jpbi8qLWMrKyogJG91dC9iaW4vKi1nKysqOyBkb1xcbiAgICBpZiBjbXAgLXMgJG91dC9iaW4vZysrICRpOyB0aGVuXFxuICAgICAgICBsbiAtc2ZuIGcrKyAkaVxcbiAgICBmaVxcbmRvbmVcXG5cXG4jIFR3byBpZGVudGljYWwgbWFuIHBhZ2VzIGFyZSBzaGlwcGVkIChtb3ZpbmcgYW5kIGNvbXByZXNzaW5nIGlzIGRvbmUgbGF0ZXIpXFxuZm9yIGkgaW4gXFxcIiRvdXRcXFwiL3NoYXJlL21hbi9tYW4xLypnKysuMTsgZG9cXG4gICAgaWYgdGVzdCAtZSBcXFwiJGlcXFwiOyB0aGVuXFxuICAgICAgICBtYW5fcHJlZml4PWBlY2hvIFxcXCIkaVxcXCIgfCBzZWQgXFxcInMsLiovXFxcXCguKlxcXFwpZysrLjEsXFxcXDEsXFxcImBcXG4gICAgICAgIGxuIC1zZiBcXFwiJG1hbl9wcmVmaXhcXFwiZ2NjLjEgXFxcIiRpXFxcIlxcbiAgICBmaVxcbmRvbmVcXG5cIiksKFwicG9zdEluc3RhbGxTYXZlQ2hlY2tzdW1QaGFzZVwiLFwibXYgZ2NjL2J1aWxkL2dlbmNoZWNrc3VtIGdjYy9idWlsZC8uZ2VuY2hlY2tzdW0td3JhcHBlZFxcbmNhdCA-IGdjYy9idWlsZC9nZW5jaGVja3N1bSA8PFxcXFxFT0ZcXG4jIS9uaXgvc3RvcmUvaTk3czJzNmZteGp5NTg4NXljMWhtbWg4YnltYTFuamMtYmFzaC01LjJwMzcvYmluL2Jhc2hcXG4vbml4L3N0b3JlLzBmd3E4djNtdmRoNGozaWk1ZDRuZGpseHkweTg5aWw2LW51a2UtcmVmZXJlbmNlcy9iaW4vbnVrZS1yZWZzICRAXFxuZm9yIElOUFVUIGluIFxcXCIkQFxcXCI7IGRvIGluc3RhbGwgLUR0ICRJTlBVVCAkY2hlY2tzdW0vaW5wdXRzLzsgZG9uZVxcbmV4ZWMgYnVpbGQvLmdlbmNoZWNrc3VtLXdyYXBwZWQgJEBcXG5FT0ZcXG5jaG1vZCAreCBnY2MvYnVpbGQvZ2VuY2hlY2tzdW1cXG5ybSBnY2MvKi1jaGVja3N1bS4qXFxubWFrZSAtQyBnY2MgY2MxLWNoZWNrc3VtLm8gY2MxcGx1cy1jaGVja3N1bS5vXFxuaW5zdGFsbCAtRHQgJGNoZWNrc3VtL2NoZWNrc3Vtcy8gZ2NjL2NjKi1jaGVja3N1bS5vXFxuXCIpLChcInBvc3RQYXRjaFwiLFwiY29uZmlndXJlU2NyaXB0cz0kKGZpbmQgLiAtbmFtZSBjb25maWd1cmUpXFxuZm9yIGNvbmZpZ3VyZVNjcmlwdCBpbiAkY29uZmlndXJlU2NyaXB0czsgZG9cXG4gIHBhdGNoU2hlYmFuZ3MgJGNvbmZpZ3VyZVNjcmlwdFxcbmRvbmVcXG5cXG4jIE1ha2Ugc3VyZSBuaXhwa2dzIHZlcnNpb25pbmcgbWF0Y2ggdXBzdHJlYW0gb25lXFxuIyB0byBlYXNlIHZlcnNpb24tYmFzZWQgY29tcGFyaXNvbnMuXFxuZ2NjX2Jhc2VfdmVyc2lvbj0kKDwgZ2NjL0JBU0UtVkVSKVxcbmlmIFtbIDE0LjIuMSAhPSAkZ2NjX2Jhc2VfdmVyc2lvbiBdXTsgdGhlblxcbiAgZWNobyBcXFwiUGxlYXNlIHVwZGF0ZSAndmVyc2lvbicgdmFyaWFibGU6XFxcIlxcbiAgZWNobyBcXFwiICBFeHBlY3RlZDogJyRnY2NfYmFzZV92ZXJzaW9uJ1xcXCJcXG4gIGVjaG8gXFxcIiAgQWN0dWFsOiAnMTQuMi4xLjIwMjUwMzIyJ1xcXCJcXG4gIGV4aXQgMVxcbmZpXFxuZWNobyBcXFwiZml4aW5nIHRoZSB7R0xJQkMsVUNMSUJDLE1VU0x9X0RZTkFNSUNfTElOS0VSIG1hY3Jvcy4uLlxcXCJcXG5mb3IgaGVhZGVyIGluIFxcXCJnY2MvY29uZmlnL1xcXCIqLWdudS5oIFxcXCJnY2MvY29uZmlnL1xcXCIqXFxcIi9cXFwiKi5oXFxuZG9cXG4gIGdyZXAgLXEgX0RZTkFNSUNfTElOS0VSIFxcXCIkaGVhZGVyXFxcIiB8fCBjb250aW51ZVxcbiAgZWNobyBcXFwiICBmaXhpbmcgJGhlYWRlci4uLlxcXCJcXG4gIHNlZCAtaSBcXFwiJGhlYWRlclxcXCIgXFxcXFxcbiAgICAgIC1lICdzfGRlZmluZVtbOmJsYW5rOl1dKlxcXFwoW1VDR11cXFxcK1xcXFwpTElCQ19EWU5BTUlDX0xJTktFUlxcXFwoWzAtOV0qXFxcXClbWzpibGFuazpdXVxcXCJcXFxcKFteXFxcXFxcXCJdXFxcXCtcXFxcKVxcXCIkfGRlZmluZSBcXFxcMUxJQkNfRFlOQU1JQ19MSU5LRVJcXFxcMiBcXFwiL25peC9zdG9yZS85OHN2Njd4N2I3Y2RtamRnMnlnNHFkNWxhY2dueDd2YS1nbGliYy0yLjQwLTY2XFxcXDNcXFwifGcnIFxcXFxcXG4gICAgICAtZSAnc3xkZWZpbmVbWzpibGFuazpdXSpNVVNMX0RZTkFNSUNfTElOS0VSXFxcXChbMC05XSpcXFxcKVtbOmJsYW5rOl1dXFxcIlxcXFwoW15cXFxcXFxcIl1cXFxcK1xcXFwpXFxcIiR8ZGVmaW5lIE1VU0xfRFlOQU1JQ19MSU5LRVJcXFxcMSBcXFwiL25peC9zdG9yZS85OHN2Njd4N2I3Y2RtamRnMnlnNHFkNWxhY2dueDd2YS1nbGliYy0yLjQwLTY2XFxcXDJcXFwifGcnXFxuICBkb25lXFxuXCIpLChcInByZUNvbmZpZ3VyZVwiLFwibG4gLXNmIC9uaXgvc3RvcmUvcXNyY2F2bXE0bjg4djFwdzdpcmwyaDZ6YWsyZmdiOTYtbGlieGNyeXB0LTQuNC4zOC9pbmNsdWRlL2NyeXB0LmggbGlic2FuaXRpemVyL3Nhbml0aXplcl9jb21tb24vY3J5cHQuaFxcbmlmIHRlc3QgLW4gXFxcIiRuZXdsaWJTcmNcXFwiOyB0aGVuXFxuICAgIHRhciB4dmYgXFxcIiRuZXdsaWJTcmNcXFwiIC1DIC4uXFxuICAgIGxuIC1zIC4uL25ld2xpYi0qL25ld2xpYiBuZXdsaWJcXG4gICAgIyBQYXRjaCB0byBnZXQgYXJtdnQ1ZWwgd29ya2luZzpcXG4gICAgc2VkIC1pIC1lICdzLyBhcm0pLyBhcm0qKS8nIG5ld2xpYi9jb25maWd1cmUuaG9zdFxcbmZpXFxuXFxuIyBCdWcgLSB0aGV5IHBhY2thZ2VkIHpsaWJcXG5pZiB0ZXN0IC1kIFxcXCJ6bGliXFxcIjsgdGhlblxcbiAgICAjIFRoaXMgYnJlYWtzIHRoZSBidWlsZCB3aXRob3V0LWhlYWRlcnMsIHdoaWNoIHNob3VsZCBidWlsZCBvbmx5XFxuICAgICMgdGhlIHRhcmdldCBsaWJnY2MgYXMgdGFyZ2V0IGxpYnJhcmllcy5cXG4gICAgIyBTZWUgJ2NvbmZpZ3VyZTo1MzcwJ1xcbiAgICBybSAtUmYgemxpYlxcbmZpXFxuXFxuaWYgdGVzdCAtbiBcXFwiJGNyb3NzTWluZ3dcXFwiIC1hIC1uIFxcXCIkd2l0aG91dFRhcmdldExpYmNcXFwiOyB0aGVuXFxuICAgIG1rZGlyIC1wIC4uL21pbmd3XFxuICAgICMgLS13aXRoLWJ1aWxkLXN5c3Jvb3QgZXhwZWN0cyB0aGF0OlxcbiAgICBjcCAtUiAkbGliY0Nyb3NzL2luY2x1ZGUgLi4vbWluZ3dcXG4gICAgYXBwZW5kVG9WYXIgY29uZmlndXJlRmxhZ3MgXFxcIi0td2l0aC1idWlsZC1zeXNyb290PWBwd2RgLy4uXFxcIlxcbmZpXFxuXFxuIyBQZXJmb3JtIHRoZSBidWlsZCBpbiBhIGRpZmZlcmVudCBkaXJlY3RvcnkuXFxubWtkaXIgLi4vYnVpbGRcXG5jZCAuLi9idWlsZFxcbmNvbmZpZ3VyZVNjcmlwdD0uLi8kc291cmNlUm9vdC9jb25maWd1cmVcXG5cIiksKFwicHJlRml4dXBcIixcIiMgUG9wdWxhdGUgbW9zdCBkZWxpY2F0ZWQgbGliLyBwYXJ0IG9mIHN0cmlwRGVidWdMaXN0eyxUYXJnZXR9XFxudXBkYXRlRGVidWdMaXN0UGF0aHMoKSB7XFxuICBsb2NhbCBvbGRPcHRzXFxuICBvbGRPcHRzPVxcXCIkKHNob3B0IC1wIG51bGxnbG9iKVxcXCIgfHwgdHJ1ZVxcbiAgc2hvcHQgLXMgbnVsbGdsb2JcXG5cXG4gIHB1c2hkICRvdXRcXG4gIGxvY2FsIC1hciBvdXRIb3N0RmlsZXM9KFxcbiAgICBsaWJ7LDMyLDY0fS8qLnthLG8sc28qfVxcbiAgICBsaWJ7LDMyLDY0fS9nY2MveDg2XzY0LXVua25vd24tbGludXgtZ251LyovcGx1Z2luXFxuICApXFxuICBsb2NhbCAtYXIgb3V0VGFyZ2V0RmlsZXM9KFxcbiAgICBsaWJ7LDMyLDY0fS9nY2MveDg2XzY0LXVua25vd24tbGludXgtZ251LyovKi57YSxvLHNvKn1cXG4gIClcXG4gIHBvcGRcXG5cXG4gIHB1c2hkICRsaWJcXG4gIGxvY2FsIC1hciBsaWJIb3N0RmlsZXM9KFxcbiAgICBsaWJ7LDMyLDY0fS8qLnthLG8sc28qfVxcbiAgKVxcbiAgbG9jYWwgLWFyIGxpYlRhcmdldEZpbGVzPShcXG4gICAgbGlieywzMiw2NH0veDg2XzY0LXVua25vd24tbGludXgtZ251Lyoue2Esbyxzbyp9XFxuICApXFxuICBwb3BkXFxuXFxuICBldmFsIFxcXCIkb2xkT3B0c1xcXCJcXG5cXG4gIHN0cmlwRGVidWdMaXN0PVxcXCIkc3RyaXBEZWJ1Z0xpc3QgJHtvdXRIb3N0RmlsZXNbKl19ICR7bGliSG9zdEZpbGVzWypdfVxcXCJcXG4gIHN0cmlwRGVidWdMaXN0VGFyZ2V0PVxcXCIkc3RyaXBEZWJ1Z0xpc3RUYXJnZXQgJHtvdXRUYXJnZXRGaWxlc1sqXX0gJHtsaWJUYXJnZXRGaWxlc1sqXX1cXFwiXFxufVxcbnVwZGF0ZURlYnVnTGlzdFBhdGhzXFxuXCIpLChcInByZUZpeHVwTGliR2NjUGhhc2VcIixcIiMgbW92ZSBsaWJnY2MgZnJvbSBsaWIgdG8gaXRzIG93biBvdXRwdXQgKGxpYmdjYylcXG5ta2RpciAtcCAkbGliZ2NjL2xpYlxcbm12ICAgICRsaWIvbGliL2xpYmdjY19zLnNvICAgICAgJGxpYmdjYy9saWIvXFxubXYgICAgJGxpYi9saWIvbGliZ2NjX3Muc28uMSAgICAkbGliZ2NjL2xpYi9cXG5sbiAtcyAkbGliZ2NjL2xpYi9saWJnY2Nfcy5zbyAgICRsaWIvbGliL1xcbmxuIC1zICRsaWJnY2MvbGliL2xpYmdjY19zLnNvLjEgJGxpYi9saWIvXFxucGF0Y2hlbGYgLS1zZXQtcnBhdGggXFxcIlxcXCIgJGxpYmdjYy9saWIvbGliZ2NjX3Muc28uMVxcblwiKSwoXCJwcmVGaXh1cFBoYXNlc1wiLFwicHJlRml4dXBMaWJHY2NQaGFzZSBwb3N0SW5zdGFsbFNhdmVDaGVja3N1bVBoYXNlXCIpLChcInByZUluc3RhbGxcIixcImRlY2xhcmUgLWdhIGNvbXBhdGliaWxpdHlTeW1saW5rcz0oKVxcblxcbm1ha2VDb21wYXRpYmlsaXR5U3ltbGluaygpIHtcXG4gIGRlY2xhcmUgLWEgb3V0cHV0c1RvTGluaz0oXFxcIiRvdXRcXFwiKVxcblxcbiAgaWYgWyAtbiBcXFwiJGxpYlxcXCIgXTsgdGhlblxcbiAgICBvdXRwdXRzVG9MaW5rKz0oXFxcIiRsaWJcXFwiKVxcbiAgZmlcXG5cXG4gIGZvciBvdXRwdXQgaW4gXFxcIiR7b3V0cHV0c1RvTGlua1tAXX1cXFwiOyBkb1xcbiAgICBsb2NhbCBsaW5rVGFyZ2V0PVxcXCIkMVxcXCJcXG4gICAgbG9jYWwgbGlua05hbWU9XFxcIiRvdXRwdXQvJDJcXFwiXFxuXFxuICAgIGVjaG8gXFxcIkNyZWF0aW5nIGNvbXBhdGliaWxpdHkgc3ltbGluazogJGxpbmtUYXJnZXQgLT4gJGxpbmtOYW1lXFxcIlxcblxcbiAgICBta2RpciAtcCBcXFwiJChkaXJuYW1lIFxcXCIkbGlua05hbWVcXFwiKVxcXCJcXG4gICAgbG4gLXMgXFxcIiRsaW5rVGFyZ2V0XFxcIiBcXFwiJGxpbmtOYW1lXFxcIlxcbiAgICBjb21wYXRpYmlsaXR5U3ltbGlua3MrPShcXFwiJGxpbmtOYW1lXFxcIilcXG4gIGRvbmVcXG59XFxubWFrZUNvbXBhdGliaWxpdHlTeW1saW5rIGxpYiBsaWIzMlxcbm1ha2VDb21wYXRpYmlsaXR5U3ltbGluayBsaWIgbGliNjRcXG5cIiksKFwicHJlVW5wYWNrXCIsXCJvbGRPcHRzPVxcXCIkKHNob3B0IC1wbyBub3Vuc2V0KVxcXCIgfHwgdHJ1ZVxcbnNldCAtZXVvIHBpcGVmYWlsXFxuXFxuZXhwb3J0IE5JWF9GSVhJTkNfRFVNTVk9XFxcIiROSVhfQlVJTERfVE9QL2R1bW15XFxcIlxcbm1rZGlyIFxcXCIkTklYX0ZJWElOQ19EVU1NWVxcXCJcXG5cXG5pZiB0ZXN0IFxcXCIkc3RhdGljQ29tcGlsZXJcXFwiID0gXFxcIjFcXFwiOyB0aGVuXFxuICAgIEVYVFJBX0xERkxBR1M9XFxcIi1zdGF0aWNcXFwiXFxuZWxpZiB0ZXN0IFxcXCIke05JWF9ET05UX1NFVF9SUEFUSC19XFxcIiAhPSBcXFwiMVxcXCI7IHRoZW5cXG4gICAgRVhUUkFfTERGTEFHUz1cXFwiLVdsLC1ycGF0aCwkeyFvdXRwdXRMaWJ9L2xpYlxcXCJcXG5lbHNlXFxuICAgIEVYVFJBX0xERkxBR1M9XFxcIlxcXCJcXG5maVxcblxcbiMgR0NDIGludGVycHJldHMgZW1wdHkgcGF0aHMgYXMgXFxcIi5cXFwiLCB3aGljaCB3ZSBkb24ndCB3YW50LlxcbmlmIHRlc3QgLXogXFxcIiR7Q1BBVEgtfVxcXCI7IHRoZW4gdW5zZXQgQ1BBVEg7IGZpXFxuaWYgdGVzdCAteiBcXFwiJHtMSUJSQVJZX1BBVEgtfVxcXCI7IHRoZW4gdW5zZXQgTElCUkFSWV9QQVRIOyBmaVxcbmVjaG8gXFxcIlxcXFwkQ1BBVEggaXMgXFxcXGAke0NQQVRILX0nXFxcIlxcbmVjaG8gXFxcIlxcXFwkTElCUkFSWV9QQVRIIGlzIFxcXFxgJHtMSUJSQVJZX1BBVEgtfSdcXFwiXFxuXFxuaWYgdGVzdCBcXFwiJG5vU3lzRGlyc1xcXCIgPSBcXFwiMVxcXCI7IHRoZW5cXG5cXG4gICAgZGVjbGFyZSAtZyBcXFxcXFxuICAgICAgICBFWFRSQV9GTEFHU19GT1JfQlVJTEQgRVhUUkFfRkxBR1MgRVhUUkFfRkxBR1NfRk9SX1RBUkdFVCBcXFxcXFxuICAgICAgICBFWFRSQV9MREZMQUdTX0ZPUl9CVUlMRCBFWFRSQV9MREZMQUdTX0ZPUl9UQVJHRVRcXG5cXG4gICAgIyBFeHRyYWN0IGZsYWdzIGZyb20gQmludG9vbHMgV3JhcHBlcnNcXG4gICAgZm9yIHBvc3QgaW4gJ19GT1JfQlVJTEQnIFxcXCJcXFwiOyBkb1xcbiAgICAgICAgY3VyQmludG9vbHM9XFxcIk5JWF9CSU5UT09MUyR7cG9zdH1cXFwiXFxuXFxuICAgICAgICBkZWNsYXJlIC1hIGV4dHJhTERGbGFncz0oKVxcbiAgICAgICAgaWYgW1sgLWUgXFxcIiR7IWN1ckJpbnRvb2xzfS9uaXgtc3VwcG9ydC9vcmlnLWxpYmNcXFwiIF1dOyB0aGVuXFxuICAgICAgICAgICAgIyBGaWd1cmUgb3V0IHdoYXQgZXh0cmEgZmxhZ3Mgd2hlbiBsaW5raW5nIHRvIHBhc3MgdG8gdGhlIGdjY1xcbiAgICAgICAgICAgICMgY29tcGlsZXJzIGJlaW5nIGdlbmVyYXRlZCB0byBtYWtlIHN1cmUgdGhhdCB0aGV5IHVzZSBvdXIgbGliYy5cXG4gICAgICAgICAgICBleHRyYUxERmxhZ3M9KCQoPCBcXFwiJHshY3VyQmludG9vbHN9L25peC1zdXBwb3J0L2xpYmMtbGRmbGFnc1xcXCIpICQoPCBcXFwiJHshY3VyQmludG9vbHN9L25peC1zdXBwb3J0L2xpYmMtbGRmbGFncy1iZWZvcmVcXFwiIHx8IHRydWUpKVxcbiAgICAgICAgICAgIGlmIFsgLWUgJHshY3VyQmludG9vbHN9L25peC1zdXBwb3J0L2xkLXNldC1keW5hbWljLWxpbmtlciBdOyB0aGVuXFxuICAgICAgICAgICAgICAgIGV4dHJhTERGbGFncz0tZHluYW1pYy1saW5rZXI9JCg8ICR7IWN1ckJpbnRvb2xzfS9uaXgtc3VwcG9ydC9keW5hbWljLWxpbmtlcilcXG4gICAgICAgICAgICBmaVxcblxcbiAgICAgICAgICAgICMgVGhlIHBhdGggdG8gdGhlIExpYmMgYmluYXJpZXMgc3VjaCBhcyBgY3J0aS5vJy5cXG4gICAgICAgICAgICBsaWJjX2xpYmRpcj1cXFwiJCg8IFxcXCIkeyFjdXJCaW50b29sc30vbml4LXN1cHBvcnQvb3JpZy1saWJjXFxcIikvbGliXFxcIlxcbiAgICAgICAgZWxzZVxcbiAgICAgICAgICAgICMgSGFjazogc3VwcG9ydCBpbXB1cmUgZW52aXJvbm1lbnRzLlxcbiAgICAgICAgICAgIGV4dHJhTERGbGFncz0oXFxcIi1ML3Vzci9saWI2NFxcXCIgXFxcIi1ML3Vzci9saWJcXFwiKVxcbiAgICAgICAgICAgIGxpYmNfbGliZGlyPVxcXCIvdXNyL2xpYlxcXCJcXG4gICAgICAgIGZpXFxuICAgICAgICBkZWNsYXJlIC1hIHByZWZpeEV4dHJhTERGbGFncz0oKVxcbiAgICAgICAgcHJlZml4RXh0cmFMREZsYWdzPShcXFwiLUwkbGliY19saWJkaXJcXFwiKVxcbiAgICAgICAgbml4RG9udFNldFJwYXRoVmFyPU5JWF9ET05UX1NFVF9SUEFUSCR7cG9zdH1cXG4gICAgICAgIGlmIHRlc3QgXFxcIiR7IW5peERvbnRTZXRScGF0aFZhci19XFxcIiAhPSBcXFwiMVxcXCI7IHRoZW5cXG4gICAgICAgICAgICBwcmVmaXhFeHRyYUxERmxhZ3MrPShcXFwiLXJwYXRoXFxcIiBcXFwiJGxpYmNfbGliZGlyXFxcIilcXG4gICAgICAgIGZpXFxuICAgICAgICBleHRyYUxERmxhZ3M9KFxcXCIke3ByZWZpeEV4dHJhTERGbGFnc1tAXX1cXFwiIFxcXCIke2V4dHJhTERGbGFnc1tAXX1cXFwiKVxcbiAgICAgICAgZm9yIGkgaW4gXFxcIiR7ZXh0cmFMREZsYWdzW0BdfVxcXCI7IGRvXFxuICAgICAgICAgICAgZGVjbGFyZSAtZyBFWFRSQV9MREZMQUdTJHtwb3N0fSs9XFxcIiAtV2wsJGlcXFwiXFxuICAgICAgICBkb25lXFxuICAgIGRvbmVcXG5cXG4gICAgIyBFeHRyYWN0IGZsYWdzIGZyb20gQ0MgV3JhcHBlcnNcXG4gICAgZm9yIHBvc3QgaW4gJ19GT1JfQlVJTEQnIFxcXCJcXFwiOyBkb1xcbiAgICAgICAgY3VyQ0M9XFxcIk5JWF9DQyR7cG9zdH1cXFwiXFxuICAgICAgICBjdXJGSVhJTkM9XFxcIk5JWF9GSVhJTkNfRFVNTVkke3Bvc3R9XFxcIlxcblxcbiAgICAgICAgZGVjbGFyZSAtYSBleHRyYUZsYWdzPSgpXFxuICAgICAgICBpZiBbWyAtZSBcXFwiJHshY3VyQ0N9L25peC1zdXBwb3J0L29yaWctbGliY1xcXCIgXV07IHRoZW5cXG4gICAgICAgICAgICAjIEZpZ3VyZSBvdXQgd2hhdCBleHRyYSBjb21waWxpbmcgZmxhZ3MgdG8gcGFzcyB0byB0aGUgZ2NjIGNvbXBpbGVyc1xcbiAgICAgICAgICAgICMgYmVpbmcgZ2VuZXJhdGVkIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZXkgdXNlIG91ciBsaWJjLlxcbiAgICAgICAgICAgIGV4dHJhRmxhZ3M9KCQoPCBcXFwiJHshY3VyQ0N9L25peC1zdXBwb3J0L2xpYmMtY3J0MS1jZmxhZ3NcXFwiKSAkKDwgXFxcIiR7IWN1ckNDfS9uaXgtc3VwcG9ydC9saWJjLWNmbGFnc1xcXCIpKVxcblxcbiAgICAgICAgICAgICMgVGhlIHBhdGggdG8gdGhlIExpYmMgaGVhZGVyc1xcbiAgICAgICAgICAgIGxpYmNfZGV2ZGlyPVxcXCIkKDwgXFxcIiR7IWN1ckNDfS9uaXgtc3VwcG9ydC9vcmlnLWxpYmMtZGV2XFxcIilcXFwiXFxuXFxuICAgICAgICAgICAgIyBVc2UgKnJlYWwqIGhlYWRlciBmaWxlcywgb3RoZXJ3aXNlIGEgbGltaXRzLmggaXMgZ2VuZXJhdGVkIHRoYXRcXG4gICAgICAgICAgICAjIGRvZXMgbm90IGluY2x1ZGUgTGliYydzIGxpbWl0cy5oIChub3RhYmx5IG1pc3NpbmcgU1NJWkVfTUFYLFxcbiAgICAgICAgICAgICMgd2hpY2ggYnJlYWtzIHRoZSBidWlsZCkuXFxuICAgICAgICAgICAgZGVjbGFyZSAtZyBOSVhfRklYSU5DX0RVTU1ZJHtwb3N0fT1cXFwiJGxpYmNfZGV2ZGlyL2luY2x1ZGVcXFwiXFxuICAgICAgICBlbHNlXFxuICAgICAgICAgICAgIyBIYWNrOiBzdXBwb3J0IGltcHVyZSBlbnZpcm9ubWVudHMuXFxuICAgICAgICAgICAgZXh0cmFGbGFncz0oXFxcIi1pc3lzdGVtXFxcIiBcXFwiL3Vzci9pbmNsdWRlXFxcIilcXG4gICAgICAgICAgICBkZWNsYXJlIC1nIE5JWF9GSVhJTkNfRFVNTVkke3Bvc3R9PS91c3IvaW5jbHVkZVxcbiAgICAgICAgZmlcXG5cXG4gICAgICAgIGV4dHJhRmxhZ3M9KFxcXCItSSR7IWN1ckZJWElOQ31cXFwiIFxcXCIke2V4dHJhRmxhZ3NbQF19XFxcIilcXG5cXG4gICAgICAgICMgQk9PVF9DRkxBR1MgZGVmYXVsdHMgdG8gYC1nIC1PMic7IHNpbmNlIHdlIG92ZXJyaWRlIGl0IGJlbG93LCBtYWtlXFxuICAgICAgICAjIHN1cmUgdG8gZXhwbGljdGx5IGFkZCB0aGVtIHNvIHRoYXQgZmlsZXMgY29tcGlsZWQgd2l0aCB0aGUgYm9vdHN0cmFwXFxuICAgICAgICAjIGNvbXBpbGVyIGFyZSBvcHRpbWl6ZWQgYW5kIChvcHRpb25hbGx5KSBjb250YWluIGRlYnVnZ2luZyBpbmZvcm1hdGlvblxcbiAgICAgICAgIyAoaW5mbyBcXFwiKGdjY2luc3RhbGwpIEJ1aWxkaW5nXFxcIikuXFxuICAgICAgICBpZiB0ZXN0IC1uIFxcXCIke2RvbnRTdHJpcC19XFxcIjsgdGhlblxcbiAgICAgICAgICAgIGV4dHJhRmxhZ3M9KFxcXCItTzJcXFwiIFxcXCItZ1xcXCIgXFxcIiR7ZXh0cmFGbGFnc1tAXX1cXFwiKVxcbiAgICAgICAgZWxzZVxcbiAgICAgICAgICAgICMgRG9uJ3QgcGFzcyBgLWcnIGF0IGFsbDsgdGhpcyBzYXZlcyBzcGFjZSB3aGlsZSBidWlsZGluZy5cXG4gICAgICAgICAgICBleHRyYUZsYWdzPShcXFwiLU8yXFxcIiBcXFwiJHtleHRyYUZsYWdzW0BdfVxcXCIpXFxuICAgICAgICBmaVxcblxcbiAgICAgICAgZGVjbGFyZSAtZyBFWFRSQV9GTEFHUyR7cG9zdH09XFxcIiR7ZXh0cmFGbGFnc1sqXX1cXFwiXFxuICAgIGRvbmVcXG5cXG4gICAgaWYgdGVzdCAteiBcXFwiJHt0YXJnZXRDb25maWctfVxcXCI7IHRoZW5cXG4gICAgICAgICMgaG9zdCA9IHRhcmdldCwgc28gdGhlIGZsYWdzIGFyZSB0aGUgc2FtZVxcbiAgICAgICAgRVhUUkFfRkxBR1NfRk9SX1RBUkdFVD1cXFwiJEVYVFJBX0ZMQUdTXFxcIlxcbiAgICAgICAgRVhUUkFfTERGTEFHU19GT1JfVEFSR0VUPVxcXCIkRVhUUkFfTERGTEFHU1xcXCJcXG4gICAgZmlcXG5cXG4gICAgIyBDRkxBR1NfRk9SX1RBUkdFVCBhcmUgbmVlZGVkIGZvciB0aGUgbGlic3RkYysrIGNvbmZpZ3VyZSBzY3JpcHQgdG8gZmluZFxcbiAgICAjIHRoZSBzdGFydGZpbGVzLlxcbiAgICAjIEZMQUdTX0ZPUl9UQVJHRVQgYXJlIG5lZWRlZCBmb3IgdGhlIHRhcmdldCBsaWJyYXJpZXMgdG8gcmVjZWl2ZSB0aGUgLUJ4eHhcXG4gICAgIyBmb3IgdGhlIHN0YXJ0ZmlsZXMuXFxuICAgIG1ha2VGbGFnc0FycmF5Kz0oXFxuICAgICAgICBcXFwiQlVJTERfU1lTVEVNX0hFQURFUl9ESVI9JE5JWF9GSVhJTkNfRFVNTVlfRk9SX0JVSUxEXFxcIlxcbiAgICAgICAgXFxcIlNZU1RFTV9IRUFERVJfRElSPSROSVhfRklYSU5DX0RVTU1ZX0ZPUl9CVUlMRFxcXCJcXG4gICAgICAgIFxcXCJOQVRJVkVfU1lTVEVNX0hFQURFUl9ESVI9JE5JWF9GSVhJTkNfRFVNTVlcXFwiXFxuXFxuICAgICAgICBcXFwiTERGTEFHU19GT1JfQlVJTEQ9JEVYVFJBX0xERkxBR1NfRk9SX0JVSUxEXFxcIlxcbiAgICAgICAgI1xcXCJMREZMQUdTPSRFWFRSQV9MREZMQUdTXFxcIlxcbiAgICAgICAgXFxcIkxERkxBR1NfRk9SX1RBUkdFVD0kRVhUUkFfTERGTEFHU19GT1JfVEFSR0VUXFxcIlxcblxcbiAgICAgICAgXFxcIkNGTEFHU19GT1JfQlVJTEQ9JEVYVFJBX0ZMQUdTX0ZPUl9CVUlMRCAkRVhUUkFfTERGTEFHU19GT1JfQlVJTERcXFwiXFxuICAgICAgICBcXFwiQ1hYRkxBR1NfRk9SX0JVSUxEPSRFWFRSQV9GTEFHU19GT1JfQlVJTEQgJEVYVFJBX0xERkxBR1NfRk9SX0JVSUxEXFxcIlxcbiAgICAgICAgXFxcIkZMQUdTX0ZPUl9CVUlMRD0kRVhUUkFfRkxBR1NfRk9SX0JVSUxEICRFWFRSQV9MREZMQUdTX0ZPUl9CVUlMRFxcXCJcXG5cXG4gICAgICAgICMgSXQgc2VlbXMgdGhlcmUgaXMgYSBidWcgaW4gR0NDIDVcXG4gICAgICAgICNcXFwiQ0ZMQUdTPSRFWFRSQV9GTEFHUyAkRVhUUkFfTERGTEFHU1xcXCJcXG4gICAgICAgICNcXFwiQ1hYRkxBR1M9JEVYVFJBX0ZMQUdTICRFWFRSQV9MREZMQUdTXFxcIlxcblxcbiAgICAgICAgXFxcIkNGTEFHU19GT1JfVEFSR0VUPSRFWFRSQV9GTEFHU19GT1JfVEFSR0VUICRFWFRSQV9MREZMQUdTX0ZPUl9UQVJHRVRcXFwiXFxuICAgICAgICBcXFwiQ1hYRkxBR1NfRk9SX1RBUkdFVD0kRVhUUkFfRkxBR1NfRk9SX1RBUkdFVCAkRVhUUkFfTERGTEFHU19GT1JfVEFSR0VUXFxcIlxcbiAgICAgICAgXFxcIkZMQUdTX0ZPUl9UQVJHRVQ9JEVYVFJBX0ZMQUdTX0ZPUl9UQVJHRVQgJEVYVFJBX0xERkxBR1NfRk9SX1RBUkdFVFxcXCJcXG4gICAgKVxcblxcbiAgICBpZiB0ZXN0IC16IFxcXCIke3RhcmdldENvbmZpZy19XFxcIjsgdGhlblxcbiAgICAgICAgbWFrZUZsYWdzQXJyYXkrPShcXG4gICAgICAgICAgICBcXFwiQk9PVF9DRkxBR1M9JEVYVFJBX0ZMQUdTICRFWFRSQV9MREZMQUdTXFxcIlxcbiAgICAgICAgICAgIFxcXCJCT09UX0xERkxBR1M9JEVYVFJBX0ZMQUdTX0ZPUl9UQVJHRVQgJEVYVFJBX0xERkxBR1NfRk9SX1RBUkdFVFxcXCJcXG4gICAgICAgIClcXG4gICAgZmlcXG5cXG4gICAgaWYgdGVzdCBcXFwiJHdpdGhvdXRUYXJnZXRMaWJjXFxcIiA9PSAxOyB0aGVuXFxuICAgICAgICAjIFdlIGRvbid0IHdhbnQgdGhlIGdjYyBidWlsZCB0byBhc3N1bWUgdGhlcmUgd2lsbCBiZSBhIGxpYmMgcHJvdmlkaW5nXFxuICAgICAgICAjIGxpbWl0cy5oIGluIHRoaXMgc3RhZ2VcXG4gICAgICAgIG1ha2VGbGFnc0FycmF5Kz0oXFxuICAgICAgICAgICAgJ0xJTUlUU19IX1RFU1Q9ZmFsc2UnXFxuICAgICAgICApXFxuICAgIGVsc2VcXG4gICAgICAgIG1ha2VGbGFnc0FycmF5Kz0oXFxuICAgICAgICAgICAgJ0xJTUlUU19IX1RFU1Q9dHJ1ZSdcXG4gICAgICAgIClcXG4gICAgZmlcXG5maVxcblxcbmV2YWwgXFxcIiRvbGRPcHRzXFxcIlxcblwiKSwoXCJwcm9wYWdhdGVkQnVpbGRJbnB1dHNcIixcIlwiKSwoXCJwcm9wYWdhdGVkTmF0aXZlQnVpbGRJbnB1dHNcIixcIlwiKSwoXCJzZXRPdXRwdXRGbGFnc1wiLFwiXCIpLChcInNyY1wiLFwiL25peC9zdG9yZS80dzJyNm04eTZidzUwanJyY3hmeWhpNWF4OGNwbWFsNC1nY2MtMTQtMjAyNTAzMjIudGFyLnh6XCIpLChcInN0YXRpY0NvbXBpbGVyXCIsXCJcIiksKFwic3RkZW52XCIsXCIvbml4L3N0b3JlL2xkaGg0NzU0cmxsM3pxYjY5aTAzcGpqbWw4MzU3dnZ6LWJvb3RzdHJhcC1zdGFnZTMtc3RkZW52LWxpbnV4XCIpLChcInN0cmljdERlcHNcIixcIlwiKSwoXCJzdHJpcERlYnVnTGlzdFwiLFwiYmluIGxpYmV4ZWNcIiksKFwic3RyaXBEZWJ1Z0xpc3RUYXJnZXRcIixcIng4Nl82NC11bmtub3duLWxpbnV4LWdudVwiKSwoXCJzeXN0ZW1cIixcIng4Nl82NC1saW51eFwiKSwoXCJ2ZXJzaW9uXCIsXCIxNC4yLjFcIiksKFwid2l0aG91dFRhcmdldExpYmNcIixcIlwiKV0pIn19LCJvdXQiOnsiY2FzdG9yZS1lbnRyeSI6eyJjaGVja3N1bSI6IkNpUVNJR2syeEFaNGF6ZWoySmhzNzFfeW13OXRmYmtFcVJzVjRKN0RILXJqUzI0cUdBWSIsImluZm8iOiJDaVFTSUJtbWxLZzBCbFROQjVaSk5vSGZISHV6ZzNsTWtMcmxkaTA3RVRvbFRHdUFHQlkiLCJsaWIiOiJDaVFTSUhDNkFlYmhJTklwYnVSWUdtb214TFNuRGRDMWJZeFlERWU0S3BVWlctcDFHRnciLCJsaWJnY2MiOiJDaVFTSUY5MnU1bWFPVGFtMmFneHRoMWY3cjZ6aVlnbXdLWlQ1LWhJcVNzQWhnZ25HQVkiLCJtYW4iOiJDaVFTSU96dDBNZ1hza0ZXcnZjb0pvR1p1cWJIOVNfOE9KTmtyLTNsTWxkblFIUzVHQnciLCJvdXQiOiJDaVVTSUJBTVBDemQ1YjlaclhNN1M5MzVXclVKcjNOYUF3NmRYaGxUbTFtU25HeW1HUFFhIn0sIm5peCI6eyJjaGVja3N1bSI6eyJoYXNoQWxnbyI6InI6c2hhMjU2IiwicGF0aCI6Ii9uaXgvc3RvcmUvdjJsY2FsYmNxemppeDZxbWY5Z2o4NWx5dzVhNXhuaWgtZ2NjLTE0LjIuMS4yMDI1MDMyMi1jaGVja3N1bSIsImhhc2giOiJzaGEyNTY6MWc5ejRzYmRoNnBqcDcwNGFpYzk2MXdzbDZ4cTc3N3FuNXJraHpzbjUxMWI0MHEyYnZsMiJ9LCJpbmZvIjp7Imhhc2hBbGdvIjoicjpzaGEyNTYiLCJwYXRoIjoiL25peC9zdG9yZS9xOGkzNG5uaGZsNjA5cWdydjdqeHN6a203ODY0ZjRzay1nY2MtMTQuMi4xLjIwMjUwMzIyLWluZm8iLCJoYXNoIjoic2hhMjU2OjF3ODFtYmk1ejZxMHh6dmRkbWk3NTUya2NjMDg2NzhjOW5hd2RsbjRqNDNzcWRzNGJsczMifSwibGliIjp7Imhhc2hBbGdvIjoicjpzaGEyNTYiLCJwYXRoIjoiL25peC9zdG9yZS95NWxqN2syMzNyZmYzNngxa3k4cDY5ZzNycHgyaDE3cS1nY2MtMTQuMi4xLjIwMjUwMzIyLWxpYiIsImhhc2giOiJzaGEyNTY6MWE1YmFxeTY2YjA3czZqd3AzZ2JsbGR5Mng2MTR2Yms5aHIzNHJmOHc3bGo1ZGJqZjhoMSJ9LCJsaWJnY2MiOnsiaGFzaEFsZ28iOiJyOnNoYTI1NiIsInBhdGgiOiIvbml4L3N0b3JlLzc4c2JwOWNqcGgyZ2dzMTBjeGptazhmNHgxbnI0MzY0LWdjYy0xNC4yLjEuMjAyNTAzMjItbGliZ2NjIiwiaGFzaCI6InNoYTI1NjowYzBzanZhMm53czU4MzN2cGthaTk4YmtncDFtdzlidmN4Z2dydmMwMXJta3ZqNDM4N2dqIn0sIm1hbiI6eyJoYXNoQWxnbyI6InI6c2hhMjU2IiwicGF0aCI6Ii9uaXgvc3RvcmUvMWI3d3lwZmN4M3k1aml3MHpmbmxoOXA0M2ZkcjFzYzEtZ2NjLTE0LjIuMS4yMDI1MDMyMi1tYW4iLCJoYXNoIjoic2hhMjU2OjFyMWpoMjdhNTVyaDkxbGNydjdoMjJsazUzeWZpMTRhYXJjbThncHBneWxheHJsbDRtamYifSwib3V0Ijp7Imhhc2hBbGdvIjoicjpzaGEyNTYiLCJwYXRoIjoiL25peC9zdG9yZS9oandkM3l3YXFudmkxbnE1eW1yNjNqYzBtZHFwbnJpYS1nY2MtMTQuMi4xLjIwMjUwMzIyIiwiaGFzaCI6InNoYTI1NjowMmljYndiOGJuY3dnNmZ5ZmMxNmRjNjcybmNsZ2gzcjUyZm02cjNqN3FhaXYxeGhqZ3hwIn19fSwiYnVpbGRlciI6eyJyZWJ1aWxkX2lkIjo3MjI2NDA2NTMsInN0b3JlX3Jvb3QiOiIvbml4L3N0b3JlIn19.wDo4hyV6dRUwrnEWuRHX6_8hX9fhCPyhUyHHJGtS9D7nMQEIuiUwV8cXqnoASAJLBhDMulkptcD7Qiqet8R3Cw", "eyJhbGciOiJFZERTQSIsImNydiI6IkVkMjU1MTkiLCJkZXRhY2hIYXNoIjoibml4LWNhLXBhdGgiLCJraWQiOiJidWlsZGVyQTpiY2RhOGQ1NDQ3MGZlYTNiIiwidHlwIjoiSldUIiwidHlwZSI6ImxhdXQiLCJ2IjoiMiJ9..VhdWl5Fi_y-R6eLGom6p-tqmEUC7C2LpsMeuAD_jv2ialWfqF6D0joKURqoelAOggxIuOPzQPdqOELMMJgaVBg"]}